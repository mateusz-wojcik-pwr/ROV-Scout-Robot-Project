
Scout_Robot_Remote_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b94  08005b94  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005b94  08005b94  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b94  08005b94  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000088  08005c24  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005c24  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b19  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4b  00000000  00000000  00030bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00034c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a481  00000000  00000000  00035c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f26  00000000  00000000  000500c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009108c  00000000  00000000  00063fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d64  00000000  00000000  000f50c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ac0 	.word	0x08005ac0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08005ac0 	.word	0x08005ac0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <analogInit>:



ADC_HandleTypeDef *adc;

void analogInit(ADC_HandleTypeDef *hadc, uint32_t* dmaArray){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	adc = hadc;
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <analogInit+0x28>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_DMA(adc, dmaArray, 6);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <analogInit+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2206      	movs	r2, #6
 8000772:	6839      	ldr	r1, [r7, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f001 faa9 	bl	8001ccc <HAL_ADC_Start_DMA>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000a4 	.word	0x200000a4

08000788 <JS_Init>:

void JS_Init(struct Joystick *JS, uint8_t addr, uint16_t s, uint16_t dZ){
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	4608      	mov	r0, r1
 8000792:	4611      	mov	r1, r2
 8000794:	461a      	mov	r2, r3
 8000796:	4603      	mov	r3, r0
 8000798:	72fb      	strb	r3, [r7, #11]
 800079a:	460b      	mov	r3, r1
 800079c:	813b      	strh	r3, [r7, #8]
 800079e:	4613      	mov	r3, r2
 80007a0:	80fb      	strh	r3, [r7, #6]
	JS->dataAddress = addr;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	7afa      	ldrb	r2, [r7, #11]
 80007a6:	711a      	strb	r2, [r3, #4]
	JS->smoothingFactor = s;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	893a      	ldrh	r2, [r7, #8]
 80007ac:	81da      	strh	r2, [r3, #14]
	JS->position[0] = 0;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2200      	movs	r2, #0
 80007b2:	821a      	strh	r2, [r3, #16]
	JS->position[1] = 0;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2200      	movs	r2, #0
 80007b8:	825a      	strh	r2, [r3, #18]
	JS->smoothedValue[0] = 0;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2200      	movs	r2, #0
 80007be:	815a      	strh	r2, [r3, #10]
	JS->smoothedValue[1] = 0;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2200      	movs	r2, #0
 80007c4:	819a      	strh	r2, [r3, #12]
	JS->deadZone = dZ;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	829a      	strh	r2, [r3, #20]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
	...

080007d8 <JS_Aquisite>:

void JS_Aquisite(struct Joystick *JS, uint16_t *dmaArray){
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af02      	add	r7, sp, #8
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	uint8_t x_addr = JS->dataAddress;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
	uint8_t y_addr = JS->dataAddress+1;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	73bb      	strb	r3, [r7, #14]
	uint16_t rawX;
	uint16_t rawY;
	int16_t temp;

	JS->rawValue[0] = dmaArray[x_addr];
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	881a      	ldrh	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	80da      	strh	r2, [r3, #6]
	JS->rawValue[1] = dmaArray[y_addr];
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	4413      	add	r3, r2
 8000806:	881a      	ldrh	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	811a      	strh	r2, [r3, #8]

	rawX = JS->rawValue[0];
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	88db      	ldrh	r3, [r3, #6]
 8000810:	81bb      	strh	r3, [r7, #12]
	rawY = JS->rawValue[1];
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	891b      	ldrh	r3, [r3, #8]
 8000816:	817b      	strh	r3, [r7, #10]

	if(rawX > JS->maxValue[0])
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8b5b      	ldrh	r3, [r3, #26]
 800081c:	89ba      	ldrh	r2, [r7, #12]
 800081e:	429a      	cmp	r2, r3
 8000820:	d902      	bls.n	8000828 <JS_Aquisite+0x50>
		JS->maxValue[0] = rawX;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	89ba      	ldrh	r2, [r7, #12]
 8000826:	835a      	strh	r2, [r3, #26]

	if(rawY > JS->maxValue[1])
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8b9b      	ldrh	r3, [r3, #28]
 800082c:	897a      	ldrh	r2, [r7, #10]
 800082e:	429a      	cmp	r2, r3
 8000830:	d902      	bls.n	8000838 <JS_Aquisite+0x60>
		JS->maxValue[1] = rawY;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	897a      	ldrh	r2, [r7, #10]
 8000836:	839a      	strh	r2, [r3, #28]

	if(rawX < JS->minValue[0])
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	8adb      	ldrh	r3, [r3, #22]
 800083c:	89ba      	ldrh	r2, [r7, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	d202      	bcs.n	8000848 <JS_Aquisite+0x70>
		JS->minValue[0] = rawX;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	89ba      	ldrh	r2, [r7, #12]
 8000846:	82da      	strh	r2, [r3, #22]

	if(rawY < JS->minValue[1])
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	8b1b      	ldrh	r3, [r3, #24]
 800084c:	897a      	ldrh	r2, [r7, #10]
 800084e:	429a      	cmp	r2, r3
 8000850:	d202      	bcs.n	8000858 <JS_Aquisite+0x80>
		JS->minValue[1] = rawY;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	897a      	ldrh	r2, [r7, #10]
 8000856:	831a      	strh	r2, [r3, #24]


	JS->smoothedValue[0] = (0.9 * JS->smoothedValue[0]) + ( 0.1 * rawX);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	895b      	ldrh	r3, [r3, #10]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fef3 	bl	8000648 <__aeabi_i2d>
 8000862:	a37b      	add	r3, pc, #492	; (adr r3, 8000a50 <JS_Aquisite+0x278>)
 8000864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000868:	f7ff fc72 	bl	8000150 <__aeabi_dmul>
 800086c:	4602      	mov	r2, r0
 800086e:	460b      	mov	r3, r1
 8000870:	4614      	mov	r4, r2
 8000872:	461d      	mov	r5, r3
 8000874:	89bb      	ldrh	r3, [r7, #12]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fee6 	bl	8000648 <__aeabi_i2d>
 800087c:	a376      	add	r3, pc, #472	; (adr r3, 8000a58 <JS_Aquisite+0x280>)
 800087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000882:	f7ff fc65 	bl	8000150 <__aeabi_dmul>
 8000886:	4602      	mov	r2, r0
 8000888:	460b      	mov	r3, r1
 800088a:	4620      	mov	r0, r4
 800088c:	4629      	mov	r1, r5
 800088e:	f7ff fd8f 	bl	80003b0 <__adddf3>
 8000892:	4602      	mov	r2, r0
 8000894:	460b      	mov	r3, r1
 8000896:	4610      	mov	r0, r2
 8000898:	4619      	mov	r1, r3
 800089a:	f7ff ff3f 	bl	800071c <__aeabi_d2uiz>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	815a      	strh	r2, [r3, #10]
	JS->smoothedValue[1] = (0.9 * JS->smoothedValue[1]) + (0.1 * rawY);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	899b      	ldrh	r3, [r3, #12]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fecc 	bl	8000648 <__aeabi_i2d>
 80008b0:	a367      	add	r3, pc, #412	; (adr r3, 8000a50 <JS_Aquisite+0x278>)
 80008b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b6:	f7ff fc4b 	bl	8000150 <__aeabi_dmul>
 80008ba:	4602      	mov	r2, r0
 80008bc:	460b      	mov	r3, r1
 80008be:	4614      	mov	r4, r2
 80008c0:	461d      	mov	r5, r3
 80008c2:	897b      	ldrh	r3, [r7, #10]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff febf 	bl	8000648 <__aeabi_i2d>
 80008ca:	a363      	add	r3, pc, #396	; (adr r3, 8000a58 <JS_Aquisite+0x280>)
 80008cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d0:	f7ff fc3e 	bl	8000150 <__aeabi_dmul>
 80008d4:	4602      	mov	r2, r0
 80008d6:	460b      	mov	r3, r1
 80008d8:	4620      	mov	r0, r4
 80008da:	4629      	mov	r1, r5
 80008dc:	f7ff fd68 	bl	80003b0 <__adddf3>
 80008e0:	4602      	mov	r2, r0
 80008e2:	460b      	mov	r3, r1
 80008e4:	4610      	mov	r0, r2
 80008e6:	4619      	mov	r1, r3
 80008e8:	f7ff ff18 	bl	800071c <__aeabi_d2uiz>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	819a      	strh	r2, [r3, #12]

	if(JS->smoothedValue[0] > JS->zeroValue[0]){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	895a      	ldrh	r2, [r3, #10]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d912      	bls.n	8000926 <JS_Aquisite+0x14e>
		JS->position[0] = map(JS->smoothedValue[0],JS->zeroValue[0], JS->maxValue[0], 0, 2047);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	895b      	ldrh	r3, [r3, #10]
 8000904:	4618      	mov	r0, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	4619      	mov	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	8b5b      	ldrh	r3, [r3, #26]
 8000910:	461a      	mov	r2, r3
 8000912:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2300      	movs	r3, #0
 800091a:	f000 f8cd 	bl	8000ab8 <map>
 800091e:	4603      	mov	r3, r0
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	821a      	strh	r2, [r3, #16]
	}

	if(JS->smoothedValue[1] > JS->zeroValue[1]){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	899a      	ldrh	r2, [r3, #12]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	885b      	ldrh	r3, [r3, #2]
 800092e:	429a      	cmp	r2, r3
 8000930:	d912      	bls.n	8000958 <JS_Aquisite+0x180>
		JS->position[1] = map(JS->smoothedValue[1],JS->zeroValue[1], JS->maxValue[1], 0, 2047);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	899b      	ldrh	r3, [r3, #12]
 8000936:	4618      	mov	r0, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	885b      	ldrh	r3, [r3, #2]
 800093c:	4619      	mov	r1, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	8b9b      	ldrh	r3, [r3, #28]
 8000942:	461a      	mov	r2, r3
 8000944:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	f000 f8b4 	bl	8000ab8 <map>
 8000950:	4603      	mov	r3, r0
 8000952:	b21a      	sxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	825a      	strh	r2, [r3, #18]
	}

	if(JS->smoothedValue[0] < JS->zeroValue[0]){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	895a      	ldrh	r2, [r3, #10]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	d211      	bcs.n	8000988 <JS_Aquisite+0x1b0>
		JS->position[0] = map(JS->smoothedValue[0],JS->minValue[0], JS->zeroValue[0], -2048, 0);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	895b      	ldrh	r3, [r3, #10]
 8000968:	4618      	mov	r0, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	8adb      	ldrh	r3, [r3, #22]
 800096e:	4619      	mov	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	2300      	movs	r3, #0
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <JS_Aquisite+0x288>)
 800097c:	f000 f89c 	bl	8000ab8 <map>
 8000980:	4603      	mov	r3, r0
 8000982:	b21a      	sxth	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	821a      	strh	r2, [r3, #16]
	}
	if(JS->smoothedValue[1] < JS->zeroValue[0]){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	899a      	ldrh	r2, [r3, #12]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	d211      	bcs.n	80009b8 <JS_Aquisite+0x1e0>
		JS->position[1] = map(JS->smoothedValue[1],JS->minValue[1], JS->zeroValue[1], -2048, 0);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	899b      	ldrh	r3, [r3, #12]
 8000998:	4618      	mov	r0, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	8b1b      	ldrh	r3, [r3, #24]
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	885b      	ldrh	r3, [r3, #2]
 80009a4:	461a      	mov	r2, r3
 80009a6:	2300      	movs	r3, #0
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <JS_Aquisite+0x288>)
 80009ac:	f000 f884 	bl	8000ab8 <map>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	825a      	strh	r2, [r3, #18]
//	JS->position[0] = map(JS->smoothedValue[0], 0, 4030, -2100, 2300);
	//JS->position[1] = map(JS->smoothedValue[1], 0, 4030, -2100 , 2300);



	if(abs(JS->position[0]) < JS->deadZone)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	8a9b      	ldrh	r3, [r3, #20]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d202      	bcs.n	80009d4 <JS_Aquisite+0x1fc>
		JS->position[0] = 0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	821a      	strh	r2, [r3, #16]

	if(abs(JS->position[1]) < JS->deadZone)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	bfb8      	it	lt
 80009de:	425b      	neglt	r3, r3
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	8a9b      	ldrh	r3, [r3, #20]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d202      	bcs.n	80009f0 <JS_Aquisite+0x218>
			JS->position[1] = 0;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	825a      	strh	r2, [r3, #18]


	if(JS->position[0] > 2020)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80009f6:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80009fa:	4293      	cmp	r3, r2
 80009fc:	dd03      	ble.n	8000a06 <JS_Aquisite+0x22e>
		JS->position[0] = 2047;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a04:	821a      	strh	r2, [r3, #16]

	if(JS->position[1] > 2020)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a0c:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8000a10:	4293      	cmp	r3, r2
 8000a12:	dd03      	ble.n	8000a1c <JS_Aquisite+0x244>
		JS->position[1] = 2047;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a1a:	825a      	strh	r2, [r3, #18]

	if(JS->position[0] < -2020)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <JS_Aquisite+0x28c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	da03      	bge.n	8000a30 <JS_Aquisite+0x258>
		JS->position[0] = -2048;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000a2e:	821a      	strh	r2, [r3, #16]

	if(JS->position[1] < -2020)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <JS_Aquisite+0x28c>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	da03      	bge.n	8000a44 <JS_Aquisite+0x26c>
		JS->position[1] = -2048;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000a42:	825a      	strh	r2, [r3, #18]


}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	f3af 8000 	nop.w
 8000a50:	cccccccd 	.word	0xcccccccd
 8000a54:	3feccccc 	.word	0x3feccccc
 8000a58:	9999999a 	.word	0x9999999a
 8000a5c:	3fb99999 	.word	0x3fb99999
 8000a60:	fffff800 	.word	0xfffff800
 8000a64:	fffff81c 	.word	0xfffff81c

08000a68 <JS_Calibrate>:

void JS_Calibrate(struct Joystick *JS, uint8_t axisFlag,  uint16_t minValue, uint16_t maxValue, uint16_t middleValue){
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4603      	mov	r3, r0
 8000a78:	72fb      	strb	r3, [r7, #11]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	813b      	strh	r3, [r7, #8]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	80fb      	strh	r3, [r7, #6]
if(!axisFlag){ //for X axis
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d109      	bne.n	8000a9c <JS_Calibrate+0x34>
	JS->minValue[0] = minValue;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	893a      	ldrh	r2, [r7, #8]
 8000a8c:	82da      	strh	r2, [r3, #22]
	JS->maxValue[0] = maxValue;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	835a      	strh	r2, [r3, #26]
	JS->zeroValue[0] = middleValue;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	8b3a      	ldrh	r2, [r7, #24]
 8000a98:	801a      	strh	r2, [r3, #0]
	JS->minValue[1] = minValue;
	JS->maxValue[1] = maxValue;
	JS->zeroValue[1] = middleValue;

 }
}
 8000a9a:	e008      	b.n	8000aae <JS_Calibrate+0x46>
	JS->minValue[1] = minValue;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	893a      	ldrh	r2, [r7, #8]
 8000aa0:	831a      	strh	r2, [r3, #24]
	JS->maxValue[1] = maxValue;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	88fa      	ldrh	r2, [r7, #6]
 8000aa6:	839a      	strh	r2, [r3, #28]
	JS->zeroValue[1] = middleValue;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	8b3a      	ldrh	r2, [r7, #24]
 8000aac:	805a      	strh	r2, [r3, #2]
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <map>:


int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max){
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	69b9      	ldr	r1, [r7, #24]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	1a8a      	subs	r2, r1, r2
 8000ad2:	fb03 f202 	mul.w	r2, r3, r2
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1acb      	subs	r3, r1, r3
 8000adc:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	4413      	add	r3, r2
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
	...

08000af0 <NRF_CS_Select>:


SPI_HandleTypeDef* nrf_spi;


void NRF_CS_Select(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	4802      	ldr	r0, [pc, #8]	; (8000b04 <NRF_CS_Select+0x14>)
 8000afc:	f002 f8c8 	bl	8002c90 <HAL_GPIO_WritePin>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40010800 	.word	0x40010800

08000b08 <NRF_CS_Unselect>:

void NRF_CS_Unselect(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b12:	4802      	ldr	r0, [pc, #8]	; (8000b1c <NRF_CS_Unselect+0x14>)
 8000b14:	f002 f8bc 	bl	8002c90 <HAL_GPIO_WritePin>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010800 	.word	0x40010800

08000b20 <NRF_CE_Enable>:

void NRF_CE_Enable(){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <NRF_CE_Enable+0x14>)
 8000b2a:	f002 f8b1 	bl	8002c90 <HAL_GPIO_WritePin>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <NRF_CE_Disable>:

void NRF_CE_Disable(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <NRF_CE_Disable+0x14>)
 8000b42:	f002 f8a5 	bl	8002c90 <HAL_GPIO_WritePin>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40010c00 	.word	0x40010c00

08000b50 <NRF_WriteRegister>:

/* write a single byte to the specified register */
void NRF_WriteRegister(uint8_t reg, uint8_t data){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	460a      	mov	r2, r1
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2];
	/* according to datasheet - we must write 1 to a 5th bit writing data to a register*/
	buffer[0] = reg | (1<<5);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f043 0320 	orr.w	r3, r3, #32
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	737b      	strb	r3, [r7, #13]
	//select device
	NRF_CS_Select();
 8000b6e:	f7ff ffbf 	bl	8000af0 <NRF_CS_Select>

	//send data
	HAL_SPI_Transmit(nrf_spi, buffer, 2, 100);
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <NRF_WriteRegister+0x40>)
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	f107 010c 	add.w	r1, r7, #12
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	f002 fe19 	bl	80037b4 <HAL_SPI_Transmit>

	//unselect NRF device
	NRF_CS_Unselect();
 8000b82:	f7ff ffc1 	bl	8000b08 <NRF_CS_Unselect>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000a8 	.word	0x200000a8

08000b94 <NRF_WriteRegisterMultiple>:

/* write multiple bytes of data starting from a specified register */
void NRF_WriteRegisterMultiple(uint8_t reg, uint8_t *data, uint16_t size){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[2];
	/* according to datasheet - we must write 1 to a 5th bit writing data to a register*/
	buffer[0] = reg | (1<<5);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f043 0320 	orr.w	r3, r3, #32
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	733b      	strb	r3, [r7, #12]
	//buffer[1] = data;
	//select device
	NRF_CS_Select();
 8000bae:	f7ff ff9f 	bl	8000af0 <NRF_CS_Select>

	//send register address
	HAL_SPI_Transmit(nrf_spi, &buffer, 1, 100);
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <NRF_WriteRegisterMultiple+0x48>)
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	f107 010c 	add.w	r1, r7, #12
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f002 fdf9 	bl	80037b4 <HAL_SPI_Transmit>
	//send the data all at once
	HAL_SPI_Transmit(nrf_spi, &data, size, 100);
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <NRF_WriteRegisterMultiple+0x48>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	88ba      	ldrh	r2, [r7, #4]
 8000bc8:	4639      	mov	r1, r7
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	f002 fdf2 	bl	80037b4 <HAL_SPI_Transmit>

	//unselect NRF device
	NRF_CS_Unselect();
 8000bd0:	f7ff ff9a 	bl	8000b08 <NRF_CS_Unselect>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200000a8 	.word	0x200000a8

08000be0 <NRF_ReadRegister>:

/* read a byte from a specified register */
uint8_t NRF_ReadRegister(uint8_t reg){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	//select device
	NRF_CS_Select();
 8000bea:	f7ff ff81 	bl	8000af0 <NRF_CS_Select>

	//send register address to read from
	HAL_SPI_Transmit(nrf_spi, &reg, 1, 100);
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <NRF_ReadRegister+0x3c>)
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	1df9      	adds	r1, r7, #7
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f002 fddc 	bl	80037b4 <HAL_SPI_Transmit>

	//receive data
	HAL_SPI_Receive(nrf_spi, &data, 1, 100);
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <NRF_ReadRegister+0x3c>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	f107 010f 	add.w	r1, r7, #15
 8000c04:	2364      	movs	r3, #100	; 0x64
 8000c06:	2201      	movs	r2, #1
 8000c08:	f002 ff10 	bl	8003a2c <HAL_SPI_Receive>

	//unselect NRF device
	NRF_CS_Unselect();
 8000c0c:	f7ff ff7c 	bl	8000b08 <NRF_CS_Unselect>
	return data;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000a8 	.word	0x200000a8

08000c20 <NRF_SendCommand>:
	NRF_CS_Unselect();
}


/* send special command to the NRF module */
void NRF_SendCommand(uint8_t cmd){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	//select device
	NRF_CS_Select();
 8000c2a:	f7ff ff61 	bl	8000af0 <NRF_CS_Select>

	//send data
	HAL_SPI_Transmit(nrf_spi, &cmd, 1, 100);
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <NRF_SendCommand+0x28>)
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	1df9      	adds	r1, r7, #7
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	2201      	movs	r2, #1
 8000c38:	f002 fdbc 	bl	80037b4 <HAL_SPI_Transmit>

	//unselect NRF device
	NRF_CS_Unselect();
 8000c3c:	f7ff ff64 	bl	8000b08 <NRF_CS_Unselect>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000a8 	.word	0x200000a8

08000c4c <NRF_Init>:

void NRF_Init(SPI_HandleTypeDef* spi){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	//substitute used SPI handler
	nrf_spi = spi;
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <NRF_Init+0x58>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]

	//disable device for configuration
	NRF_CE_Disable();
 8000c5a:	f7ff ff6d 	bl	8000b38 <NRF_CE_Disable>

	/* configure interrupt masking, power mode and working mode to transmit */
	NRF_WriteRegister(CONFIG, 0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff ff75 	bl	8000b50 <NRF_WriteRegister>

	/* disable autoacknowledgement */
	NRF_WriteRegister(EN_AA, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff ff71 	bl	8000b50 <NRF_WriteRegister>

	/* enable pipe x - tbi */
	NRF_WriteRegister(EN_RXADDR, 0);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2002      	movs	r0, #2
 8000c72:	f7ff ff6d 	bl	8000b50 <NRF_WriteRegister>

	/* configure 5 byte TX/RX address*/
	NRF_WriteRegister(SETUP_AW, 0x03);
 8000c76:	2103      	movs	r1, #3
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f7ff ff69 	bl	8000b50 <NRF_WriteRegister>

	/* configure retransmission - disable */
	NRF_WriteRegister(SETUP_RETR, 0);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2004      	movs	r0, #4
 8000c82:	f7ff ff65 	bl	8000b50 <NRF_WriteRegister>

	/* select transmission channel */
	NRF_WriteRegister(RF_CH, 0);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2005      	movs	r0, #5
 8000c8a:	f7ff ff61 	bl	8000b50 <NRF_WriteRegister>

	/* RF settings */
	NRF_WriteRegister(RF_SETUP, 0x0E);
 8000c8e:	210e      	movs	r1, #14
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff ff5d 	bl	8000b50 <NRF_WriteRegister>

	/* enable back the device */
	NRF_CE_Enable();
 8000c96:	f7ff ff43 	bl	8000b20 <NRF_CE_Enable>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000a8 	.word	0x200000a8

08000ca8 <NRF_SetTxMode>:

/* set up transmit mode */
void NRF_SetTxMode(uint8_t *RXPipeAddr, uint8_t channel){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]

	/* disable device for configuration */
	NRF_CE_Disable();
 8000cb4:	f7ff ff40 	bl	8000b38 <NRF_CE_Disable>

	/* Select the channel */
	NRF_WriteRegister(RF_CH, channel);
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f7ff ff47 	bl	8000b50 <NRF_WriteRegister>

	/* set up the TX address */
	NRF_WriteRegisterMultiple(TX_ADDR, RXPipeAddr, 5);
 8000cc2:	2205      	movs	r2, #5
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	2010      	movs	r0, #16
 8000cc8:	f7ff ff64 	bl	8000b94 <NRF_WriteRegisterMultiple>


	/* power up the device */
	uint8_t config = NRF_ReadRegister(CONFIG);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff ff87 	bl	8000be0 <NRF_ReadRegister>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(CONFIG, config);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ff34 	bl	8000b50 <NRF_WriteRegister>

	/* enable the device back */
	NRF_CE_Enable();
 8000ce8:	f7ff ff1a 	bl	8000b20 <NRF_CE_Enable>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <NRF_Transmit>:

/* transmit data over SPI to the NRF module */

uint8_t NRF_Transmit(uint8_t* data){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint8_t command;
	command = W_TX_PAYLOAD;
 8000cfc:	23a0      	movs	r3, #160	; 0xa0
 8000cfe:	73fb      	strb	r3, [r7, #15]


	/* transmit payload command */
	NRF_SendCommand(command);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff8c 	bl	8000c20 <NRF_SendCommand>

	/* transmit 32 bit long data stream */
	HAL_SPI_Transmit(nrf_spi, data, 32, 100);
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <NRF_Transmit+0x60>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	2220      	movs	r2, #32
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	f002 fd4f 	bl	80037b4 <HAL_SPI_Transmit>

	/* wait for the pin to settle */
	HAL_Delay(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f000 fedc 	bl	8001ad4 <HAL_Delay>

	/* check for data in fifo - transmission successful */
	uint8_t fifoStatus = NRF_ReadRegister(FIFO_STATUS);
 8000d1c:	2017      	movs	r0, #23
 8000d1e:	f7ff ff5f 	bl	8000be0 <NRF_ReadRegister>
 8000d22:	4603      	mov	r3, r0
 8000d24:	73bb      	strb	r3, [r7, #14]
	if((fifoStatus & (1<<4)) && (!(fifoStatus & (1<<3)))){
 8000d26:	7bbb      	ldrb	r3, [r7, #14]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00c      	beq.n	8000d4a <NRF_Transmit+0x56>
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d107      	bne.n	8000d4a <NRF_Transmit+0x56>
		/* if the data was transfered to the fifo flush it for sending */
		command = FLUSH_TX;
 8000d3a:	23e1      	movs	r3, #225	; 0xe1
 8000d3c:	73fb      	strb	r3, [r7, #15]
		NRF_SendCommand(command);
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff6d 	bl	8000c20 <NRF_SendCommand>
		return 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <NRF_Transmit+0x58>
	}
		return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000a8 	.word	0x200000a8

08000d58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d68:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <MX_ADC1_Init+0xd0>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7c:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000d84:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d96:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000d98:	f000 fec0 	bl	8001b1c <HAL_ADC_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000da2:	f000 faaf 	bl	8001304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000da6:	2303      	movs	r3, #3
 8000da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000dae:	2304      	movs	r3, #4
 8000db0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	481b      	ldr	r0, [pc, #108]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000db8:	f001 f882 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 fa9f 	bl	8001304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000dd4:	f001 f874 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000dde:	f000 fa91 	bl	8001304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000de6:	2303      	movs	r3, #3
 8000de8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000df0:	f001 f866 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000dfa:	f000 fa83 	bl	8001304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e02:	2304      	movs	r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_ADC1_Init+0xcc>)
 8000e0c:	f001 f858 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000e16:	f000 fa75 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000ac 	.word	0x200000ac
 8000e28:	40012400 	.word	0x40012400

08000e2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a28      	ldr	r2, [pc, #160]	; (8000ee8 <HAL_ADC_MspInit+0xbc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d149      	bne.n	8000ee0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <HAL_ADC_MspInit+0xc0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a26      	ldr	r2, [pc, #152]	; (8000eec <HAL_ADC_MspInit+0xc0>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_ADC_MspInit+0xc0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_ADC_MspInit+0xc0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a20      	ldr	r2, [pc, #128]	; (8000eec <HAL_ADC_MspInit+0xc0>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_ADC_MspInit+0xc0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = JS_AX_ADC_Pin|JS_AY_ADC_Pin|JS_BX_ADC_Pin|JS_BY_ADC_Pin;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <HAL_ADC_MspInit+0xc4>)
 8000e8c:	f001 fd84 	bl	8002998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e92:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000e94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000eba:	2220      	movs	r2, #32
 8000ebc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ec4:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000ec6:	f001 fb03 	bl	80024d0 <HAL_DMA_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ed0:	f000 fa18 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000ed8:	621a      	str	r2, [r3, #32]
 8000eda:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40012400 	.word	0x40012400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	200000dc 	.word	0x200000dc
 8000ef8:	40020008 	.word	0x40020008

08000efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_DMA_Init+0x38>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <MX_DMA_Init+0x38>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_DMA_Init+0x38>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	200b      	movs	r0, #11
 8000f20:	f001 fa9f 	bl	8002462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f24:	200b      	movs	r0, #11
 8000f26:	f001 fab8 	bl	800249a <HAL_NVIC_EnableIRQ>

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <MX_GPIO_Init+0x134>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a46      	ldr	r2, [pc, #280]	; (800106c <MX_GPIO_Init+0x134>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b44      	ldr	r3, [pc, #272]	; (800106c <MX_GPIO_Init+0x134>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b41      	ldr	r3, [pc, #260]	; (800106c <MX_GPIO_Init+0x134>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a40      	ldr	r2, [pc, #256]	; (800106c <MX_GPIO_Init+0x134>)
 8000f6a:	f043 0320 	orr.w	r3, r3, #32
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <MX_GPIO_Init+0x134>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0320 	and.w	r3, r3, #32
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b3b      	ldr	r3, [pc, #236]	; (800106c <MX_GPIO_Init+0x134>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a3a      	ldr	r2, [pc, #232]	; (800106c <MX_GPIO_Init+0x134>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b38      	ldr	r3, [pc, #224]	; (800106c <MX_GPIO_Init+0x134>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b35      	ldr	r3, [pc, #212]	; (800106c <MX_GPIO_Init+0x134>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a34      	ldr	r2, [pc, #208]	; (800106c <MX_GPIO_Init+0x134>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b32      	ldr	r3, [pc, #200]	; (800106c <MX_GPIO_Init+0x134>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2181      	movs	r1, #129	; 0x81
 8000fb0:	482f      	ldr	r0, [pc, #188]	; (8001070 <MX_GPIO_Init+0x138>)
 8000fb2:	f001 fe6d 	bl	8002c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbc:	482d      	ldr	r0, [pc, #180]	; (8001074 <MX_GPIO_Init+0x13c>)
 8000fbe:	f001 fe67 	bl	8002c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JS_B_SW_Pin|JS_A_SW_Pin;
 8000fc2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4828      	ldr	r0, [pc, #160]	; (8001078 <MX_GPIO_Init+0x140>)
 8000fd8:	f001 fcde 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481f      	ldr	r0, [pc, #124]	; (8001070 <MX_GPIO_Init+0x138>)
 8000ff4:	f001 fcd0 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BT3_Pin|BT2_Pin|BT1_Pin;
 8000ff8:	f640 4302 	movw	r3, #3074	; 0xc02
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4619      	mov	r1, r3
 800100c:	4818      	ldr	r0, [pc, #96]	; (8001070 <MX_GPIO_Init+0x138>)
 800100e:	f001 fcc3 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <MX_GPIO_Init+0x13c>)
 800102c:	f001 fcb4 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_GPIO_Init+0x144>)
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <MX_GPIO_Init+0x138>)
 8001044:	f001 fca8 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_GPIO_Init+0x138>)
 8001060:	f001 fc9a 	bl	8002998 <HAL_GPIO_Init>

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40010800 	.word	0x40010800
 8001078:	40011000 	.word	0x40011000
 800107c:	10110000 	.word	0x10110000

08001080 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* ptr, int len){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 50);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	b29a      	uxth	r2, r3
 8001090:	2332      	movs	r3, #50	; 0x32
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <_write+0x24>)
 8001096:	f003 fe81 	bl	8004d9c <HAL_UART_Transmit>
	return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000027c 	.word	0x2000027c

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fcaf 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f8a9 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f7ff ff3f 	bl	8000f38 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ba:	f7ff ff1f 	bl	8000efc <MX_DMA_Init>
  MX_ADC1_Init();
 80010be:	f7ff fe4b 	bl	8000d58 <MX_ADC1_Init>
  MX_SPI1_Init();
 80010c2:	f000 f925 	bl	8001310 <MX_SPI1_Init>
  MX_TIM1_Init();
 80010c6:	f000 fad7 	bl	8001678 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010ca:	f000 fc05 	bl	80018d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010ce:	f000 fb55 	bl	800177c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ticks1 = 0;
 80010d2:	493e      	ldr	r1, [pc, #248]	; (80011cc <main+0x124>)
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c1 2300 	strd	r2, r3, [r1]
  ticks2 = 0;
 80010e0:	493b      	ldr	r1, [pc, #236]	; (80011d0 <main+0x128>)
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	e9c1 2300 	strd	r2, r3, [r1]
  flag_uart = 0;
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <main+0x12c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
  flag_js = 0;
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <main+0x130>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]


  NRF_Init(&hspi1);
 80010fa:	4838      	ldr	r0, [pc, #224]	; (80011dc <main+0x134>)
 80010fc:	f7ff fda6 	bl	8000c4c <NRF_Init>
  NRF_SetTxMode(TxPipeAddress, 10);
 8001100:	210a      	movs	r1, #10
 8001102:	4837      	ldr	r0, [pc, #220]	; (80011e0 <main+0x138>)
 8001104:	f7ff fdd0 	bl	8000ca8 <NRF_SetTxMode>



  JS_Init(&Joystick_L, 2, 100, 100);
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	2264      	movs	r2, #100	; 0x64
 800110c:	2102      	movs	r1, #2
 800110e:	4835      	ldr	r0, [pc, #212]	; (80011e4 <main+0x13c>)
 8001110:	f7ff fb3a 	bl	8000788 <JS_Init>
  JS_Init(&Joystick_R, 0, 100, 10);
 8001114:	230a      	movs	r3, #10
 8001116:	2264      	movs	r2, #100	; 0x64
 8001118:	2100      	movs	r1, #0
 800111a:	4833      	ldr	r0, [pc, #204]	; (80011e8 <main+0x140>)
 800111c:	f7ff fb34 	bl	8000788 <JS_Init>
  analogInit(&hadc1, DMA);
 8001120:	4932      	ldr	r1, [pc, #200]	; (80011ec <main+0x144>)
 8001122:	4833      	ldr	r0, [pc, #204]	; (80011f0 <main+0x148>)
 8001124:	f7ff fb1a 	bl	800075c <analogInit>
  HAL_TIM_Base_Start_IT(&htim1);
 8001128:	4832      	ldr	r0, [pc, #200]	; (80011f4 <main+0x14c>)
 800112a:	f003 f92f 	bl	800438c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800112e:	4832      	ldr	r0, [pc, #200]	; (80011f8 <main+0x150>)
 8001130:	f003 f92c 	bl	800438c <HAL_TIM_Base_Start_IT>
  JS_Calibrate(&Joystick_L, 0, 0, 4035, 1975);
 8001134:	f240 73b7 	movw	r3, #1975	; 0x7b7
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	f640 73c3 	movw	r3, #4035	; 0xfc3
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	4828      	ldr	r0, [pc, #160]	; (80011e4 <main+0x13c>)
 8001144:	f7ff fc90 	bl	8000a68 <JS_Calibrate>
  JS_Calibrate(&Joystick_L, 1, 0, 4037, 2035);
 8001148:	f240 73f3 	movw	r3, #2035	; 0x7f3
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	f640 73c5 	movw	r3, #4037	; 0xfc5
 8001152:	2200      	movs	r2, #0
 8001154:	2101      	movs	r1, #1
 8001156:	4823      	ldr	r0, [pc, #140]	; (80011e4 <main+0x13c>)
 8001158:	f7ff fc86 	bl	8000a68 <JS_Calibrate>
  JS_Calibrate(&Joystick_R, 0, 0, 4030, 1966);
 800115c:	f240 73ae 	movw	r3, #1966	; 0x7ae
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f640 73be 	movw	r3, #4030	; 0xfbe
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	481f      	ldr	r0, [pc, #124]	; (80011e8 <main+0x140>)
 800116c:	f7ff fc7c 	bl	8000a68 <JS_Calibrate>
  JS_Calibrate(&Joystick_R, 1, 0, 4039, 1945);
 8001170:	f240 7399 	movw	r3, #1945	; 0x799
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	f640 73c7 	movw	r3, #4039	; 0xfc7
 800117a:	2200      	movs	r2, #0
 800117c:	2101      	movs	r1, #1
 800117e:	481a      	ldr	r0, [pc, #104]	; (80011e8 <main+0x140>)
 8001180:	f7ff fc72 	bl	8000a68 <JS_Calibrate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  if(flag_js){
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <main+0x130>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00a      	beq.n	80011a2 <main+0xfa>
		  JS_Aquisite(&Joystick_R, DMA);
 800118c:	4917      	ldr	r1, [pc, #92]	; (80011ec <main+0x144>)
 800118e:	4816      	ldr	r0, [pc, #88]	; (80011e8 <main+0x140>)
 8001190:	f7ff fb22 	bl	80007d8 <JS_Aquisite>
		  JS_Aquisite(&Joystick_L, DMA);
 8001194:	4915      	ldr	r1, [pc, #84]	; (80011ec <main+0x144>)
 8001196:	4813      	ldr	r0, [pc, #76]	; (80011e4 <main+0x13c>)
 8001198:	f7ff fb1e 	bl	80007d8 <JS_Aquisite>
		  flag_js = 0;
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <main+0x130>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_uart){
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <main+0x12c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0ec      	beq.n	8001184 <main+0xdc>
		  sendint16(frameBuffer);

		  HAL_TIM_Base_Start_IT(&htim1);
		  */
		  //printf("%d, %d\r\n", Joystick_L.position[1], Joystick_R.position[1]);
		  if(NRF_Transmit(testMessage))
 80011aa:	4814      	ldr	r0, [pc, #80]	; (80011fc <main+0x154>)
 80011ac:	f7ff fda2 	bl	8000cf4 <NRF_Transmit>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <main+0x116>
		  	  printf("message send successful\r\n");
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <main+0x158>)
 80011b8:	f003 fffa 	bl	80051b0 <puts>
 80011bc:	e002      	b.n	80011c4 <main+0x11c>
		  else
			  printf("message send fail\r\n");
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <main+0x15c>)
 80011c0:	f003 fff6 	bl	80051b0 <puts>
		  flag_uart = 0;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <main+0x12c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
	  if(flag_js){
 80011ca:	e7db      	b.n	8001184 <main+0xdc>
 80011cc:	20000120 	.word	0x20000120
 80011d0:	20000128 	.word	0x20000128
 80011d4:	20000130 	.word	0x20000130
 80011d8:	20000131 	.word	0x20000131
 80011dc:	20000190 	.word	0x20000190
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000168 	.word	0x20000168
 80011e8:	20000140 	.word	0x20000140
 80011ec:	20000134 	.word	0x20000134
 80011f0:	200000ac 	.word	0x200000ac
 80011f4:	200001ec 	.word	0x200001ec
 80011f8:	20000234 	.word	0x20000234
 80011fc:	20000008 	.word	0x20000008
 8001200:	08005ad8 	.word	0x08005ad8
 8001204:	08005af4 	.word	0x08005af4

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	2228      	movs	r2, #40	; 0x28
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f003 ff54 	bl	80050c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	2301      	movs	r3, #1
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001246:	2301      	movs	r3, #1
 8001248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124a:	2302      	movs	r3, #2
 800124c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fd2e 	bl	8002cc0 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800126a:	f000 f84b 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2102      	movs	r1, #2
 800128a:	4618      	mov	r0, r3
 800128c:	f001 ff9a 	bl	80031c4 <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001296:	f000 f835 	bl	8001304 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800129a:	2302      	movs	r3, #2
 800129c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800129e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 f94a 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012b2:	f000 f827 	bl	8001304 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80012b6:	f002 f86f 	bl	8003398 <HAL_RCC_EnableCSS>
}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	; 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef  *htim){
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d102      	bne.n	80012da <HAL_TIM_PeriodElapsedCallback+0x16>
		//HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
		flag_uart = 1;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
	}

	if(htim == &htim2){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d102      	bne.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x24>
		//HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
		flag_js = 1;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
	}
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200001ec 	.word	0x200001ec
 80012f8:	20000130 	.word	0x20000130
 80012fc:	20000234 	.word	0x20000234
 8001300:	20000131 	.word	0x20000131

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_SPI1_Init+0x64>)
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <MX_SPI1_Init+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_SPI1_Init+0x64>)
 800131c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_SPI1_Init+0x64>)
 8001330:	2202      	movs	r2, #2
 8001332:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_SPI1_Init+0x64>)
 800133c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001340:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_SPI1_Init+0x64>)
 8001344:	2218      	movs	r2, #24
 8001346:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_SPI1_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SPI1_Init+0x64>)
 800135c:	220a      	movs	r2, #10
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_SPI1_Init+0x64>)
 8001362:	f002 f9a3 	bl	80036ac <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800136c:	f7ff ffca 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000190 	.word	0x20000190
 8001378:	40013000 	.word	0x40013000

0800137c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a26      	ldr	r2, [pc, #152]	; (8001430 <HAL_SPI_MspInit+0xb4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d145      	bne.n	8001428 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_SPI_MspInit+0xb8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a24      	ldr	r2, [pc, #144]	; (8001434 <HAL_SPI_MspInit+0xb8>)
 80013a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_SPI_MspInit+0xb8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_SPI_MspInit+0xb8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <HAL_SPI_MspInit+0xb8>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_SPI_MspInit+0xb8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80013cc:	2328      	movs	r3, #40	; 0x28
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4816      	ldr	r0, [pc, #88]	; (8001438 <HAL_SPI_MspInit+0xbc>)
 80013e0:	f001 fada 	bl	8002998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e4:	2310      	movs	r3, #16
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4810      	ldr	r0, [pc, #64]	; (8001438 <HAL_SPI_MspInit+0xbc>)
 80013f8:	f001 face 	bl	8002998 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_SPI_MspInit+0xc0>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_SPI_MspInit+0xc0>)
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2023      	movs	r0, #35	; 0x23
 800141e:	f001 f820 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001422:	2023      	movs	r0, #35	; 0x23
 8001424:	f001 f839 	bl	800249a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40013000 	.word	0x40013000
 8001434:	40021000 	.word	0x40021000
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40010000 	.word	0x40010000

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_MspInit+0x40>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_MspInit+0x40>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_MspInit+0x40>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_MspInit+0x40>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_MspInit+0x40>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_MspInit+0x40>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001488:	f002 f822 	bl	80034d0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x8>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ce:	f000 fae5 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <DMA1_Channel1_IRQHandler+0x10>)
 80014de:	f001 f927 	bl	8002730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000dc 	.word	0x200000dc

080014ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM1_BRK_IRQHandler+0x10>)
 80014f2:	f002 ffe6 	bl	80044c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001ec 	.word	0x200001ec

08001500 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM1_UP_IRQHandler+0x10>)
 8001506:	f002 ffdc 	bl	80044c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001ec 	.word	0x200001ec

08001514 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM1_TRG_COM_IRQHandler+0x10>)
 800151a:	f002 ffd2 	bl	80044c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001ec 	.word	0x200001ec

08001528 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM1_CC_IRQHandler+0x10>)
 800152e:	f002 ffc8 	bl	80044c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001ec 	.word	0x200001ec

0800153c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM2_IRQHandler+0x10>)
 8001542:	f002 ffbe 	bl	80044c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000234 	.word	0x20000234

08001550 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <SPI1_IRQHandler+0x10>)
 8001556:	f002 fd1d 	bl	8003f94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000190 	.word	0x20000190

08001564 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
  }

  return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:
  }
  return len;
}

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c4:	605a      	str	r2, [r3, #4]
  return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f003 fd1e 	bl	8005070 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20002800 	.word	0x20002800
 8001660:	00000400 	.word	0x00000400
 8001664:	200001e8 	.word	0x200001e8
 8001668:	200002d8 	.word	0x200002d8

0800166c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b092      	sub	sp, #72	; 0x48
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]
 800169a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2220      	movs	r2, #32
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fd0e 	bl	80050c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016aa:	4a33      	ldr	r2, [pc, #204]	; (8001778 <MX_TIM1_Init+0x100>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016b0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016be:	f242 720f 	movw	r2, #9999	; 0x270f
 80016c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80016d6:	4827      	ldr	r0, [pc, #156]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016d8:	f002 fea4 	bl	8004424 <HAL_TIM_OC_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f7ff fe0f 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f2:	4619      	mov	r1, r3
 80016f4:	481f      	ldr	r0, [pc, #124]	; (8001774 <MX_TIM1_Init+0xfc>)
 80016f6:	f003 fa49 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001700:	f7ff fe00 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	2200      	movs	r2, #0
 8001726:	4619      	mov	r1, r3
 8001728:	4812      	ldr	r0, [pc, #72]	; (8001774 <MX_TIM1_Init+0xfc>)
 800172a:	f002 ffd3 	bl	80046d4 <HAL_TIM_OC_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001734:	f7ff fde6 	bl	8001304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_TIM1_Init+0xfc>)
 800175c:	f003 fa6e 	bl	8004c3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001766:	f7ff fdcd 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3748      	adds	r7, #72	; 0x48
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200001ec 	.word	0x200001ec
 8001778:	40012c00 	.word	0x40012c00

0800177c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <MX_TIM2_Init+0xa8>)
 80017a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MX_TIM2_Init+0xa8>)
 80017a8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80017ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM2_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_TIM2_Init+0xa8>)
 80017b6:	2263      	movs	r2, #99	; 0x63
 80017b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM2_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM2_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80017c6:	4817      	ldr	r0, [pc, #92]	; (8001824 <MX_TIM2_Init+0xa8>)
 80017c8:	f002 fe2c 	bl	8004424 <HAL_TIM_OC_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017d2:	f7ff fd97 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	4619      	mov	r1, r3
 80017e4:	480f      	ldr	r0, [pc, #60]	; (8001824 <MX_TIM2_Init+0xa8>)
 80017e6:	f003 f9d1 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017f0:	f7ff fd88 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_TIM2_Init+0xa8>)
 800180c:	f002 ff62 	bl	80046d4 <HAL_TIM_OC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001816:	f7ff fd75 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000234 	.word	0x20000234

08001828 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <HAL_TIM_OC_MspInit+0xa8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12c      	bne.n	8001894 <HAL_TIM_OC_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_TIM_OC_MspInit+0xac>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <HAL_TIM_OC_MspInit+0xac>)
 8001840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_TIM_OC_MspInit+0xac>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2018      	movs	r0, #24
 8001858:	f000 fe03 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800185c:	2018      	movs	r0, #24
 800185e:	f000 fe1c 	bl	800249a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2019      	movs	r0, #25
 8001868:	f000 fdfb 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800186c:	2019      	movs	r0, #25
 800186e:	f000 fe14 	bl	800249a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	201a      	movs	r0, #26
 8001878:	f000 fdf3 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800187c:	201a      	movs	r0, #26
 800187e:	f000 fe0c 	bl	800249a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	201b      	movs	r0, #27
 8001888:	f000 fdeb 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800188c:	201b      	movs	r0, #27
 800188e:	f000 fe04 	bl	800249a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001892:	e018      	b.n	80018c6 <HAL_TIM_OC_MspInit+0x9e>
  else if(tim_ocHandle->Instance==TIM2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d113      	bne.n	80018c6 <HAL_TIM_OC_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_TIM_OC_MspInit+0xac>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_TIM_OC_MspInit+0xac>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_TIM_OC_MspInit+0xac>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	201c      	movs	r0, #28
 80018bc:	f000 fdd1 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c0:	201c      	movs	r0, #28
 80018c2:	f000 fdea 	bl	800249a <HAL_NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40012c00 	.word	0x40012c00
 80018d4:	40021000 	.word	0x40021000

080018d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_USART1_UART_Init+0x50>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001910:	f003 f9f7 	bl	8004d02 <HAL_UART_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800191a:	f7ff fcf3 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000027c 	.word	0x2000027c
 8001928:	40013800 	.word	0x40013800

0800192c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <HAL_UART_MspInit+0x8c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d131      	bne.n	80019b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_UART_MspInit+0x90>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <HAL_UART_MspInit+0x90>)
 8001952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_UART_MspInit+0x90>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_UART_MspInit+0x90>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <HAL_UART_MspInit+0x90>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_UART_MspInit+0x90>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800197c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	4619      	mov	r1, r3
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <HAL_UART_MspInit+0x94>)
 8001992:	f001 f801 	bl	8002998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	4619      	mov	r1, r3
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <HAL_UART_MspInit+0x94>)
 80019ac:	f000 fff4 	bl	8002998 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40013800 	.word	0x40013800
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010800 	.word	0x40010800

080019c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	; (80019fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	; (8001a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ea:	f7ff fe3f 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ee:	f003 fb45 	bl	800507c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019f2:	f7ff fb59 	bl	80010a8 <main>
  bx lr
 80019f6:	4770      	bx	lr
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a00:	08005b9c 	.word	0x08005b9c
  ldr r2, =_sbss
 8001a04:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a08:	200002d4 	.word	0x200002d4

08001a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC1_2_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_Init+0x28>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_Init+0x28>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 fd13 	bl	800244c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f808 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff fd08 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40022000 	.word	0x40022000

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x54>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x58>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fd2b 	bl	80024b6 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 fcf3 	bl	8002462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000018 	.word	0x20000018
 8001a94:	20000020 	.word	0x20000020
 8001a98:	2000001c 	.word	0x2000001c

08001a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x20>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_IncTick+0x20>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000020 	.word	0x20000020
 8001abc:	200002c0 	.word	0x200002c0

08001ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_GetTick+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	200002c0 	.word	0x200002c0

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_Delay+0x44>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffe0 	bl	8001ac0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000020 	.word	0x20000020

08001b1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0be      	b.n	8001cbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff f966 	bl	8000e2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 faff 	bl	8002164 <ADC_ConversionStop_Disable>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 8099 	bne.w	8001caa <HAL_ADC_Init+0x18e>
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8095 	bne.w	8001caa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b88:	f023 0302 	bic.w	r3, r3, #2
 8001b8c:	f043 0202 	orr.w	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7b1b      	ldrb	r3, [r3, #12]
 8001ba2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ba4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_Init+0xa2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d102      	bne.n	8001bc4 <HAL_ADC_Init+0xa8>
 8001bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADC_Init+0xaa>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7d1b      	ldrb	r3, [r3, #20]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d119      	bne.n	8001c08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7b1b      	ldrb	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	035a      	lsls	r2, r3, #13
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e00b      	b.n	8001c08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_ADC_Init+0x1a8>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	d003      	beq.n	8001c42 <HAL_ADC_Init+0x126>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d104      	bne.n	8001c4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	051b      	lsls	r3, r3, #20
 8001c4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_ADC_Init+0x1ac>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c86:	e018      	b.n	8001cba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	f023 0312 	bic.w	r3, r3, #18
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca8:	e007      	b.n	8001cba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	f043 0210 	orr.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001cc8:	ff1f0efe 	.word	0xff1f0efe

08001ccc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a64      	ldr	r2, [pc, #400]	; (8001e74 <HAL_ADC_Start_DMA+0x1a8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_ADC_Start_DMA+0x24>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_ADC_Start_DMA+0x1ac>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_Start_DMA+0x32>
 8001cf0:	4b60      	ldr	r3, [pc, #384]	; (8001e74 <HAL_ADC_Start_DMA+0x1a8>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 80b3 	bne.w	8001e64 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_Start_DMA+0x40>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e0ae      	b.n	8001e6a <HAL_ADC_Start_DMA+0x19e>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f9cb 	bl	80020b0 <ADC_Enable>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f040 809a 	bne.w	8001e5a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4e      	ldr	r2, [pc, #312]	; (8001e78 <HAL_ADC_Start_DMA+0x1ac>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_Start_DMA+0x84>
 8001d44:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <HAL_ADC_Start_DMA+0x1a8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d115      	bne.n	8001d7c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d026      	beq.n	8001db8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d7a:	e01d      	b.n	8001db8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a39      	ldr	r2, [pc, #228]	; (8001e74 <HAL_ADC_Start_DMA+0x1a8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_ADC_Start_DMA+0xd0>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a38      	ldr	r2, [pc, #224]	; (8001e78 <HAL_ADC_Start_DMA+0x1ac>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10d      	bne.n	8001db8 <HAL_ADC_Start_DMA+0xec>
 8001d9c:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <HAL_ADC_Start_DMA+0x1a8>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f023 0206 	bic.w	r2, r3, #6
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dd0:	e002      	b.n	8001dd8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <HAL_ADC_Start_DMA+0x1b0>)
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a24      	ldr	r2, [pc, #144]	; (8001e80 <HAL_ADC_Start_DMA+0x1b4>)
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <HAL_ADC_Start_DMA+0x1b8>)
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0202 	mvn.w	r2, #2
 8001e00:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e10:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a18      	ldr	r0, [r3, #32]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	334c      	adds	r3, #76	; 0x4c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f000 fbaf 	bl	8002584 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e30:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e34:	d108      	bne.n	8001e48 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e44:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e46:	e00f      	b.n	8001e68 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e56:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e58:	e006      	b.n	8001e68 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001e62:	e001      	b.n	8001e68 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40012400 	.word	0x40012400
 8001e78:	40012800 	.word	0x40012800
 8001e7c:	080021e7 	.word	0x080021e7
 8001e80:	08002263 	.word	0x08002263
 8001e84:	0800227f 	.word	0x0800227f

08001e88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x20>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e0dc      	b.n	800209a <HAL_ADC_ConfigChannel+0x1da>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d81c      	bhi.n	8001f2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b05      	subs	r3, #5
 8001f02:	221f      	movs	r2, #31
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4019      	ands	r1, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b05      	subs	r3, #5
 8001f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34
 8001f28:	e03c      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d81c      	bhi.n	8001f6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b23      	subs	r3, #35	; 0x23
 8001f44:	221f      	movs	r2, #31
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4019      	ands	r1, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b23      	subs	r3, #35	; 0x23
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6a:	e01b      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b41      	subs	r3, #65	; 0x41
 8001f7e:	221f      	movs	r2, #31
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4019      	ands	r1, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b41      	subs	r3, #65	; 0x41
 8001f98:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b09      	cmp	r3, #9
 8001faa:	d91c      	bls.n	8001fe6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68d9      	ldr	r1, [r3, #12]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b1e      	subs	r3, #30
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4019      	ands	r1, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6898      	ldr	r0, [r3, #8]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b1e      	subs	r3, #30
 8001fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	e019      	b.n	800201a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6919      	ldr	r1, [r3, #16]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4019      	ands	r1, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6898      	ldr	r0, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d003      	beq.n	800202a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002026:	2b11      	cmp	r3, #17
 8002028:	d132      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d125      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d126      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002050:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b10      	cmp	r3, #16
 8002058:	d11a      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a13      	ldr	r2, [pc, #76]	; (80020ac <HAL_ADC_ConfigChannel+0x1ec>)
 8002060:	fba2 2303 	umull	r2, r3, r2, r3
 8002064:	0c9a      	lsrs	r2, r3, #18
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002070:	e002      	b.n	8002078 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3b01      	subs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x1b2>
 800207e:	e007      	b.n	8002090 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f043 0220 	orr.w	r2, r3, #32
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40012400 	.word	0x40012400
 80020a8:	20000018 	.word	0x20000018
 80020ac:	431bde83 	.word	0x431bde83

080020b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d040      	beq.n	8002150 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <ADC_Enable+0xac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <ADC_Enable+0xb0>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020ec:	e002      	b.n	80020f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fa:	f7ff fce1 	bl	8001ac0 <HAL_GetTick>
 80020fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002100:	e01f      	b.n	8002142 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002102:	f7ff fcdd 	bl	8001ac0 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d918      	bls.n	8002142 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d011      	beq.n	8002142 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	f043 0210 	orr.w	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e007      	b.n	8002152 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d1d8      	bne.n	8002102 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000018 	.word	0x20000018
 8002160:	431bde83 	.word	0x431bde83

08002164 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d12e      	bne.n	80021dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800218e:	f7ff fc97 	bl	8001ac0 <HAL_GetTick>
 8002192:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002194:	e01b      	b.n	80021ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002196:	f7ff fc93 	bl	8001ac0 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d914      	bls.n	80021ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10d      	bne.n	80021ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e007      	b.n	80021de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d0dc      	beq.n	8002196 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d127      	bne.n	8002250 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002216:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800221a:	d115      	bne.n	8002248 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff fe1d 	bl	8001e88 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800224e:	e004      	b.n	800225a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f7ff fe12 	bl	8001e9a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f043 0204 	orr.w	r2, r3, #4
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff fe01 	bl	8001eac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <__NVIC_EnableIRQ+0x34>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002418:	d301      	bcc.n	800241e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241a:	2301      	movs	r3, #1
 800241c:	e00f      	b.n	800243e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <SysTick_Config+0x40>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002426:	210f      	movs	r1, #15
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f7ff ff90 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <SysTick_Config+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SysTick_Config+0x40>)
 8002438:	2207      	movs	r2, #7
 800243a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	e000e010 	.word	0xe000e010

0800244c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff2d 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002474:	f7ff ff42 	bl	80022fc <__NVIC_GetPriorityGrouping>
 8002478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7ff ff90 	bl	80023a4 <NVIC_EncodePriority>
 8002484:	4602      	mov	r2, r0
 8002486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff5f 	bl	8002350 <__NVIC_SetPriority>
}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff35 	bl	8002318 <__NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ffa2 	bl	8002408 <SysTick_Config>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e043      	b.n	800256e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_DMA_Init+0xa8>)
 80024ee:	4413      	add	r3, r2
 80024f0:	4a22      	ldr	r2, [pc, #136]	; (800257c <HAL_DMA_Init+0xac>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	009a      	lsls	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_DMA_Init+0xb0>)
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800251a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800251e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	bffdfff8 	.word	0xbffdfff8
 800257c:	cccccccd 	.word	0xcccccccd
 8002580:	40020000 	.word	0x40020000

08002584 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_DMA_Start_IT+0x20>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e04a      	b.n	800263a <HAL_DMA_Start_IT+0xb6>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d13a      	bne.n	800262c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f9ae 	bl	800293c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 020e 	orr.w	r2, r2, #14
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e00f      	b.n	800261a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0204 	bic.w	r2, r2, #4
 8002608:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 020a 	orr.w	r2, r2, #10
 8002618:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e005      	b.n	8002638 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002656:	2b02      	cmp	r3, #2
 8002658:	d005      	beq.n	8002666 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	e051      	b.n	800270a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 020e 	bic.w	r2, r2, #14
 8002674:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_DMA_Abort_IT+0xd0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d029      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xa0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a20      	ldr	r2, [pc, #128]	; (8002718 <HAL_DMA_Abort_IT+0xd4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d022      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x9c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1f      	ldr	r2, [pc, #124]	; (800271c <HAL_DMA_Abort_IT+0xd8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d01a      	beq.n	80026da <HAL_DMA_Abort_IT+0x96>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <HAL_DMA_Abort_IT+0xdc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d012      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x90>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_DMA_Abort_IT+0xe0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00a      	beq.n	80026ce <HAL_DMA_Abort_IT+0x8a>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1a      	ldr	r2, [pc, #104]	; (8002728 <HAL_DMA_Abort_IT+0xe4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d102      	bne.n	80026c8 <HAL_DMA_Abort_IT+0x84>
 80026c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026c6:	e00e      	b.n	80026e6 <HAL_DMA_Abort_IT+0xa2>
 80026c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026cc:	e00b      	b.n	80026e6 <HAL_DMA_Abort_IT+0xa2>
 80026ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d2:	e008      	b.n	80026e6 <HAL_DMA_Abort_IT+0xa2>
 80026d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d8:	e005      	b.n	80026e6 <HAL_DMA_Abort_IT+0xa2>
 80026da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026de:	e002      	b.n	80026e6 <HAL_DMA_Abort_IT+0xa2>
 80026e0:	2310      	movs	r3, #16
 80026e2:	e000      	b.n	80026e6 <HAL_DMA_Abort_IT+0xa2>
 80026e4:	2301      	movs	r3, #1
 80026e6:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_DMA_Abort_IT+0xe8>)
 80026e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
    } 
  }
  return status;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40020008 	.word	0x40020008
 8002718:	4002001c 	.word	0x4002001c
 800271c:	40020030 	.word	0x40020030
 8002720:	40020044 	.word	0x40020044
 8002724:	40020058 	.word	0x40020058
 8002728:	4002006c 	.word	0x4002006c
 800272c:	40020000 	.word	0x40020000

08002730 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	2204      	movs	r2, #4
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d04f      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xc8>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d04a      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a66      	ldr	r2, [pc, #408]	; (8002920 <HAL_DMA_IRQHandler+0x1f0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d029      	beq.n	80027de <HAL_DMA_IRQHandler+0xae>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_DMA_IRQHandler+0x1f4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d022      	beq.n	80027da <HAL_DMA_IRQHandler+0xaa>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a63      	ldr	r2, [pc, #396]	; (8002928 <HAL_DMA_IRQHandler+0x1f8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01a      	beq.n	80027d4 <HAL_DMA_IRQHandler+0xa4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a62      	ldr	r2, [pc, #392]	; (800292c <HAL_DMA_IRQHandler+0x1fc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d012      	beq.n	80027ce <HAL_DMA_IRQHandler+0x9e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a60      	ldr	r2, [pc, #384]	; (8002930 <HAL_DMA_IRQHandler+0x200>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00a      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x98>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5f      	ldr	r2, [pc, #380]	; (8002934 <HAL_DMA_IRQHandler+0x204>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d102      	bne.n	80027c2 <HAL_DMA_IRQHandler+0x92>
 80027bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027c0:	e00e      	b.n	80027e0 <HAL_DMA_IRQHandler+0xb0>
 80027c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027c6:	e00b      	b.n	80027e0 <HAL_DMA_IRQHandler+0xb0>
 80027c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027cc:	e008      	b.n	80027e0 <HAL_DMA_IRQHandler+0xb0>
 80027ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027d2:	e005      	b.n	80027e0 <HAL_DMA_IRQHandler+0xb0>
 80027d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d8:	e002      	b.n	80027e0 <HAL_DMA_IRQHandler+0xb0>
 80027da:	2340      	movs	r3, #64	; 0x40
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_IRQHandler+0xb0>
 80027de:	2304      	movs	r3, #4
 80027e0:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_DMA_IRQHandler+0x208>)
 80027e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8094 	beq.w	8002916 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80027f6:	e08e      	b.n	8002916 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2202      	movs	r2, #2
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d056      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x186>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d051      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10b      	bne.n	8002838 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 020a 	bic.w	r2, r2, #10
 800282e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a38      	ldr	r2, [pc, #224]	; (8002920 <HAL_DMA_IRQHandler+0x1f0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d029      	beq.n	8002896 <HAL_DMA_IRQHandler+0x166>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a37      	ldr	r2, [pc, #220]	; (8002924 <HAL_DMA_IRQHandler+0x1f4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <HAL_DMA_IRQHandler+0x162>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a35      	ldr	r2, [pc, #212]	; (8002928 <HAL_DMA_IRQHandler+0x1f8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01a      	beq.n	800288c <HAL_DMA_IRQHandler+0x15c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a34      	ldr	r2, [pc, #208]	; (800292c <HAL_DMA_IRQHandler+0x1fc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d012      	beq.n	8002886 <HAL_DMA_IRQHandler+0x156>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a32      	ldr	r2, [pc, #200]	; (8002930 <HAL_DMA_IRQHandler+0x200>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00a      	beq.n	8002880 <HAL_DMA_IRQHandler+0x150>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a31      	ldr	r2, [pc, #196]	; (8002934 <HAL_DMA_IRQHandler+0x204>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d102      	bne.n	800287a <HAL_DMA_IRQHandler+0x14a>
 8002874:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002878:	e00e      	b.n	8002898 <HAL_DMA_IRQHandler+0x168>
 800287a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287e:	e00b      	b.n	8002898 <HAL_DMA_IRQHandler+0x168>
 8002880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002884:	e008      	b.n	8002898 <HAL_DMA_IRQHandler+0x168>
 8002886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800288a:	e005      	b.n	8002898 <HAL_DMA_IRQHandler+0x168>
 800288c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002890:	e002      	b.n	8002898 <HAL_DMA_IRQHandler+0x168>
 8002892:	2320      	movs	r3, #32
 8002894:	e000      	b.n	8002898 <HAL_DMA_IRQHandler+0x168>
 8002896:	2302      	movs	r3, #2
 8002898:	4a27      	ldr	r2, [pc, #156]	; (8002938 <HAL_DMA_IRQHandler+0x208>)
 800289a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d034      	beq.n	8002916 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028b4:	e02f      	b.n	8002916 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2208      	movs	r2, #8
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d028      	beq.n	8002918 <HAL_DMA_IRQHandler+0x1e8>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d023      	beq.n	8002918 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 020e 	bic.w	r2, r2, #14
 80028de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f202 	lsl.w	r2, r1, r2
 80028ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
    }
  }
  return;
 8002916:	bf00      	nop
 8002918:	bf00      	nop
}
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40020008 	.word	0x40020008
 8002924:	4002001c 	.word	0x4002001c
 8002928:	40020030 	.word	0x40020030
 800292c:	40020044 	.word	0x40020044
 8002930:	40020058 	.word	0x40020058
 8002934:	4002006c 	.word	0x4002006c
 8002938:	40020000 	.word	0x40020000

0800293c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d108      	bne.n	800297c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800297a:	e007      	b.n	800298c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
	...

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b08b      	sub	sp, #44	; 0x2c
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029aa:	e161      	b.n	8002c70 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029ac:	2201      	movs	r2, #1
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 8150 	bne.w	8002c6a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a97      	ldr	r2, [pc, #604]	; (8002c2c <HAL_GPIO_Init+0x294>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d05e      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029d4:	4a95      	ldr	r2, [pc, #596]	; (8002c2c <HAL_GPIO_Init+0x294>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d875      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029da:	4a95      	ldr	r2, [pc, #596]	; (8002c30 <HAL_GPIO_Init+0x298>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d058      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029e0:	4a93      	ldr	r2, [pc, #588]	; (8002c30 <HAL_GPIO_Init+0x298>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d86f      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029e6:	4a93      	ldr	r2, [pc, #588]	; (8002c34 <HAL_GPIO_Init+0x29c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d052      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029ec:	4a91      	ldr	r2, [pc, #580]	; (8002c34 <HAL_GPIO_Init+0x29c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d869      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029f2:	4a91      	ldr	r2, [pc, #580]	; (8002c38 <HAL_GPIO_Init+0x2a0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d04c      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029f8:	4a8f      	ldr	r2, [pc, #572]	; (8002c38 <HAL_GPIO_Init+0x2a0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d863      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029fe:	4a8f      	ldr	r2, [pc, #572]	; (8002c3c <HAL_GPIO_Init+0x2a4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d046      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 8002a04:	4a8d      	ldr	r2, [pc, #564]	; (8002c3c <HAL_GPIO_Init+0x2a4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d85d      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	d82a      	bhi.n	8002a64 <HAL_GPIO_Init+0xcc>
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	d859      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 8002a12:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <HAL_GPIO_Init+0x80>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a93 	.word	0x08002a93
 8002a1c:	08002a6d 	.word	0x08002a6d
 8002a20:	08002a7f 	.word	0x08002a7f
 8002a24:	08002ac1 	.word	0x08002ac1
 8002a28:	08002ac7 	.word	0x08002ac7
 8002a2c:	08002ac7 	.word	0x08002ac7
 8002a30:	08002ac7 	.word	0x08002ac7
 8002a34:	08002ac7 	.word	0x08002ac7
 8002a38:	08002ac7 	.word	0x08002ac7
 8002a3c:	08002ac7 	.word	0x08002ac7
 8002a40:	08002ac7 	.word	0x08002ac7
 8002a44:	08002ac7 	.word	0x08002ac7
 8002a48:	08002ac7 	.word	0x08002ac7
 8002a4c:	08002ac7 	.word	0x08002ac7
 8002a50:	08002ac7 	.word	0x08002ac7
 8002a54:	08002ac7 	.word	0x08002ac7
 8002a58:	08002ac7 	.word	0x08002ac7
 8002a5c:	08002a75 	.word	0x08002a75
 8002a60:	08002a89 	.word	0x08002a89
 8002a64:	4a76      	ldr	r2, [pc, #472]	; (8002c40 <HAL_GPIO_Init+0x2a8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a6a:	e02c      	b.n	8002ac6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	623b      	str	r3, [r7, #32]
          break;
 8002a72:	e029      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	623b      	str	r3, [r7, #32]
          break;
 8002a7c:	e024      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	3308      	adds	r3, #8
 8002a84:	623b      	str	r3, [r7, #32]
          break;
 8002a86:	e01f      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	623b      	str	r3, [r7, #32]
          break;
 8002a90:	e01a      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	623b      	str	r3, [r7, #32]
          break;
 8002a9e:	e013      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	611a      	str	r2, [r3, #16]
          break;
 8002ab2:	e009      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	615a      	str	r2, [r3, #20]
          break;
 8002abe:	e003      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
          break;
 8002ac4:	e000      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          break;
 8002ac6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2bff      	cmp	r3, #255	; 0xff
 8002acc:	d801      	bhi.n	8002ad2 <HAL_GPIO_Init+0x13a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	e001      	b.n	8002ad6 <HAL_GPIO_Init+0x13e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d802      	bhi.n	8002ae4 <HAL_GPIO_Init+0x14c>
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	e002      	b.n	8002aea <HAL_GPIO_Init+0x152>
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	3b08      	subs	r3, #8
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	210f      	movs	r1, #15
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	401a      	ands	r2, r3
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	431a      	orrs	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80a9 	beq.w	8002c6a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b18:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_GPIO_Init+0x2ac>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a49      	ldr	r2, [pc, #292]	; (8002c44 <HAL_GPIO_Init+0x2ac>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6193      	str	r3, [r2, #24]
 8002b24:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_GPIO_Init+0x2ac>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b30:	4a45      	ldr	r2, [pc, #276]	; (8002c48 <HAL_GPIO_Init+0x2b0>)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	3302      	adds	r3, #2
 8002b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3d      	ldr	r2, [pc, #244]	; (8002c4c <HAL_GPIO_Init+0x2b4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00d      	beq.n	8002b78 <HAL_GPIO_Init+0x1e0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3c      	ldr	r2, [pc, #240]	; (8002c50 <HAL_GPIO_Init+0x2b8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d007      	beq.n	8002b74 <HAL_GPIO_Init+0x1dc>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a3b      	ldr	r2, [pc, #236]	; (8002c54 <HAL_GPIO_Init+0x2bc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_GPIO_Init+0x1d8>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e004      	b.n	8002b7a <HAL_GPIO_Init+0x1e2>
 8002b70:	2303      	movs	r3, #3
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x1e2>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_GPIO_Init+0x1e2>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4093      	lsls	r3, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b8a:	492f      	ldr	r1, [pc, #188]	; (8002c48 <HAL_GPIO_Init+0x2b0>)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba4:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	492b      	ldr	r1, [pc, #172]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bb2:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	4927      	ldr	r1, [pc, #156]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4921      	ldr	r1, [pc, #132]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	491d      	ldr	r1, [pc, #116]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d006      	beq.n	8002c02 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4917      	ldr	r1, [pc, #92]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	4913      	ldr	r1, [pc, #76]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01f      	beq.n	8002c5c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	490d      	ldr	r1, [pc, #52]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
 8002c28:	e01f      	b.n	8002c6a <HAL_GPIO_Init+0x2d2>
 8002c2a:	bf00      	nop
 8002c2c:	10320000 	.word	0x10320000
 8002c30:	10310000 	.word	0x10310000
 8002c34:	10220000 	.word	0x10220000
 8002c38:	10210000 	.word	0x10210000
 8002c3c:	10120000 	.word	0x10120000
 8002c40:	10110000 	.word	0x10110000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40010800 	.word	0x40010800
 8002c50:	40010c00 	.word	0x40010c00
 8002c54:	40011000 	.word	0x40011000
 8002c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_GPIO_Init+0x2f4>)
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	4909      	ldr	r1, [pc, #36]	; (8002c8c <HAL_GPIO_Init+0x2f4>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f47f ae96 	bne.w	80029ac <HAL_GPIO_Init+0x14>
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	372c      	adds	r7, #44	; 0x2c
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40010400 	.word	0x40010400

08002c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ca0:	787b      	ldrb	r3, [r7, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cac:	e003      	b.n	8002cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	041a      	lsls	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e272      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8087 	beq.w	8002dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce0:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d00c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cec:	4b8f      	ldr	r3, [pc, #572]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d112      	bne.n	8002d1e <HAL_RCC_OscConfig+0x5e>
 8002cf8:	4b8c      	ldr	r3, [pc, #560]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d10b      	bne.n	8002d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d06:	4b89      	ldr	r3, [pc, #548]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d06c      	beq.n	8002dec <HAL_RCC_OscConfig+0x12c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d168      	bne.n	8002dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e24c      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x76>
 8002d28:	4b80      	ldr	r3, [pc, #512]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7f      	ldr	r2, [pc, #508]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e02e      	b.n	8002d94 <HAL_RCC_OscConfig+0xd4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x98>
 8002d3e:	4b7b      	ldr	r3, [pc, #492]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7a      	ldr	r2, [pc, #488]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a77      	ldr	r2, [pc, #476]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e01d      	b.n	8002d94 <HAL_RCC_OscConfig+0xd4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0xbc>
 8002d62:	4b72      	ldr	r3, [pc, #456]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a71      	ldr	r2, [pc, #452]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b6f      	ldr	r3, [pc, #444]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6e      	ldr	r2, [pc, #440]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0xd4>
 8002d7c:	4b6b      	ldr	r3, [pc, #428]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a6a      	ldr	r2, [pc, #424]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b68      	ldr	r3, [pc, #416]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a67      	ldr	r2, [pc, #412]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fe90 	bl	8001ac0 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe fe8c 	bl	8001ac0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e200      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0xe4>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fe7c 	bl	8001ac0 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fe78 	bl	8001ac0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1ec      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x10c>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d063      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfa:	4b4c      	ldr	r3, [pc, #304]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e06:	4b49      	ldr	r3, [pc, #292]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d11c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x18c>
 8002e12:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_RCC_OscConfig+0x176>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e1c0      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4939      	ldr	r1, [pc, #228]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	e03a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCC_OscConfig+0x270>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fe31 	bl	8001ac0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e62:	f7fe fe2d 	bl	8001ac0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e1a1      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4927      	ldr	r1, [pc, #156]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <HAL_RCC_OscConfig+0x270>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fe10 	bl	8001ac0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea4:	f7fe fe0c 	bl	8001ac0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e180      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d03a      	beq.n	8002f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d019      	beq.n	8002f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002edc:	f7fe fdf0 	bl	8001ac0 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fdec 	bl	8001ac0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e160      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f000 faf8 	bl	80034f8 <RCC_Delay>
 8002f08:	e01c      	b.n	8002f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f10:	f7fe fdd6 	bl	8001ac0 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f16:	e00f      	b.n	8002f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f18:	f7fe fdd2 	bl	8001ac0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d908      	bls.n	8002f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e146      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	42420000 	.word	0x42420000
 8002f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f38:	4b92      	ldr	r3, [pc, #584]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e9      	bne.n	8002f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80a6 	beq.w	800309e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f56:	4b8b      	ldr	r3, [pc, #556]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	4b88      	ldr	r3, [pc, #544]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	4a87      	ldr	r2, [pc, #540]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	61d3      	str	r3, [r2, #28]
 8002f6e:	4b85      	ldr	r3, [pc, #532]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	4b82      	ldr	r3, [pc, #520]	; (8003188 <HAL_RCC_OscConfig+0x4c8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8a:	4b7f      	ldr	r3, [pc, #508]	; (8003188 <HAL_RCC_OscConfig+0x4c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7e      	ldr	r2, [pc, #504]	; (8003188 <HAL_RCC_OscConfig+0x4c8>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fd93 	bl	8001ac0 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fe fd8f 	bl	8001ac0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	; 0x64
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e103      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b75      	ldr	r3, [pc, #468]	; (8003188 <HAL_RCC_OscConfig+0x4c8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x312>
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a6e      	ldr	r2, [pc, #440]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6213      	str	r3, [r2, #32]
 8002fd0:	e02d      	b.n	800302e <HAL_RCC_OscConfig+0x36e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x334>
 8002fda:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6213      	str	r3, [r2, #32]
 8002fe6:	4b67      	ldr	r3, [pc, #412]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4a66      	ldr	r2, [pc, #408]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6213      	str	r3, [r2, #32]
 8002ff2:	e01c      	b.n	800302e <HAL_RCC_OscConfig+0x36e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d10c      	bne.n	8003016 <HAL_RCC_OscConfig+0x356>
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4a60      	ldr	r2, [pc, #384]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	f043 0304 	orr.w	r3, r3, #4
 8003006:	6213      	str	r3, [r2, #32]
 8003008:	4b5e      	ldr	r3, [pc, #376]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4a5d      	ldr	r2, [pc, #372]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6213      	str	r3, [r2, #32]
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0x36e>
 8003016:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4a5a      	ldr	r2, [pc, #360]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6213      	str	r3, [r2, #32]
 8003022:	4b58      	ldr	r3, [pc, #352]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4a57      	ldr	r2, [pc, #348]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d015      	beq.n	8003062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fe fd43 	bl	8001ac0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fd3f 	bl	8001ac0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0b1      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ee      	beq.n	800303e <HAL_RCC_OscConfig+0x37e>
 8003060:	e014      	b.n	800308c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fe fd2d 	bl	8001ac0 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe fd29 	bl	8001ac0 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e09b      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003080:	4b40      	ldr	r3, [pc, #256]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ee      	bne.n	800306a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003092:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8087 	beq.w	80031b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d061      	beq.n	8003178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d146      	bne.n	800314a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030bc:	4b33      	ldr	r3, [pc, #204]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fe fcfd 	bl	8001ac0 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe fcf9 	bl	8001ac0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e06d      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030dc:	4b29      	ldr	r3, [pc, #164]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d108      	bne.n	8003104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4921      	ldr	r1, [pc, #132]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003104:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a19      	ldr	r1, [r3, #32]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	430b      	orrs	r3, r1
 8003116:	491b      	ldr	r1, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fe fccd 	bl	8001ac0 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7fe fcc9 	bl	8001ac0 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e03d      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x46a>
 8003148:	e035      	b.n	80031b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe fcb6 	bl	8001ac0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe fcb2 	bl	8001ac0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e026      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x498>
 8003176:	e01e      	b.n	80031b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d107      	bne.n	8003190 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e019      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
 8003184:	40021000 	.word	0x40021000
 8003188:	40007000 	.word	0x40007000
 800318c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_OscConfig+0x500>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0d0      	b.n	800337a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d910      	bls.n	8003208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b67      	ldr	r3, [pc, #412]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 0207 	bic.w	r2, r3, #7
 80031ee:	4965      	ldr	r1, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0b8      	b.n	800337a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800322a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003242:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	494d      	ldr	r1, [pc, #308]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d040      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d115      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07f      	b.n	800337a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e073      	b.n	800337a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06b      	b.n	800337a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4936      	ldr	r1, [pc, #216]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b4:	f7fe fc04 	bl	8001ac0 <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fe fc00 	bl	8001ac0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e053      	b.n	800337a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 020c 	and.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1eb      	bne.n	80032bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d210      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 0207 	bic.w	r2, r3, #7
 80032fa:	4922      	ldr	r1, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e032      	b.n	800337a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003352:	f000 f82d 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8003356:	4602      	mov	r2, r0
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	490a      	ldr	r1, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	5ccb      	ldrb	r3, [r1, r3]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1cc>)
 800336c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1d0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fb62 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40022000 	.word	0x40022000
 8003388:	40021000 	.word	0x40021000
 800338c:	08005b18 	.word	0x08005b18
 8003390:	20000018 	.word	0x20000018
 8003394:	2000001c 	.word	0x2000001c

08003398 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_RCC_EnableCSS+0x14>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	4242004c 	.word	0x4242004c

080033b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b490      	push	{r4, r7}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCC_GetSysClockFreq+0xac>)
 80033b8:	1d3c      	adds	r4, r7, #4
 80033ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033c0:	f240 2301 	movw	r3, #513	; 0x201
 80033c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033da:	4b21      	ldr	r3, [pc, #132]	; (8003460 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x40>
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x46>
 80033ee:	e02b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033f2:	623b      	str	r3, [r7, #32]
      break;
 80033f4:	e02b      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	0c9b      	lsrs	r3, r3, #18
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3328      	adds	r3, #40	; 0x28
 8003400:	443b      	add	r3, r7
 8003402:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003406:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d012      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0c5b      	lsrs	r3, r3, #17
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	3328      	adds	r3, #40	; 0x28
 800341e:	443b      	add	r3, r7
 8003420:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003424:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <HAL_RCC_GetSysClockFreq+0xb4>)
 800342a:	fb03 f202 	mul.w	r2, r3, r2
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e004      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	623b      	str	r3, [r7, #32]
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_GetSysClockFreq+0xb4>)
 800344a:	623b      	str	r3, [r7, #32]
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	6a3b      	ldr	r3, [r7, #32]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3728      	adds	r7, #40	; 0x28
 8003454:	46bd      	mov	sp, r7
 8003456:	bc90      	pop	{r4, r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	08005b08 	.word	0x08005b08
 8003460:	40021000 	.word	0x40021000
 8003464:	007a1200 	.word	0x007a1200
 8003468:	003d0900 	.word	0x003d0900

0800346c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003470:	4b02      	ldr	r3, [pc, #8]	; (800347c <HAL_RCC_GetHCLKFreq+0x10>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	20000018 	.word	0x20000018

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff2 	bl	800346c <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08005b28 	.word	0x08005b28

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f7ff ffde 	bl	800346c <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0adb      	lsrs	r3, r3, #11
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08005b28 	.word	0x08005b28

080034d0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d104      	bne.n	80034ea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80034e0:	f000 f828 	bl	8003534 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	701a      	strb	r2, [r3, #0]
  }
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	4002100a 	.word	0x4002100a

080034f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <RCC_Delay+0x34>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <RCC_Delay+0x38>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0a5b      	lsrs	r3, r3, #9
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003514:	bf00      	nop
  }
  while (Delay --);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	60fa      	str	r2, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f9      	bne.n	8003514 <RCC_Delay+0x1c>
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000018 	.word	0x20000018
 8003530:	10624dd3 	.word	0x10624dd3

08003534 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d07d      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356c:	4b4c      	ldr	r3, [pc, #304]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	4a4b      	ldr	r2, [pc, #300]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003576:	61d3      	str	r3, [r2, #28]
 8003578:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d118      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003594:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a42      	ldr	r2, [pc, #264]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800359a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a0:	f7fe fa8e 	bl	8001ac0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	e008      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fe fa8a 	bl	8001ac0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e06d      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c6:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02e      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d027      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e4:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ee:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f4:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035fa:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d014      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fa59 	bl	8001ac0 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fe fa55 	bl	8001ac0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e036      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ee      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003634:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4917      	ldr	r1, [pc, #92]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	4313      	orrs	r3, r2
 8003644:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	490b      	ldr	r1, [pc, #44]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4904      	ldr	r1, [pc, #16]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40007000 	.word	0x40007000
 80036a8:	42420440 	.word	0x42420440

080036ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e076      	b.n	80037ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d108      	bne.n	80036d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ce:	d009      	beq.n	80036e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
 80036d6:	e005      	b.n	80036e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd fe3c 	bl	800137c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	ea42 0103 	orr.w	r1, r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	0c1a      	lsrs	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f002 0204 	and.w	r2, r2, #4
 800378a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_SPI_Transmit+0x22>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e126      	b.n	8003a24 <HAL_SPI_Transmit+0x270>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037de:	f7fe f96f 	bl	8001ac0 <HAL_GetTick>
 80037e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d002      	beq.n	80037fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
 80037f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037f8:	e10b      	b.n	8003a12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_SPI_Transmit+0x52>
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800380a:	e102      	b.n	8003a12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2203      	movs	r2, #3
 8003810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	88fa      	ldrh	r2, [r7, #6]
 800382a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003852:	d10f      	bne.n	8003874 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003862:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003872:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d007      	beq.n	8003892 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389a:	d14b      	bne.n	8003934 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_SPI_Transmit+0xf6>
 80038a4:	8afb      	ldrh	r3, [r7, #22]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d13e      	bne.n	8003928 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	881a      	ldrh	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	1c9a      	adds	r2, r3, #2
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038ce:	e02b      	b.n	8003928 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d112      	bne.n	8003904 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	881a      	ldrh	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	86da      	strh	r2, [r3, #54]	; 0x36
 8003902:	e011      	b.n	8003928 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003904:	f7fe f8dc 	bl	8001ac0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d803      	bhi.n	800391c <HAL_SPI_Transmit+0x168>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d102      	bne.n	8003922 <HAL_SPI_Transmit+0x16e>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003926:	e074      	b.n	8003a12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ce      	bne.n	80038d0 <HAL_SPI_Transmit+0x11c>
 8003932:	e04c      	b.n	80039ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_SPI_Transmit+0x18e>
 800393c:	8afb      	ldrh	r3, [r7, #22]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d140      	bne.n	80039c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	7812      	ldrb	r2, [r2, #0]
 800394e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003968:	e02c      	b.n	80039c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d113      	bne.n	80039a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	86da      	strh	r2, [r3, #54]	; 0x36
 800399e:	e011      	b.n	80039c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a0:	f7fe f88e 	bl	8001ac0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d803      	bhi.n	80039b8 <HAL_SPI_Transmit+0x204>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d102      	bne.n	80039be <HAL_SPI_Transmit+0x20a>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039c2:	e026      	b.n	8003a12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1cd      	bne.n	800396a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fcbc 	bl	8004350 <SPI_EndRxTxTransaction>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e000      	b.n	8003a12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a48:	d112      	bne.n	8003a70 <HAL_SPI_Receive+0x44>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10e      	bne.n	8003a70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2204      	movs	r2, #4
 8003a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8f1 	bl	8003c4e <HAL_SPI_TransmitReceive>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	e0ea      	b.n	8003c46 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Receive+0x52>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e0e3      	b.n	8003c46 <HAL_SPI_Receive+0x21a>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a86:	f7fe f81b 	bl	8001ac0 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d002      	beq.n	8003a9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a9c:	e0ca      	b.n	8003c34 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_SPI_Receive+0x7e>
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003aae:	e0c1      	b.n	8003c34 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af6:	d10f      	bne.n	8003b18 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d007      	beq.n	8003b36 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d162      	bne.n	8003c04 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b3e:	e02e      	b.n	8003b9e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d115      	bne.n	8003b7a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f103 020c 	add.w	r2, r3, #12
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b78:	e011      	b.n	8003b9e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b7a:	f7fd ffa1 	bl	8001ac0 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d803      	bhi.n	8003b92 <HAL_SPI_Receive+0x166>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_Receive+0x16c>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b9c:	e04a      	b.n	8003c34 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1cb      	bne.n	8003b40 <HAL_SPI_Receive+0x114>
 8003ba8:	e031      	b.n	8003c0e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d113      	bne.n	8003be0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	b292      	uxth	r2, r2
 8003bc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bde:	e011      	b.n	8003c04 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be0:	f7fd ff6e 	bl	8001ac0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d803      	bhi.n	8003bf8 <HAL_SPI_Receive+0x1cc>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	d102      	bne.n	8003bfe <HAL_SPI_Receive+0x1d2>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c02:	e017      	b.n	8003c34 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1cd      	bne.n	8003baa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	6839      	ldr	r1, [r7, #0]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fb4a 	bl	80042ac <SPI_EndRxTransaction>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
 8003c30:	e000      	b.n	8003c34 <HAL_SPI_Receive+0x208>
  }

error :
 8003c32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b08c      	sub	sp, #48	; 0x30
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x26>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e18a      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x33c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c7c:	f7fd ff20 	bl	8001ac0 <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d00f      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x70>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca4:	d107      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x68>
 8003cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d003      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cbc:	e15b      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x82>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x82>
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cd6:	e14e      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d003      	beq.n	8003cec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2205      	movs	r2, #5
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	887a      	ldrh	r2, [r7, #2]
 8003d02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	887a      	ldrh	r2, [r7, #2]
 8003d0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d007      	beq.n	8003d40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d48:	d178      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_SPI_TransmitReceive+0x10a>
 8003d52:	8b7b      	ldrh	r3, [r7, #26]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d166      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	881a      	ldrh	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	1c9a      	adds	r2, r3, #2
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7c:	e053      	b.n	8003e26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x176>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_SPI_TransmitReceive+0x176>
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d113      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d119      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x1b8>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d014      	beq.n	8003e06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	b292      	uxth	r2, r2
 8003de8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	1c9a      	adds	r2, r3, #2
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e02:	2301      	movs	r3, #1
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e06:	f7fd fe5b 	bl	8001ac0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d807      	bhi.n	8003e26 <HAL_SPI_TransmitReceive+0x1d8>
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d003      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e24:	e0a7      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1a6      	bne.n	8003d7e <HAL_SPI_TransmitReceive+0x130>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1a1      	bne.n	8003d7e <HAL_SPI_TransmitReceive+0x130>
 8003e3a:	e07c      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_SPI_TransmitReceive+0x1fc>
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d16b      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	7812      	ldrb	r2, [r2, #0]
 8003e56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e70:	e057      	b.n	8003f22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d11c      	bne.n	8003eba <HAL_SPI_TransmitReceive+0x26c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d017      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x26c>
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d114      	bne.n	8003eba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d119      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x2ae>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d014      	beq.n	8003efc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003efc:	f7fd fde0 	bl	8001ac0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d803      	bhi.n	8003f14 <HAL_SPI_TransmitReceive+0x2c6>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d102      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x2cc>
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f20:	e029      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1a2      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x224>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d19d      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fa08 	bl	8004350 <SPI_EndRxTxTransaction>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f52:	e010      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	e000      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3730      	adds	r7, #48	; 0x30
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	099b      	lsrs	r3, r3, #6
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10f      	bne.n	8003fd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
    return;
 8003fd6:	e0be      	b.n	8004156 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_SPI_IRQHandler+0x66>
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	09db      	lsrs	r3, r3, #7
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4798      	blx	r3
    return;
 8003ff8:	e0ad      	b.n	8004156 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_SPI_IRQHandler+0x80>
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80a1 	beq.w	8004156 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 809a 	beq.w	8004156 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d023      	beq.n	8004076 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b03      	cmp	r3, #3
 8004038:	d011      	beq.n	800405e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f043 0204 	orr.w	r2, r3, #4
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	e00b      	b.n	8004076 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	693b      	ldr	r3, [r7, #16]
        return;
 8004074:	e06f      	b.n	8004156 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d014      	beq.n	80040ac <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d04f      	beq.n	8004154 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040c2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <HAL_SPI_IRQHandler+0x14c>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d034      	beq.n	800414a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0203 	bic.w	r2, r2, #3
 80040ee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d011      	beq.n	800411c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fc:	4a17      	ldr	r2, [pc, #92]	; (800415c <HAL_SPI_IRQHandler+0x1c8>)
 80040fe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fa9d 	bl	8002644 <HAL_DMA_Abort_IT>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004120:	2b00      	cmp	r3, #0
 8004122:	d016      	beq.n	8004152 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	4a0c      	ldr	r2, [pc, #48]	; (800415c <HAL_SPI_IRQHandler+0x1c8>)
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fa87 	bl	8002644 <HAL_DMA_Abort_IT>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004148:	e003      	b.n	8004152 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f808 	bl	8004160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004150:	e000      	b.n	8004154 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004152:	bf00      	nop
    return;
 8004154:	bf00      	nop
  }
}
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	08004173 	.word	0x08004173

08004160 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff ffe7 	bl	8004160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041ac:	f7fd fc88 	bl	8001ac0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	4413      	add	r3, r2
 80041ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041bc:	f7fd fc80 	bl	8001ac0 <HAL_GetTick>
 80041c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	015b      	lsls	r3, r3, #5
 80041c8:	0d1b      	lsrs	r3, r3, #20
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d2:	e054      	b.n	800427e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d050      	beq.n	800427e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041dc:	f7fd fc70 	bl	8001ac0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d902      	bls.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d13d      	bne.n	800426e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004200:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420a:	d111      	bne.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x94>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004214:	d004      	beq.n	8004220 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421e:	d107      	bne.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004238:	d10f      	bne.n	800425a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e017      	b.n	800429e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	3b01      	subs	r3, #1
 800427c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	429a      	cmp	r2, r3
 800429a:	d19b      	bne.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000018 	.word	0x20000018

080042ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c0:	d111      	bne.n	80042e6 <SPI_EndRxTransaction+0x3a>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ca:	d004      	beq.n	80042d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d107      	bne.n	80042e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ee:	d117      	bne.n	8004320 <SPI_EndRxTransaction+0x74>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f8:	d112      	bne.n	8004320 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	2101      	movs	r1, #1
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff ff49 	bl	800419c <SPI_WaitFlagStateUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01a      	beq.n	8004346 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e013      	b.n	8004348 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff ff36 	bl	800419c <SPI_WaitFlagStateUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e000      	b.n	8004348 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	2180      	movs	r1, #128	; 0x80
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff ff18 	bl	800419c <SPI_WaitFlagStateUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e000      	b.n	8004384 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d001      	beq.n	80043a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e035      	b.n	8004410 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIM_Base_Start_IT+0x90>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_TIM_Base_Start_IT+0x4e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ce:	d004      	beq.n	80043da <HAL_TIM_Base_Start_IT+0x4e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_TIM_Base_Start_IT+0x94>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d111      	bne.n	80043fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d010      	beq.n	800440e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fc:	e007      	b.n	800440e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40000400 	.word	0x40000400

08004424 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e041      	b.n	80044ba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd f9ec 	bl	8001828 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f000 f9b2 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d122      	bne.n	800451e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d11b      	bne.n	800451e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f06f 0202 	mvn.w	r2, #2
 80044ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f946 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 800450a:	e005      	b.n	8004518 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f939 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f948 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d122      	bne.n	8004572 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d11b      	bne.n	8004572 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0204 	mvn.w	r2, #4
 8004542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f91c 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 800455e:	e005      	b.n	800456c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f90f 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f91e 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d122      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b08      	cmp	r3, #8
 800458c:	d11b      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0208 	mvn.w	r2, #8
 8004596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2204      	movs	r2, #4
 800459c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f8f2 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 80045b2:	e005      	b.n	80045c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8e5 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8f4 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d122      	bne.n	800461a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d11b      	bne.n	800461a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0210 	mvn.w	r2, #16
 80045ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2208      	movs	r2, #8
 80045f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8c8 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 8004606:	e005      	b.n	8004614 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f8bb 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f8ca 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10e      	bne.n	8004646 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d107      	bne.n	8004646 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f06f 0201 	mvn.w	r2, #1
 800463e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fc fe3f 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d10e      	bne.n	8004672 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d107      	bne.n	8004672 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800466a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fb3f 	bl	8004cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d10e      	bne.n	800469e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d107      	bne.n	800469e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f88e 	bl	80047ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d10e      	bne.n	80046ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0220 	mvn.w	r2, #32
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb0a 	bl	8004cde <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_OC_ConfigChannel+0x1a>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e046      	b.n	800477c <HAL_TIM_OC_ConfigChannel+0xa8>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d839      	bhi.n	8004770 <HAL_TIM_OC_ConfigChannel+0x9c>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <HAL_TIM_OC_ConfigChannel+0x30>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004739 	.word	0x08004739
 8004708:	08004771 	.word	0x08004771
 800470c:	08004771 	.word	0x08004771
 8004710:	08004771 	.word	0x08004771
 8004714:	08004747 	.word	0x08004747
 8004718:	08004771 	.word	0x08004771
 800471c:	08004771 	.word	0x08004771
 8004720:	08004771 	.word	0x08004771
 8004724:	08004755 	.word	0x08004755
 8004728:	08004771 	.word	0x08004771
 800472c:	08004771 	.word	0x08004771
 8004730:	08004771 	.word	0x08004771
 8004734:	08004763 	.word	0x08004763
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f89c 	bl	800487c <TIM_OC1_SetConfig>
      break;
 8004744:	e015      	b.n	8004772 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 f8fb 	bl	8004948 <TIM_OC2_SetConfig>
      break;
 8004752:	e00e      	b.n	8004772 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f95e 	bl	8004a1c <TIM_OC3_SetConfig>
      break;
 8004760:	e007      	b.n	8004772 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f9c1 	bl	8004af0 <TIM_OC4_SetConfig>
      break;
 800476e:	e000      	b.n	8004772 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a25      	ldr	r2, [pc, #148]	; (8004874 <TIM_Base_SetConfig+0xa8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <TIM_Base_SetConfig+0x28>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d003      	beq.n	80047f4 <TIM_Base_SetConfig+0x28>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a22      	ldr	r2, [pc, #136]	; (8004878 <TIM_Base_SetConfig+0xac>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d108      	bne.n	8004806 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <TIM_Base_SetConfig+0xa8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d007      	beq.n	800481e <TIM_Base_SetConfig+0x52>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d003      	beq.n	800481e <TIM_Base_SetConfig+0x52>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a17      	ldr	r2, [pc, #92]	; (8004878 <TIM_Base_SetConfig+0xac>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d108      	bne.n	8004830 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a07      	ldr	r2, [pc, #28]	; (8004874 <TIM_Base_SetConfig+0xa8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d103      	bne.n	8004864 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	615a      	str	r2, [r3, #20]
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40000400 	.word	0x40000400

0800487c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 0302 	bic.w	r3, r3, #2
 80048c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a1c      	ldr	r2, [pc, #112]	; (8004944 <TIM_OC1_SetConfig+0xc8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d10c      	bne.n	80048f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0308 	bic.w	r3, r3, #8
 80048de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 0304 	bic.w	r3, r3, #4
 80048f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a13      	ldr	r2, [pc, #76]	; (8004944 <TIM_OC1_SetConfig+0xc8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d111      	bne.n	800491e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	621a      	str	r2, [r3, #32]
}
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40012c00 	.word	0x40012c00

08004948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f023 0210 	bic.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0320 	bic.w	r3, r3, #32
 8004992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <TIM_OC2_SetConfig+0xd0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d10d      	bne.n	80049c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <TIM_OC2_SetConfig+0xd0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d113      	bne.n	80049f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00

08004a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <TIM_OC3_SetConfig+0xd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10d      	bne.n	8004a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <TIM_OC3_SetConfig+0xd0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d113      	bne.n	8004ac6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40012c00 	.word	0x40012c00

08004af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	031b      	lsls	r3, r3, #12
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <TIM_OC4_SetConfig+0x98>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d109      	bne.n	8004b64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	019b      	lsls	r3, r3, #6
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00

08004b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e041      	b.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10c      	bne.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40000400 	.word	0x40000400

08004c3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e03d      	b.n	8004cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e03f      	b.n	8004d94 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fc fdff 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2224      	movs	r2, #36	; 0x24
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f904 	bl	8004f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d17c      	bne.n	8004eb6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_UART_Transmit+0x2c>
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e075      	b.n	8004eb8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Transmit+0x3e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e06e      	b.n	8004eb8 <HAL_UART_Transmit+0x11c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2221      	movs	r2, #33	; 0x21
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df0:	f7fc fe66 	bl	8001ac0 <HAL_GetTick>
 8004df4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	d108      	bne.n	8004e1e <HAL_UART_Transmit+0x82>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e003      	b.n	8004e26 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e2e:	e02a      	b.n	8004e86 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2200      	movs	r2, #0
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f840 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e036      	b.n	8004eb8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e5e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	3302      	adds	r3, #2
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	e007      	b.n	8004e78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3301      	adds	r3, #1
 8004e76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1cf      	bne.n	8004e30 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2200      	movs	r2, #0
 8004e98:	2140      	movs	r1, #64	; 0x40
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f810 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e006      	b.n	8004eb8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed0:	e02c      	b.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d028      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee0:	f7fc fdee 	bl	8001ac0 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d21d      	bcs.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004efe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e00f      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d0c3      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f8e:	f023 030c 	bic.w	r3, r3, #12
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a2c      	ldr	r2, [pc, #176]	; (8005068 <UART_SetConfig+0x114>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d103      	bne.n	8004fc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fbc:	f7fe fa74 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	e002      	b.n	8004fca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fc4:	f7fe fa5c 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8004fc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009a      	lsls	r2, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	4a22      	ldr	r2, [pc, #136]	; (800506c <UART_SetConfig+0x118>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	0119      	lsls	r1, r3, #4
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009a      	lsls	r2, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <UART_SetConfig+0x118>)
 8005002:	fba3 0302 	umull	r0, r3, r3, r2
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2064      	movs	r0, #100	; 0x64
 800500a:	fb00 f303 	mul.w	r3, r0, r3
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	3332      	adds	r3, #50	; 0x32
 8005014:	4a15      	ldr	r2, [pc, #84]	; (800506c <UART_SetConfig+0x118>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005020:	4419      	add	r1, r3
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009a      	lsls	r2, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	fbb2 f2f3 	udiv	r2, r2, r3
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <UART_SetConfig+0x118>)
 800503a:	fba3 0302 	umull	r0, r3, r3, r2
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2064      	movs	r0, #100	; 0x64
 8005042:	fb00 f303 	mul.w	r3, r0, r3
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	3332      	adds	r3, #50	; 0x32
 800504c:	4a07      	ldr	r2, [pc, #28]	; (800506c <UART_SetConfig+0x118>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	f003 020f 	and.w	r2, r3, #15
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	440a      	add	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40013800 	.word	0x40013800
 800506c:	51eb851f 	.word	0x51eb851f

08005070 <__errno>:
 8005070:	4b01      	ldr	r3, [pc, #4]	; (8005078 <__errno+0x8>)
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000024 	.word	0x20000024

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	2600      	movs	r6, #0
 8005080:	4d0c      	ldr	r5, [pc, #48]	; (80050b4 <__libc_init_array+0x38>)
 8005082:	4c0d      	ldr	r4, [pc, #52]	; (80050b8 <__libc_init_array+0x3c>)
 8005084:	1b64      	subs	r4, r4, r5
 8005086:	10a4      	asrs	r4, r4, #2
 8005088:	42a6      	cmp	r6, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	f000 fd18 	bl	8005ac0 <_init>
 8005090:	2600      	movs	r6, #0
 8005092:	4d0a      	ldr	r5, [pc, #40]	; (80050bc <__libc_init_array+0x40>)
 8005094:	4c0a      	ldr	r4, [pc, #40]	; (80050c0 <__libc_init_array+0x44>)
 8005096:	1b64      	subs	r4, r4, r5
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	42a6      	cmp	r6, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a4:	4798      	blx	r3
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ae:	4798      	blx	r3
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	08005b94 	.word	0x08005b94
 80050b8:	08005b94 	.word	0x08005b94
 80050bc:	08005b94 	.word	0x08005b94
 80050c0:	08005b98 	.word	0x08005b98

080050c4 <memset>:
 80050c4:	4603      	mov	r3, r0
 80050c6:	4402      	add	r2, r0
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d100      	bne.n	80050ce <memset+0xa>
 80050cc:	4770      	bx	lr
 80050ce:	f803 1b01 	strb.w	r1, [r3], #1
 80050d2:	e7f9      	b.n	80050c8 <memset+0x4>

080050d4 <_puts_r>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	460e      	mov	r6, r1
 80050d8:	4605      	mov	r5, r0
 80050da:	b118      	cbz	r0, 80050e4 <_puts_r+0x10>
 80050dc:	6983      	ldr	r3, [r0, #24]
 80050de:	b90b      	cbnz	r3, 80050e4 <_puts_r+0x10>
 80050e0:	f000 fa44 	bl	800556c <__sinit>
 80050e4:	69ab      	ldr	r3, [r5, #24]
 80050e6:	68ac      	ldr	r4, [r5, #8]
 80050e8:	b913      	cbnz	r3, 80050f0 <_puts_r+0x1c>
 80050ea:	4628      	mov	r0, r5
 80050ec:	f000 fa3e 	bl	800556c <__sinit>
 80050f0:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <_puts_r+0xd0>)
 80050f2:	429c      	cmp	r4, r3
 80050f4:	d120      	bne.n	8005138 <_puts_r+0x64>
 80050f6:	686c      	ldr	r4, [r5, #4]
 80050f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050fa:	07db      	lsls	r3, r3, #31
 80050fc:	d405      	bmi.n	800510a <_puts_r+0x36>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	0598      	lsls	r0, r3, #22
 8005102:	d402      	bmi.n	800510a <_puts_r+0x36>
 8005104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005106:	f000 facf 	bl	80056a8 <__retarget_lock_acquire_recursive>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	0719      	lsls	r1, r3, #28
 800510e:	d51d      	bpl.n	800514c <_puts_r+0x78>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	b1db      	cbz	r3, 800514c <_puts_r+0x78>
 8005114:	3e01      	subs	r6, #1
 8005116:	68a3      	ldr	r3, [r4, #8]
 8005118:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800511c:	3b01      	subs	r3, #1
 800511e:	60a3      	str	r3, [r4, #8]
 8005120:	bb39      	cbnz	r1, 8005172 <_puts_r+0x9e>
 8005122:	2b00      	cmp	r3, #0
 8005124:	da38      	bge.n	8005198 <_puts_r+0xc4>
 8005126:	4622      	mov	r2, r4
 8005128:	210a      	movs	r1, #10
 800512a:	4628      	mov	r0, r5
 800512c:	f000 f848 	bl	80051c0 <__swbuf_r>
 8005130:	3001      	adds	r0, #1
 8005132:	d011      	beq.n	8005158 <_puts_r+0x84>
 8005134:	250a      	movs	r5, #10
 8005136:	e011      	b.n	800515c <_puts_r+0x88>
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <_puts_r+0xd4>)
 800513a:	429c      	cmp	r4, r3
 800513c:	d101      	bne.n	8005142 <_puts_r+0x6e>
 800513e:	68ac      	ldr	r4, [r5, #8]
 8005140:	e7da      	b.n	80050f8 <_puts_r+0x24>
 8005142:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <_puts_r+0xd8>)
 8005144:	429c      	cmp	r4, r3
 8005146:	bf08      	it	eq
 8005148:	68ec      	ldreq	r4, [r5, #12]
 800514a:	e7d5      	b.n	80050f8 <_puts_r+0x24>
 800514c:	4621      	mov	r1, r4
 800514e:	4628      	mov	r0, r5
 8005150:	f000 f888 	bl	8005264 <__swsetup_r>
 8005154:	2800      	cmp	r0, #0
 8005156:	d0dd      	beq.n	8005114 <_puts_r+0x40>
 8005158:	f04f 35ff 	mov.w	r5, #4294967295
 800515c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800515e:	07da      	lsls	r2, r3, #31
 8005160:	d405      	bmi.n	800516e <_puts_r+0x9a>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	059b      	lsls	r3, r3, #22
 8005166:	d402      	bmi.n	800516e <_puts_r+0x9a>
 8005168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516a:	f000 fa9e 	bl	80056aa <__retarget_lock_release_recursive>
 800516e:	4628      	mov	r0, r5
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	2b00      	cmp	r3, #0
 8005174:	da04      	bge.n	8005180 <_puts_r+0xac>
 8005176:	69a2      	ldr	r2, [r4, #24]
 8005178:	429a      	cmp	r2, r3
 800517a:	dc06      	bgt.n	800518a <_puts_r+0xb6>
 800517c:	290a      	cmp	r1, #10
 800517e:	d004      	beq.n	800518a <_puts_r+0xb6>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	6022      	str	r2, [r4, #0]
 8005186:	7019      	strb	r1, [r3, #0]
 8005188:	e7c5      	b.n	8005116 <_puts_r+0x42>
 800518a:	4622      	mov	r2, r4
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f817 	bl	80051c0 <__swbuf_r>
 8005192:	3001      	adds	r0, #1
 8005194:	d1bf      	bne.n	8005116 <_puts_r+0x42>
 8005196:	e7df      	b.n	8005158 <_puts_r+0x84>
 8005198:	250a      	movs	r5, #10
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	6022      	str	r2, [r4, #0]
 80051a0:	701d      	strb	r5, [r3, #0]
 80051a2:	e7db      	b.n	800515c <_puts_r+0x88>
 80051a4:	08005b54 	.word	0x08005b54
 80051a8:	08005b74 	.word	0x08005b74
 80051ac:	08005b34 	.word	0x08005b34

080051b0 <puts>:
 80051b0:	4b02      	ldr	r3, [pc, #8]	; (80051bc <puts+0xc>)
 80051b2:	4601      	mov	r1, r0
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	f7ff bf8d 	b.w	80050d4 <_puts_r>
 80051ba:	bf00      	nop
 80051bc:	20000024 	.word	0x20000024

080051c0 <__swbuf_r>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	460e      	mov	r6, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	4605      	mov	r5, r0
 80051c8:	b118      	cbz	r0, 80051d2 <__swbuf_r+0x12>
 80051ca:	6983      	ldr	r3, [r0, #24]
 80051cc:	b90b      	cbnz	r3, 80051d2 <__swbuf_r+0x12>
 80051ce:	f000 f9cd 	bl	800556c <__sinit>
 80051d2:	4b21      	ldr	r3, [pc, #132]	; (8005258 <__swbuf_r+0x98>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	d12b      	bne.n	8005230 <__swbuf_r+0x70>
 80051d8:	686c      	ldr	r4, [r5, #4]
 80051da:	69a3      	ldr	r3, [r4, #24]
 80051dc:	60a3      	str	r3, [r4, #8]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	071a      	lsls	r2, r3, #28
 80051e2:	d52f      	bpl.n	8005244 <__swbuf_r+0x84>
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	b36b      	cbz	r3, 8005244 <__swbuf_r+0x84>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	6820      	ldr	r0, [r4, #0]
 80051ec:	b2f6      	uxtb	r6, r6
 80051ee:	1ac0      	subs	r0, r0, r3
 80051f0:	6963      	ldr	r3, [r4, #20]
 80051f2:	4637      	mov	r7, r6
 80051f4:	4283      	cmp	r3, r0
 80051f6:	dc04      	bgt.n	8005202 <__swbuf_r+0x42>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 f922 	bl	8005444 <_fflush_r>
 8005200:	bb30      	cbnz	r0, 8005250 <__swbuf_r+0x90>
 8005202:	68a3      	ldr	r3, [r4, #8]
 8005204:	3001      	adds	r0, #1
 8005206:	3b01      	subs	r3, #1
 8005208:	60a3      	str	r3, [r4, #8]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	6022      	str	r2, [r4, #0]
 8005210:	701e      	strb	r6, [r3, #0]
 8005212:	6963      	ldr	r3, [r4, #20]
 8005214:	4283      	cmp	r3, r0
 8005216:	d004      	beq.n	8005222 <__swbuf_r+0x62>
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	07db      	lsls	r3, r3, #31
 800521c:	d506      	bpl.n	800522c <__swbuf_r+0x6c>
 800521e:	2e0a      	cmp	r6, #10
 8005220:	d104      	bne.n	800522c <__swbuf_r+0x6c>
 8005222:	4621      	mov	r1, r4
 8005224:	4628      	mov	r0, r5
 8005226:	f000 f90d 	bl	8005444 <_fflush_r>
 800522a:	b988      	cbnz	r0, 8005250 <__swbuf_r+0x90>
 800522c:	4638      	mov	r0, r7
 800522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <__swbuf_r+0x9c>)
 8005232:	429c      	cmp	r4, r3
 8005234:	d101      	bne.n	800523a <__swbuf_r+0x7a>
 8005236:	68ac      	ldr	r4, [r5, #8]
 8005238:	e7cf      	b.n	80051da <__swbuf_r+0x1a>
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <__swbuf_r+0xa0>)
 800523c:	429c      	cmp	r4, r3
 800523e:	bf08      	it	eq
 8005240:	68ec      	ldreq	r4, [r5, #12]
 8005242:	e7ca      	b.n	80051da <__swbuf_r+0x1a>
 8005244:	4621      	mov	r1, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f80c 	bl	8005264 <__swsetup_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	d0cb      	beq.n	80051e8 <__swbuf_r+0x28>
 8005250:	f04f 37ff 	mov.w	r7, #4294967295
 8005254:	e7ea      	b.n	800522c <__swbuf_r+0x6c>
 8005256:	bf00      	nop
 8005258:	08005b54 	.word	0x08005b54
 800525c:	08005b74 	.word	0x08005b74
 8005260:	08005b34 	.word	0x08005b34

08005264 <__swsetup_r>:
 8005264:	4b32      	ldr	r3, [pc, #200]	; (8005330 <__swsetup_r+0xcc>)
 8005266:	b570      	push	{r4, r5, r6, lr}
 8005268:	681d      	ldr	r5, [r3, #0]
 800526a:	4606      	mov	r6, r0
 800526c:	460c      	mov	r4, r1
 800526e:	b125      	cbz	r5, 800527a <__swsetup_r+0x16>
 8005270:	69ab      	ldr	r3, [r5, #24]
 8005272:	b913      	cbnz	r3, 800527a <__swsetup_r+0x16>
 8005274:	4628      	mov	r0, r5
 8005276:	f000 f979 	bl	800556c <__sinit>
 800527a:	4b2e      	ldr	r3, [pc, #184]	; (8005334 <__swsetup_r+0xd0>)
 800527c:	429c      	cmp	r4, r3
 800527e:	d10f      	bne.n	80052a0 <__swsetup_r+0x3c>
 8005280:	686c      	ldr	r4, [r5, #4]
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005288:	0719      	lsls	r1, r3, #28
 800528a:	d42c      	bmi.n	80052e6 <__swsetup_r+0x82>
 800528c:	06dd      	lsls	r5, r3, #27
 800528e:	d411      	bmi.n	80052b4 <__swsetup_r+0x50>
 8005290:	2309      	movs	r3, #9
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	e03e      	b.n	800531e <__swsetup_r+0xba>
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <__swsetup_r+0xd4>)
 80052a2:	429c      	cmp	r4, r3
 80052a4:	d101      	bne.n	80052aa <__swsetup_r+0x46>
 80052a6:	68ac      	ldr	r4, [r5, #8]
 80052a8:	e7eb      	b.n	8005282 <__swsetup_r+0x1e>
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <__swsetup_r+0xd8>)
 80052ac:	429c      	cmp	r4, r3
 80052ae:	bf08      	it	eq
 80052b0:	68ec      	ldreq	r4, [r5, #12]
 80052b2:	e7e6      	b.n	8005282 <__swsetup_r+0x1e>
 80052b4:	0758      	lsls	r0, r3, #29
 80052b6:	d512      	bpl.n	80052de <__swsetup_r+0x7a>
 80052b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ba:	b141      	cbz	r1, 80052ce <__swsetup_r+0x6a>
 80052bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052c0:	4299      	cmp	r1, r3
 80052c2:	d002      	beq.n	80052ca <__swsetup_r+0x66>
 80052c4:	4630      	mov	r0, r6
 80052c6:	f000 fa57 	bl	8005778 <_free_r>
 80052ca:	2300      	movs	r3, #0
 80052cc:	6363      	str	r3, [r4, #52]	; 0x34
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	2300      	movs	r3, #0
 80052d8:	6063      	str	r3, [r4, #4]
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f043 0308 	orr.w	r3, r3, #8
 80052e4:	81a3      	strh	r3, [r4, #12]
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	b94b      	cbnz	r3, 80052fe <__swsetup_r+0x9a>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	d003      	beq.n	80052fe <__swsetup_r+0x9a>
 80052f6:	4621      	mov	r1, r4
 80052f8:	4630      	mov	r0, r6
 80052fa:	f000 f9fd 	bl	80056f8 <__smakebuf_r>
 80052fe:	89a0      	ldrh	r0, [r4, #12]
 8005300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005304:	f010 0301 	ands.w	r3, r0, #1
 8005308:	d00a      	beq.n	8005320 <__swsetup_r+0xbc>
 800530a:	2300      	movs	r3, #0
 800530c:	60a3      	str	r3, [r4, #8]
 800530e:	6963      	ldr	r3, [r4, #20]
 8005310:	425b      	negs	r3, r3
 8005312:	61a3      	str	r3, [r4, #24]
 8005314:	6923      	ldr	r3, [r4, #16]
 8005316:	b943      	cbnz	r3, 800532a <__swsetup_r+0xc6>
 8005318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800531c:	d1ba      	bne.n	8005294 <__swsetup_r+0x30>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	0781      	lsls	r1, r0, #30
 8005322:	bf58      	it	pl
 8005324:	6963      	ldrpl	r3, [r4, #20]
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	e7f4      	b.n	8005314 <__swsetup_r+0xb0>
 800532a:	2000      	movs	r0, #0
 800532c:	e7f7      	b.n	800531e <__swsetup_r+0xba>
 800532e:	bf00      	nop
 8005330:	20000024 	.word	0x20000024
 8005334:	08005b54 	.word	0x08005b54
 8005338:	08005b74 	.word	0x08005b74
 800533c:	08005b34 	.word	0x08005b34

08005340 <__sflush_r>:
 8005340:	898a      	ldrh	r2, [r1, #12]
 8005342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005344:	4605      	mov	r5, r0
 8005346:	0710      	lsls	r0, r2, #28
 8005348:	460c      	mov	r4, r1
 800534a:	d457      	bmi.n	80053fc <__sflush_r+0xbc>
 800534c:	684b      	ldr	r3, [r1, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	dc04      	bgt.n	800535c <__sflush_r+0x1c>
 8005352:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	dc01      	bgt.n	800535c <__sflush_r+0x1c>
 8005358:	2000      	movs	r0, #0
 800535a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800535c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800535e:	2e00      	cmp	r6, #0
 8005360:	d0fa      	beq.n	8005358 <__sflush_r+0x18>
 8005362:	2300      	movs	r3, #0
 8005364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005368:	682f      	ldr	r7, [r5, #0]
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	d032      	beq.n	80053d4 <__sflush_r+0x94>
 800536e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	075a      	lsls	r2, r3, #29
 8005374:	d505      	bpl.n	8005382 <__sflush_r+0x42>
 8005376:	6863      	ldr	r3, [r4, #4]
 8005378:	1ac0      	subs	r0, r0, r3
 800537a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800537c:	b10b      	cbz	r3, 8005382 <__sflush_r+0x42>
 800537e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005380:	1ac0      	subs	r0, r0, r3
 8005382:	2300      	movs	r3, #0
 8005384:	4602      	mov	r2, r0
 8005386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005388:	4628      	mov	r0, r5
 800538a:	6a21      	ldr	r1, [r4, #32]
 800538c:	47b0      	blx	r6
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	d106      	bne.n	80053a2 <__sflush_r+0x62>
 8005394:	6829      	ldr	r1, [r5, #0]
 8005396:	291d      	cmp	r1, #29
 8005398:	d82c      	bhi.n	80053f4 <__sflush_r+0xb4>
 800539a:	4a29      	ldr	r2, [pc, #164]	; (8005440 <__sflush_r+0x100>)
 800539c:	40ca      	lsrs	r2, r1
 800539e:	07d6      	lsls	r6, r2, #31
 80053a0:	d528      	bpl.n	80053f4 <__sflush_r+0xb4>
 80053a2:	2200      	movs	r2, #0
 80053a4:	6062      	str	r2, [r4, #4]
 80053a6:	6922      	ldr	r2, [r4, #16]
 80053a8:	04d9      	lsls	r1, r3, #19
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	d504      	bpl.n	80053b8 <__sflush_r+0x78>
 80053ae:	1c42      	adds	r2, r0, #1
 80053b0:	d101      	bne.n	80053b6 <__sflush_r+0x76>
 80053b2:	682b      	ldr	r3, [r5, #0]
 80053b4:	b903      	cbnz	r3, 80053b8 <__sflush_r+0x78>
 80053b6:	6560      	str	r0, [r4, #84]	; 0x54
 80053b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ba:	602f      	str	r7, [r5, #0]
 80053bc:	2900      	cmp	r1, #0
 80053be:	d0cb      	beq.n	8005358 <__sflush_r+0x18>
 80053c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c4:	4299      	cmp	r1, r3
 80053c6:	d002      	beq.n	80053ce <__sflush_r+0x8e>
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 f9d5 	bl	8005778 <_free_r>
 80053ce:	2000      	movs	r0, #0
 80053d0:	6360      	str	r0, [r4, #52]	; 0x34
 80053d2:	e7c2      	b.n	800535a <__sflush_r+0x1a>
 80053d4:	6a21      	ldr	r1, [r4, #32]
 80053d6:	2301      	movs	r3, #1
 80053d8:	4628      	mov	r0, r5
 80053da:	47b0      	blx	r6
 80053dc:	1c41      	adds	r1, r0, #1
 80053de:	d1c7      	bne.n	8005370 <__sflush_r+0x30>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0c4      	beq.n	8005370 <__sflush_r+0x30>
 80053e6:	2b1d      	cmp	r3, #29
 80053e8:	d001      	beq.n	80053ee <__sflush_r+0xae>
 80053ea:	2b16      	cmp	r3, #22
 80053ec:	d101      	bne.n	80053f2 <__sflush_r+0xb2>
 80053ee:	602f      	str	r7, [r5, #0]
 80053f0:	e7b2      	b.n	8005358 <__sflush_r+0x18>
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f8:	81a3      	strh	r3, [r4, #12]
 80053fa:	e7ae      	b.n	800535a <__sflush_r+0x1a>
 80053fc:	690f      	ldr	r7, [r1, #16]
 80053fe:	2f00      	cmp	r7, #0
 8005400:	d0aa      	beq.n	8005358 <__sflush_r+0x18>
 8005402:	0793      	lsls	r3, r2, #30
 8005404:	bf18      	it	ne
 8005406:	2300      	movne	r3, #0
 8005408:	680e      	ldr	r6, [r1, #0]
 800540a:	bf08      	it	eq
 800540c:	694b      	ldreq	r3, [r1, #20]
 800540e:	1bf6      	subs	r6, r6, r7
 8005410:	600f      	str	r7, [r1, #0]
 8005412:	608b      	str	r3, [r1, #8]
 8005414:	2e00      	cmp	r6, #0
 8005416:	dd9f      	ble.n	8005358 <__sflush_r+0x18>
 8005418:	4633      	mov	r3, r6
 800541a:	463a      	mov	r2, r7
 800541c:	4628      	mov	r0, r5
 800541e:	6a21      	ldr	r1, [r4, #32]
 8005420:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005424:	47e0      	blx	ip
 8005426:	2800      	cmp	r0, #0
 8005428:	dc06      	bgt.n	8005438 <__sflush_r+0xf8>
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	e790      	b.n	800535a <__sflush_r+0x1a>
 8005438:	4407      	add	r7, r0
 800543a:	1a36      	subs	r6, r6, r0
 800543c:	e7ea      	b.n	8005414 <__sflush_r+0xd4>
 800543e:	bf00      	nop
 8005440:	20400001 	.word	0x20400001

08005444 <_fflush_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	4605      	mov	r5, r0
 800544a:	460c      	mov	r4, r1
 800544c:	b913      	cbnz	r3, 8005454 <_fflush_r+0x10>
 800544e:	2500      	movs	r5, #0
 8005450:	4628      	mov	r0, r5
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	b118      	cbz	r0, 800545e <_fflush_r+0x1a>
 8005456:	6983      	ldr	r3, [r0, #24]
 8005458:	b90b      	cbnz	r3, 800545e <_fflush_r+0x1a>
 800545a:	f000 f887 	bl	800556c <__sinit>
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <_fflush_r+0x6c>)
 8005460:	429c      	cmp	r4, r3
 8005462:	d11b      	bne.n	800549c <_fflush_r+0x58>
 8005464:	686c      	ldr	r4, [r5, #4]
 8005466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ef      	beq.n	800544e <_fflush_r+0xa>
 800546e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005470:	07d0      	lsls	r0, r2, #31
 8005472:	d404      	bmi.n	800547e <_fflush_r+0x3a>
 8005474:	0599      	lsls	r1, r3, #22
 8005476:	d402      	bmi.n	800547e <_fflush_r+0x3a>
 8005478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547a:	f000 f915 	bl	80056a8 <__retarget_lock_acquire_recursive>
 800547e:	4628      	mov	r0, r5
 8005480:	4621      	mov	r1, r4
 8005482:	f7ff ff5d 	bl	8005340 <__sflush_r>
 8005486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005488:	4605      	mov	r5, r0
 800548a:	07da      	lsls	r2, r3, #31
 800548c:	d4e0      	bmi.n	8005450 <_fflush_r+0xc>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	059b      	lsls	r3, r3, #22
 8005492:	d4dd      	bmi.n	8005450 <_fflush_r+0xc>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f000 f908 	bl	80056aa <__retarget_lock_release_recursive>
 800549a:	e7d9      	b.n	8005450 <_fflush_r+0xc>
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <_fflush_r+0x70>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	d101      	bne.n	80054a6 <_fflush_r+0x62>
 80054a2:	68ac      	ldr	r4, [r5, #8]
 80054a4:	e7df      	b.n	8005466 <_fflush_r+0x22>
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <_fflush_r+0x74>)
 80054a8:	429c      	cmp	r4, r3
 80054aa:	bf08      	it	eq
 80054ac:	68ec      	ldreq	r4, [r5, #12]
 80054ae:	e7da      	b.n	8005466 <_fflush_r+0x22>
 80054b0:	08005b54 	.word	0x08005b54
 80054b4:	08005b74 	.word	0x08005b74
 80054b8:	08005b34 	.word	0x08005b34

080054bc <std>:
 80054bc:	2300      	movs	r3, #0
 80054be:	b510      	push	{r4, lr}
 80054c0:	4604      	mov	r4, r0
 80054c2:	e9c0 3300 	strd	r3, r3, [r0]
 80054c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ca:	6083      	str	r3, [r0, #8]
 80054cc:	8181      	strh	r1, [r0, #12]
 80054ce:	6643      	str	r3, [r0, #100]	; 0x64
 80054d0:	81c2      	strh	r2, [r0, #14]
 80054d2:	6183      	str	r3, [r0, #24]
 80054d4:	4619      	mov	r1, r3
 80054d6:	2208      	movs	r2, #8
 80054d8:	305c      	adds	r0, #92	; 0x5c
 80054da:	f7ff fdf3 	bl	80050c4 <memset>
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <std+0x38>)
 80054e0:	6224      	str	r4, [r4, #32]
 80054e2:	6263      	str	r3, [r4, #36]	; 0x24
 80054e4:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <std+0x3c>)
 80054e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80054e8:	4b04      	ldr	r3, [pc, #16]	; (80054fc <std+0x40>)
 80054ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ec:	4b04      	ldr	r3, [pc, #16]	; (8005500 <std+0x44>)
 80054ee:	6323      	str	r3, [r4, #48]	; 0x30
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	bf00      	nop
 80054f4:	08005951 	.word	0x08005951
 80054f8:	08005973 	.word	0x08005973
 80054fc:	080059ab 	.word	0x080059ab
 8005500:	080059cf 	.word	0x080059cf

08005504 <_cleanup_r>:
 8005504:	4901      	ldr	r1, [pc, #4]	; (800550c <_cleanup_r+0x8>)
 8005506:	f000 b8af 	b.w	8005668 <_fwalk_reent>
 800550a:	bf00      	nop
 800550c:	08005445 	.word	0x08005445

08005510 <__sfmoreglue>:
 8005510:	2268      	movs	r2, #104	; 0x68
 8005512:	b570      	push	{r4, r5, r6, lr}
 8005514:	1e4d      	subs	r5, r1, #1
 8005516:	4355      	muls	r5, r2
 8005518:	460e      	mov	r6, r1
 800551a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800551e:	f000 f993 	bl	8005848 <_malloc_r>
 8005522:	4604      	mov	r4, r0
 8005524:	b140      	cbz	r0, 8005538 <__sfmoreglue+0x28>
 8005526:	2100      	movs	r1, #0
 8005528:	e9c0 1600 	strd	r1, r6, [r0]
 800552c:	300c      	adds	r0, #12
 800552e:	60a0      	str	r0, [r4, #8]
 8005530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005534:	f7ff fdc6 	bl	80050c4 <memset>
 8005538:	4620      	mov	r0, r4
 800553a:	bd70      	pop	{r4, r5, r6, pc}

0800553c <__sfp_lock_acquire>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__sfp_lock_acquire+0x8>)
 800553e:	f000 b8b3 	b.w	80056a8 <__retarget_lock_acquire_recursive>
 8005542:	bf00      	nop
 8005544:	200002c5 	.word	0x200002c5

08005548 <__sfp_lock_release>:
 8005548:	4801      	ldr	r0, [pc, #4]	; (8005550 <__sfp_lock_release+0x8>)
 800554a:	f000 b8ae 	b.w	80056aa <__retarget_lock_release_recursive>
 800554e:	bf00      	nop
 8005550:	200002c5 	.word	0x200002c5

08005554 <__sinit_lock_acquire>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__sinit_lock_acquire+0x8>)
 8005556:	f000 b8a7 	b.w	80056a8 <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	200002c6 	.word	0x200002c6

08005560 <__sinit_lock_release>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__sinit_lock_release+0x8>)
 8005562:	f000 b8a2 	b.w	80056aa <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	200002c6 	.word	0x200002c6

0800556c <__sinit>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	f7ff fff0 	bl	8005554 <__sinit_lock_acquire>
 8005574:	69a3      	ldr	r3, [r4, #24]
 8005576:	b11b      	cbz	r3, 8005580 <__sinit+0x14>
 8005578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800557c:	f7ff bff0 	b.w	8005560 <__sinit_lock_release>
 8005580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005584:	6523      	str	r3, [r4, #80]	; 0x50
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <__sinit+0x68>)
 8005588:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <__sinit+0x6c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	62a2      	str	r2, [r4, #40]	; 0x28
 800558e:	42a3      	cmp	r3, r4
 8005590:	bf08      	it	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	4620      	mov	r0, r4
 8005596:	bf08      	it	eq
 8005598:	61a3      	streq	r3, [r4, #24]
 800559a:	f000 f81f 	bl	80055dc <__sfp>
 800559e:	6060      	str	r0, [r4, #4]
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 f81b 	bl	80055dc <__sfp>
 80055a6:	60a0      	str	r0, [r4, #8]
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 f817 	bl	80055dc <__sfp>
 80055ae:	2200      	movs	r2, #0
 80055b0:	2104      	movs	r1, #4
 80055b2:	60e0      	str	r0, [r4, #12]
 80055b4:	6860      	ldr	r0, [r4, #4]
 80055b6:	f7ff ff81 	bl	80054bc <std>
 80055ba:	2201      	movs	r2, #1
 80055bc:	2109      	movs	r1, #9
 80055be:	68a0      	ldr	r0, [r4, #8]
 80055c0:	f7ff ff7c 	bl	80054bc <std>
 80055c4:	2202      	movs	r2, #2
 80055c6:	2112      	movs	r1, #18
 80055c8:	68e0      	ldr	r0, [r4, #12]
 80055ca:	f7ff ff77 	bl	80054bc <std>
 80055ce:	2301      	movs	r3, #1
 80055d0:	61a3      	str	r3, [r4, #24]
 80055d2:	e7d1      	b.n	8005578 <__sinit+0xc>
 80055d4:	08005b30 	.word	0x08005b30
 80055d8:	08005505 	.word	0x08005505

080055dc <__sfp>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	4607      	mov	r7, r0
 80055e0:	f7ff ffac 	bl	800553c <__sfp_lock_acquire>
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <__sfp+0x84>)
 80055e6:	681e      	ldr	r6, [r3, #0]
 80055e8:	69b3      	ldr	r3, [r6, #24]
 80055ea:	b913      	cbnz	r3, 80055f2 <__sfp+0x16>
 80055ec:	4630      	mov	r0, r6
 80055ee:	f7ff ffbd 	bl	800556c <__sinit>
 80055f2:	3648      	adds	r6, #72	; 0x48
 80055f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	d503      	bpl.n	8005604 <__sfp+0x28>
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	b30b      	cbz	r3, 8005644 <__sfp+0x68>
 8005600:	6836      	ldr	r6, [r6, #0]
 8005602:	e7f7      	b.n	80055f4 <__sfp+0x18>
 8005604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005608:	b9d5      	cbnz	r5, 8005640 <__sfp+0x64>
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <__sfp+0x88>)
 800560c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005610:	60e3      	str	r3, [r4, #12]
 8005612:	6665      	str	r5, [r4, #100]	; 0x64
 8005614:	f000 f847 	bl	80056a6 <__retarget_lock_init_recursive>
 8005618:	f7ff ff96 	bl	8005548 <__sfp_lock_release>
 800561c:	2208      	movs	r2, #8
 800561e:	4629      	mov	r1, r5
 8005620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005628:	6025      	str	r5, [r4, #0]
 800562a:	61a5      	str	r5, [r4, #24]
 800562c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005630:	f7ff fd48 	bl	80050c4 <memset>
 8005634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800563c:	4620      	mov	r0, r4
 800563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005640:	3468      	adds	r4, #104	; 0x68
 8005642:	e7d9      	b.n	80055f8 <__sfp+0x1c>
 8005644:	2104      	movs	r1, #4
 8005646:	4638      	mov	r0, r7
 8005648:	f7ff ff62 	bl	8005510 <__sfmoreglue>
 800564c:	4604      	mov	r4, r0
 800564e:	6030      	str	r0, [r6, #0]
 8005650:	2800      	cmp	r0, #0
 8005652:	d1d5      	bne.n	8005600 <__sfp+0x24>
 8005654:	f7ff ff78 	bl	8005548 <__sfp_lock_release>
 8005658:	230c      	movs	r3, #12
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	e7ee      	b.n	800563c <__sfp+0x60>
 800565e:	bf00      	nop
 8005660:	08005b30 	.word	0x08005b30
 8005664:	ffff0001 	.word	0xffff0001

08005668 <_fwalk_reent>:
 8005668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800566c:	4606      	mov	r6, r0
 800566e:	4688      	mov	r8, r1
 8005670:	2700      	movs	r7, #0
 8005672:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800567a:	f1b9 0901 	subs.w	r9, r9, #1
 800567e:	d505      	bpl.n	800568c <_fwalk_reent+0x24>
 8005680:	6824      	ldr	r4, [r4, #0]
 8005682:	2c00      	cmp	r4, #0
 8005684:	d1f7      	bne.n	8005676 <_fwalk_reent+0xe>
 8005686:	4638      	mov	r0, r7
 8005688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d907      	bls.n	80056a2 <_fwalk_reent+0x3a>
 8005692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005696:	3301      	adds	r3, #1
 8005698:	d003      	beq.n	80056a2 <_fwalk_reent+0x3a>
 800569a:	4629      	mov	r1, r5
 800569c:	4630      	mov	r0, r6
 800569e:	47c0      	blx	r8
 80056a0:	4307      	orrs	r7, r0
 80056a2:	3568      	adds	r5, #104	; 0x68
 80056a4:	e7e9      	b.n	800567a <_fwalk_reent+0x12>

080056a6 <__retarget_lock_init_recursive>:
 80056a6:	4770      	bx	lr

080056a8 <__retarget_lock_acquire_recursive>:
 80056a8:	4770      	bx	lr

080056aa <__retarget_lock_release_recursive>:
 80056aa:	4770      	bx	lr

080056ac <__swhatbuf_r>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	460e      	mov	r6, r1
 80056b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b4:	4614      	mov	r4, r2
 80056b6:	2900      	cmp	r1, #0
 80056b8:	461d      	mov	r5, r3
 80056ba:	b096      	sub	sp, #88	; 0x58
 80056bc:	da08      	bge.n	80056d0 <__swhatbuf_r+0x24>
 80056be:	2200      	movs	r2, #0
 80056c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056c4:	602a      	str	r2, [r5, #0]
 80056c6:	061a      	lsls	r2, r3, #24
 80056c8:	d410      	bmi.n	80056ec <__swhatbuf_r+0x40>
 80056ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ce:	e00e      	b.n	80056ee <__swhatbuf_r+0x42>
 80056d0:	466a      	mov	r2, sp
 80056d2:	f000 f9a3 	bl	8005a1c <_fstat_r>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	dbf1      	blt.n	80056be <__swhatbuf_r+0x12>
 80056da:	9a01      	ldr	r2, [sp, #4]
 80056dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056e4:	425a      	negs	r2, r3
 80056e6:	415a      	adcs	r2, r3
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	e7ee      	b.n	80056ca <__swhatbuf_r+0x1e>
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	2000      	movs	r0, #0
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	b016      	add	sp, #88	; 0x58
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080056f8 <__smakebuf_r>:
 80056f8:	898b      	ldrh	r3, [r1, #12]
 80056fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056fc:	079d      	lsls	r5, r3, #30
 80056fe:	4606      	mov	r6, r0
 8005700:	460c      	mov	r4, r1
 8005702:	d507      	bpl.n	8005714 <__smakebuf_r+0x1c>
 8005704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	6123      	str	r3, [r4, #16]
 800570c:	2301      	movs	r3, #1
 800570e:	6163      	str	r3, [r4, #20]
 8005710:	b002      	add	sp, #8
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	466a      	mov	r2, sp
 8005716:	ab01      	add	r3, sp, #4
 8005718:	f7ff ffc8 	bl	80056ac <__swhatbuf_r>
 800571c:	9900      	ldr	r1, [sp, #0]
 800571e:	4605      	mov	r5, r0
 8005720:	4630      	mov	r0, r6
 8005722:	f000 f891 	bl	8005848 <_malloc_r>
 8005726:	b948      	cbnz	r0, 800573c <__smakebuf_r+0x44>
 8005728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800572c:	059a      	lsls	r2, r3, #22
 800572e:	d4ef      	bmi.n	8005710 <__smakebuf_r+0x18>
 8005730:	f023 0303 	bic.w	r3, r3, #3
 8005734:	f043 0302 	orr.w	r3, r3, #2
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	e7e3      	b.n	8005704 <__smakebuf_r+0xc>
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <__smakebuf_r+0x7c>)
 800573e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	6020      	str	r0, [r4, #0]
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	9b00      	ldr	r3, [sp, #0]
 800574c:	6120      	str	r0, [r4, #16]
 800574e:	6163      	str	r3, [r4, #20]
 8005750:	9b01      	ldr	r3, [sp, #4]
 8005752:	b15b      	cbz	r3, 800576c <__smakebuf_r+0x74>
 8005754:	4630      	mov	r0, r6
 8005756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800575a:	f000 f971 	bl	8005a40 <_isatty_r>
 800575e:	b128      	cbz	r0, 800576c <__smakebuf_r+0x74>
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	89a0      	ldrh	r0, [r4, #12]
 800576e:	4305      	orrs	r5, r0
 8005770:	81a5      	strh	r5, [r4, #12]
 8005772:	e7cd      	b.n	8005710 <__smakebuf_r+0x18>
 8005774:	08005505 	.word	0x08005505

08005778 <_free_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4605      	mov	r5, r0
 800577c:	2900      	cmp	r1, #0
 800577e:	d040      	beq.n	8005802 <_free_r+0x8a>
 8005780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005784:	1f0c      	subs	r4, r1, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfb8      	it	lt
 800578a:	18e4      	addlt	r4, r4, r3
 800578c:	f000 f97a 	bl	8005a84 <__malloc_lock>
 8005790:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <_free_r+0x8c>)
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	b933      	cbnz	r3, 80057a4 <_free_r+0x2c>
 8005796:	6063      	str	r3, [r4, #4]
 8005798:	6014      	str	r4, [r2, #0]
 800579a:	4628      	mov	r0, r5
 800579c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a0:	f000 b976 	b.w	8005a90 <__malloc_unlock>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d908      	bls.n	80057ba <_free_r+0x42>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	1821      	adds	r1, r4, r0
 80057ac:	428b      	cmp	r3, r1
 80057ae:	bf01      	itttt	eq
 80057b0:	6819      	ldreq	r1, [r3, #0]
 80057b2:	685b      	ldreq	r3, [r3, #4]
 80057b4:	1809      	addeq	r1, r1, r0
 80057b6:	6021      	streq	r1, [r4, #0]
 80057b8:	e7ed      	b.n	8005796 <_free_r+0x1e>
 80057ba:	461a      	mov	r2, r3
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b10b      	cbz	r3, 80057c4 <_free_r+0x4c>
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d9fa      	bls.n	80057ba <_free_r+0x42>
 80057c4:	6811      	ldr	r1, [r2, #0]
 80057c6:	1850      	adds	r0, r2, r1
 80057c8:	42a0      	cmp	r0, r4
 80057ca:	d10b      	bne.n	80057e4 <_free_r+0x6c>
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	4401      	add	r1, r0
 80057d0:	1850      	adds	r0, r2, r1
 80057d2:	4283      	cmp	r3, r0
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	d1e0      	bne.n	800579a <_free_r+0x22>
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4401      	add	r1, r0
 80057de:	6011      	str	r1, [r2, #0]
 80057e0:	6053      	str	r3, [r2, #4]
 80057e2:	e7da      	b.n	800579a <_free_r+0x22>
 80057e4:	d902      	bls.n	80057ec <_free_r+0x74>
 80057e6:	230c      	movs	r3, #12
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	e7d6      	b.n	800579a <_free_r+0x22>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	1821      	adds	r1, r4, r0
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf01      	itttt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	1809      	addeq	r1, r1, r0
 80057fa:	6021      	streq	r1, [r4, #0]
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	6054      	str	r4, [r2, #4]
 8005800:	e7cb      	b.n	800579a <_free_r+0x22>
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	200002c8 	.word	0x200002c8

08005808 <sbrk_aligned>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	4e0e      	ldr	r6, [pc, #56]	; (8005844 <sbrk_aligned+0x3c>)
 800580c:	460c      	mov	r4, r1
 800580e:	6831      	ldr	r1, [r6, #0]
 8005810:	4605      	mov	r5, r0
 8005812:	b911      	cbnz	r1, 800581a <sbrk_aligned+0x12>
 8005814:	f000 f88c 	bl	8005930 <_sbrk_r>
 8005818:	6030      	str	r0, [r6, #0]
 800581a:	4621      	mov	r1, r4
 800581c:	4628      	mov	r0, r5
 800581e:	f000 f887 	bl	8005930 <_sbrk_r>
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	d00a      	beq.n	800583c <sbrk_aligned+0x34>
 8005826:	1cc4      	adds	r4, r0, #3
 8005828:	f024 0403 	bic.w	r4, r4, #3
 800582c:	42a0      	cmp	r0, r4
 800582e:	d007      	beq.n	8005840 <sbrk_aligned+0x38>
 8005830:	1a21      	subs	r1, r4, r0
 8005832:	4628      	mov	r0, r5
 8005834:	f000 f87c 	bl	8005930 <_sbrk_r>
 8005838:	3001      	adds	r0, #1
 800583a:	d101      	bne.n	8005840 <sbrk_aligned+0x38>
 800583c:	f04f 34ff 	mov.w	r4, #4294967295
 8005840:	4620      	mov	r0, r4
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	200002cc 	.word	0x200002cc

08005848 <_malloc_r>:
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	1ccd      	adds	r5, r1, #3
 800584e:	f025 0503 	bic.w	r5, r5, #3
 8005852:	3508      	adds	r5, #8
 8005854:	2d0c      	cmp	r5, #12
 8005856:	bf38      	it	cc
 8005858:	250c      	movcc	r5, #12
 800585a:	2d00      	cmp	r5, #0
 800585c:	4607      	mov	r7, r0
 800585e:	db01      	blt.n	8005864 <_malloc_r+0x1c>
 8005860:	42a9      	cmp	r1, r5
 8005862:	d905      	bls.n	8005870 <_malloc_r+0x28>
 8005864:	230c      	movs	r3, #12
 8005866:	2600      	movs	r6, #0
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	4630      	mov	r0, r6
 800586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005870:	4e2e      	ldr	r6, [pc, #184]	; (800592c <_malloc_r+0xe4>)
 8005872:	f000 f907 	bl	8005a84 <__malloc_lock>
 8005876:	6833      	ldr	r3, [r6, #0]
 8005878:	461c      	mov	r4, r3
 800587a:	bb34      	cbnz	r4, 80058ca <_malloc_r+0x82>
 800587c:	4629      	mov	r1, r5
 800587e:	4638      	mov	r0, r7
 8005880:	f7ff ffc2 	bl	8005808 <sbrk_aligned>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	4604      	mov	r4, r0
 8005888:	d14d      	bne.n	8005926 <_malloc_r+0xde>
 800588a:	6834      	ldr	r4, [r6, #0]
 800588c:	4626      	mov	r6, r4
 800588e:	2e00      	cmp	r6, #0
 8005890:	d140      	bne.n	8005914 <_malloc_r+0xcc>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	4631      	mov	r1, r6
 8005896:	4638      	mov	r0, r7
 8005898:	eb04 0803 	add.w	r8, r4, r3
 800589c:	f000 f848 	bl	8005930 <_sbrk_r>
 80058a0:	4580      	cmp	r8, r0
 80058a2:	d13a      	bne.n	800591a <_malloc_r+0xd2>
 80058a4:	6821      	ldr	r1, [r4, #0]
 80058a6:	3503      	adds	r5, #3
 80058a8:	1a6d      	subs	r5, r5, r1
 80058aa:	f025 0503 	bic.w	r5, r5, #3
 80058ae:	3508      	adds	r5, #8
 80058b0:	2d0c      	cmp	r5, #12
 80058b2:	bf38      	it	cc
 80058b4:	250c      	movcc	r5, #12
 80058b6:	4638      	mov	r0, r7
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7ff ffa5 	bl	8005808 <sbrk_aligned>
 80058be:	3001      	adds	r0, #1
 80058c0:	d02b      	beq.n	800591a <_malloc_r+0xd2>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	442b      	add	r3, r5
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	e00e      	b.n	80058e8 <_malloc_r+0xa0>
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	1b52      	subs	r2, r2, r5
 80058ce:	d41e      	bmi.n	800590e <_malloc_r+0xc6>
 80058d0:	2a0b      	cmp	r2, #11
 80058d2:	d916      	bls.n	8005902 <_malloc_r+0xba>
 80058d4:	1961      	adds	r1, r4, r5
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	6025      	str	r5, [r4, #0]
 80058da:	bf18      	it	ne
 80058dc:	6059      	strne	r1, [r3, #4]
 80058de:	6863      	ldr	r3, [r4, #4]
 80058e0:	bf08      	it	eq
 80058e2:	6031      	streq	r1, [r6, #0]
 80058e4:	5162      	str	r2, [r4, r5]
 80058e6:	604b      	str	r3, [r1, #4]
 80058e8:	4638      	mov	r0, r7
 80058ea:	f104 060b 	add.w	r6, r4, #11
 80058ee:	f000 f8cf 	bl	8005a90 <__malloc_unlock>
 80058f2:	f026 0607 	bic.w	r6, r6, #7
 80058f6:	1d23      	adds	r3, r4, #4
 80058f8:	1af2      	subs	r2, r6, r3
 80058fa:	d0b6      	beq.n	800586a <_malloc_r+0x22>
 80058fc:	1b9b      	subs	r3, r3, r6
 80058fe:	50a3      	str	r3, [r4, r2]
 8005900:	e7b3      	b.n	800586a <_malloc_r+0x22>
 8005902:	6862      	ldr	r2, [r4, #4]
 8005904:	42a3      	cmp	r3, r4
 8005906:	bf0c      	ite	eq
 8005908:	6032      	streq	r2, [r6, #0]
 800590a:	605a      	strne	r2, [r3, #4]
 800590c:	e7ec      	b.n	80058e8 <_malloc_r+0xa0>
 800590e:	4623      	mov	r3, r4
 8005910:	6864      	ldr	r4, [r4, #4]
 8005912:	e7b2      	b.n	800587a <_malloc_r+0x32>
 8005914:	4634      	mov	r4, r6
 8005916:	6876      	ldr	r6, [r6, #4]
 8005918:	e7b9      	b.n	800588e <_malloc_r+0x46>
 800591a:	230c      	movs	r3, #12
 800591c:	4638      	mov	r0, r7
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	f000 f8b6 	bl	8005a90 <__malloc_unlock>
 8005924:	e7a1      	b.n	800586a <_malloc_r+0x22>
 8005926:	6025      	str	r5, [r4, #0]
 8005928:	e7de      	b.n	80058e8 <_malloc_r+0xa0>
 800592a:	bf00      	nop
 800592c:	200002c8 	.word	0x200002c8

08005930 <_sbrk_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	2300      	movs	r3, #0
 8005934:	4d05      	ldr	r5, [pc, #20]	; (800594c <_sbrk_r+0x1c>)
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fb fe60 	bl	8001600 <_sbrk>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_sbrk_r+0x1a>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_sbrk_r+0x1a>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	200002d0 	.word	0x200002d0

08005950 <__sread>:
 8005950:	b510      	push	{r4, lr}
 8005952:	460c      	mov	r4, r1
 8005954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005958:	f000 f8a0 	bl	8005a9c <_read_r>
 800595c:	2800      	cmp	r0, #0
 800595e:	bfab      	itete	ge
 8005960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005962:	89a3      	ldrhlt	r3, [r4, #12]
 8005964:	181b      	addge	r3, r3, r0
 8005966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800596a:	bfac      	ite	ge
 800596c:	6563      	strge	r3, [r4, #84]	; 0x54
 800596e:	81a3      	strhlt	r3, [r4, #12]
 8005970:	bd10      	pop	{r4, pc}

08005972 <__swrite>:
 8005972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005976:	461f      	mov	r7, r3
 8005978:	898b      	ldrh	r3, [r1, #12]
 800597a:	4605      	mov	r5, r0
 800597c:	05db      	lsls	r3, r3, #23
 800597e:	460c      	mov	r4, r1
 8005980:	4616      	mov	r6, r2
 8005982:	d505      	bpl.n	8005990 <__swrite+0x1e>
 8005984:	2302      	movs	r3, #2
 8005986:	2200      	movs	r2, #0
 8005988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598c:	f000 f868 	bl	8005a60 <_lseek_r>
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	4632      	mov	r2, r6
 8005994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	4628      	mov	r0, r5
 800599c:	463b      	mov	r3, r7
 800599e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059a6:	f000 b817 	b.w	80059d8 <_write_r>

080059aa <__sseek>:
 80059aa:	b510      	push	{r4, lr}
 80059ac:	460c      	mov	r4, r1
 80059ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b2:	f000 f855 	bl	8005a60 <_lseek_r>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	bf15      	itete	ne
 80059bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80059be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059c6:	81a3      	strheq	r3, [r4, #12]
 80059c8:	bf18      	it	ne
 80059ca:	81a3      	strhne	r3, [r4, #12]
 80059cc:	bd10      	pop	{r4, pc}

080059ce <__sclose>:
 80059ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d2:	f000 b813 	b.w	80059fc <_close_r>
	...

080059d8 <_write_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4604      	mov	r4, r0
 80059dc:	4608      	mov	r0, r1
 80059de:	4611      	mov	r1, r2
 80059e0:	2200      	movs	r2, #0
 80059e2:	4d05      	ldr	r5, [pc, #20]	; (80059f8 <_write_r+0x20>)
 80059e4:	602a      	str	r2, [r5, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f7fb fb4a 	bl	8001080 <_write>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_write_r+0x1e>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_write_r+0x1e>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	200002d0 	.word	0x200002d0

080059fc <_close_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	2300      	movs	r3, #0
 8005a00:	4d05      	ldr	r5, [pc, #20]	; (8005a18 <_close_r+0x1c>)
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	f7fb fdc9 	bl	800159e <_close>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_close_r+0x1a>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_close_r+0x1a>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	200002d0 	.word	0x200002d0

08005a1c <_fstat_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4d06      	ldr	r5, [pc, #24]	; (8005a3c <_fstat_r+0x20>)
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	4611      	mov	r1, r2
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	f7fb fdc3 	bl	80015b4 <_fstat>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	d102      	bne.n	8005a38 <_fstat_r+0x1c>
 8005a32:	682b      	ldr	r3, [r5, #0]
 8005a34:	b103      	cbz	r3, 8005a38 <_fstat_r+0x1c>
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	bd38      	pop	{r3, r4, r5, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200002d0 	.word	0x200002d0

08005a40 <_isatty_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	2300      	movs	r3, #0
 8005a44:	4d05      	ldr	r5, [pc, #20]	; (8005a5c <_isatty_r+0x1c>)
 8005a46:	4604      	mov	r4, r0
 8005a48:	4608      	mov	r0, r1
 8005a4a:	602b      	str	r3, [r5, #0]
 8005a4c:	f7fb fdc1 	bl	80015d2 <_isatty>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_isatty_r+0x1a>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_isatty_r+0x1a>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	200002d0 	.word	0x200002d0

08005a60 <_lseek_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4d05      	ldr	r5, [pc, #20]	; (8005a80 <_lseek_r+0x20>)
 8005a6c:	602a      	str	r2, [r5, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f7fb fdb9 	bl	80015e6 <_lseek>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_lseek_r+0x1e>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_lseek_r+0x1e>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	200002d0 	.word	0x200002d0

08005a84 <__malloc_lock>:
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <__malloc_lock+0x8>)
 8005a86:	f7ff be0f 	b.w	80056a8 <__retarget_lock_acquire_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	200002c4 	.word	0x200002c4

08005a90 <__malloc_unlock>:
 8005a90:	4801      	ldr	r0, [pc, #4]	; (8005a98 <__malloc_unlock+0x8>)
 8005a92:	f7ff be0a 	b.w	80056aa <__retarget_lock_release_recursive>
 8005a96:	bf00      	nop
 8005a98:	200002c4 	.word	0x200002c4

08005a9c <_read_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4d05      	ldr	r5, [pc, #20]	; (8005abc <_read_r+0x20>)
 8005aa8:	602a      	str	r2, [r5, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f7fb fd5a 	bl	8001564 <_read>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d102      	bne.n	8005aba <_read_r+0x1e>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	b103      	cbz	r3, 8005aba <_read_r+0x1e>
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	200002d0 	.word	0x200002d0

08005ac0 <_init>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	bf00      	nop
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr

08005acc <_fini>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr
