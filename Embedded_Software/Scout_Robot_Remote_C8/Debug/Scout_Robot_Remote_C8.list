
Scout_Robot_Remote_C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e84  08004e84  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004e84  08004e84  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e84  08004e84  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000014  08004ea0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004ea0  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f060  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253a  00000000  00000000  0002f09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  000325e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001902a  00000000  00000000  00033500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c6c  00000000  00000000  0004c52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e87  00000000  00000000  0005d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef01d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004400  00000000  00000000  000ef070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e34 	.word	0x08004e34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004e34 	.word	0x08004e34

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <analogInit>:



ADC_HandleTypeDef *adc;

void analogInit(ADC_HandleTypeDef *hadc, uint32_t* dmaArray){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	adc = hadc;
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <analogInit+0x28>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_DMA(adc, dmaArray, 6);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <analogInit+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2206      	movs	r2, #6
 8000772:	6839      	ldr	r1, [r7, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fb7d 	bl	8001e74 <HAL_ADC_Start_DMA>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000030 	.word	0x20000030

08000788 <JS_Init>:

void JS_Init(struct Joystick *JS, uint8_t addr, uint16_t s, uint16_t dZ){
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	4608      	mov	r0, r1
 8000792:	4611      	mov	r1, r2
 8000794:	461a      	mov	r2, r3
 8000796:	4603      	mov	r3, r0
 8000798:	72fb      	strb	r3, [r7, #11]
 800079a:	460b      	mov	r3, r1
 800079c:	813b      	strh	r3, [r7, #8]
 800079e:	4613      	mov	r3, r2
 80007a0:	80fb      	strh	r3, [r7, #6]
	JS->dataAddress = addr;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	7afa      	ldrb	r2, [r7, #11]
 80007a6:	711a      	strb	r2, [r3, #4]
	JS->smoothingFactor = s;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	893a      	ldrh	r2, [r7, #8]
 80007ac:	81da      	strh	r2, [r3, #14]
	JS->position[0] = 0;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2200      	movs	r2, #0
 80007b2:	821a      	strh	r2, [r3, #16]
	JS->position[1] = 0;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2200      	movs	r2, #0
 80007b8:	825a      	strh	r2, [r3, #18]
	JS->smoothedValue[0] = 0;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2200      	movs	r2, #0
 80007be:	815a      	strh	r2, [r3, #10]
	JS->smoothedValue[1] = 0;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2200      	movs	r2, #0
 80007c4:	819a      	strh	r2, [r3, #12]
	JS->deadZone = dZ;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	829a      	strh	r2, [r3, #20]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
	...

080007d8 <JS_Aquisite>:

void JS_Aquisite(struct Joystick *JS, uint16_t *dmaArray){
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af02      	add	r7, sp, #8
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	uint8_t x_addr = JS->dataAddress;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
	uint8_t y_addr = JS->dataAddress+1;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	73bb      	strb	r3, [r7, #14]
	uint16_t rawX;
	uint16_t rawY;
	int16_t temp;

	JS->rawValue[0] = dmaArray[x_addr];
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	881a      	ldrh	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	80da      	strh	r2, [r3, #6]
	JS->rawValue[1] = dmaArray[y_addr];
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	4413      	add	r3, r2
 8000806:	881a      	ldrh	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	811a      	strh	r2, [r3, #8]

	rawX = JS->rawValue[0];
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	88db      	ldrh	r3, [r3, #6]
 8000810:	81bb      	strh	r3, [r7, #12]
	rawY = JS->rawValue[1];
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	891b      	ldrh	r3, [r3, #8]
 8000816:	817b      	strh	r3, [r7, #10]

	if(rawX > JS->maxValue[0])
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8b5b      	ldrh	r3, [r3, #26]
 800081c:	89ba      	ldrh	r2, [r7, #12]
 800081e:	429a      	cmp	r2, r3
 8000820:	d902      	bls.n	8000828 <JS_Aquisite+0x50>
		JS->maxValue[0] = rawX;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	89ba      	ldrh	r2, [r7, #12]
 8000826:	835a      	strh	r2, [r3, #26]

	if(rawY > JS->maxValue[1])
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8b9b      	ldrh	r3, [r3, #28]
 800082c:	897a      	ldrh	r2, [r7, #10]
 800082e:	429a      	cmp	r2, r3
 8000830:	d902      	bls.n	8000838 <JS_Aquisite+0x60>
		JS->maxValue[1] = rawY;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	897a      	ldrh	r2, [r7, #10]
 8000836:	839a      	strh	r2, [r3, #28]

	if(rawX < JS->minValue[0])
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	8adb      	ldrh	r3, [r3, #22]
 800083c:	89ba      	ldrh	r2, [r7, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	d202      	bcs.n	8000848 <JS_Aquisite+0x70>
		JS->minValue[0] = rawX;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	89ba      	ldrh	r2, [r7, #12]
 8000846:	82da      	strh	r2, [r3, #22]

	if(rawY < JS->minValue[1])
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	8b1b      	ldrh	r3, [r3, #24]
 800084c:	897a      	ldrh	r2, [r7, #10]
 800084e:	429a      	cmp	r2, r3
 8000850:	d202      	bcs.n	8000858 <JS_Aquisite+0x80>
		JS->minValue[1] = rawY;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	897a      	ldrh	r2, [r7, #10]
 8000856:	831a      	strh	r2, [r3, #24]


	JS->smoothedValue[0] = (0.9 * JS->smoothedValue[0]) + ( 0.1 * rawX);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	895b      	ldrh	r3, [r3, #10]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fef3 	bl	8000648 <__aeabi_i2d>
 8000862:	a37b      	add	r3, pc, #492	; (adr r3, 8000a50 <JS_Aquisite+0x278>)
 8000864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000868:	f7ff fc72 	bl	8000150 <__aeabi_dmul>
 800086c:	4602      	mov	r2, r0
 800086e:	460b      	mov	r3, r1
 8000870:	4614      	mov	r4, r2
 8000872:	461d      	mov	r5, r3
 8000874:	89bb      	ldrh	r3, [r7, #12]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fee6 	bl	8000648 <__aeabi_i2d>
 800087c:	a376      	add	r3, pc, #472	; (adr r3, 8000a58 <JS_Aquisite+0x280>)
 800087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000882:	f7ff fc65 	bl	8000150 <__aeabi_dmul>
 8000886:	4602      	mov	r2, r0
 8000888:	460b      	mov	r3, r1
 800088a:	4620      	mov	r0, r4
 800088c:	4629      	mov	r1, r5
 800088e:	f7ff fd8f 	bl	80003b0 <__adddf3>
 8000892:	4602      	mov	r2, r0
 8000894:	460b      	mov	r3, r1
 8000896:	4610      	mov	r0, r2
 8000898:	4619      	mov	r1, r3
 800089a:	f7ff ff3f 	bl	800071c <__aeabi_d2uiz>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	815a      	strh	r2, [r3, #10]
	JS->smoothedValue[1] = (0.9 * JS->smoothedValue[1]) + (0.1 * rawY);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	899b      	ldrh	r3, [r3, #12]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fecc 	bl	8000648 <__aeabi_i2d>
 80008b0:	a367      	add	r3, pc, #412	; (adr r3, 8000a50 <JS_Aquisite+0x278>)
 80008b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b6:	f7ff fc4b 	bl	8000150 <__aeabi_dmul>
 80008ba:	4602      	mov	r2, r0
 80008bc:	460b      	mov	r3, r1
 80008be:	4614      	mov	r4, r2
 80008c0:	461d      	mov	r5, r3
 80008c2:	897b      	ldrh	r3, [r7, #10]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff febf 	bl	8000648 <__aeabi_i2d>
 80008ca:	a363      	add	r3, pc, #396	; (adr r3, 8000a58 <JS_Aquisite+0x280>)
 80008cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d0:	f7ff fc3e 	bl	8000150 <__aeabi_dmul>
 80008d4:	4602      	mov	r2, r0
 80008d6:	460b      	mov	r3, r1
 80008d8:	4620      	mov	r0, r4
 80008da:	4629      	mov	r1, r5
 80008dc:	f7ff fd68 	bl	80003b0 <__adddf3>
 80008e0:	4602      	mov	r2, r0
 80008e2:	460b      	mov	r3, r1
 80008e4:	4610      	mov	r0, r2
 80008e6:	4619      	mov	r1, r3
 80008e8:	f7ff ff18 	bl	800071c <__aeabi_d2uiz>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	819a      	strh	r2, [r3, #12]

	if(JS->smoothedValue[0] > JS->zeroValue[0]){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	895a      	ldrh	r2, [r3, #10]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d912      	bls.n	8000926 <JS_Aquisite+0x14e>
		JS->position[0] = map(JS->smoothedValue[0],JS->zeroValue[0], JS->maxValue[0], 0, 2047);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	895b      	ldrh	r3, [r3, #10]
 8000904:	4618      	mov	r0, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	4619      	mov	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	8b5b      	ldrh	r3, [r3, #26]
 8000910:	461a      	mov	r2, r3
 8000912:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2300      	movs	r3, #0
 800091a:	f000 f8cd 	bl	8000ab8 <map>
 800091e:	4603      	mov	r3, r0
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	821a      	strh	r2, [r3, #16]
	}

	if(JS->smoothedValue[1] > JS->zeroValue[1]){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	899a      	ldrh	r2, [r3, #12]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	885b      	ldrh	r3, [r3, #2]
 800092e:	429a      	cmp	r2, r3
 8000930:	d912      	bls.n	8000958 <JS_Aquisite+0x180>
		JS->position[1] = map(JS->smoothedValue[1],JS->zeroValue[1], JS->maxValue[1], 0, 2047);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	899b      	ldrh	r3, [r3, #12]
 8000936:	4618      	mov	r0, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	885b      	ldrh	r3, [r3, #2]
 800093c:	4619      	mov	r1, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	8b9b      	ldrh	r3, [r3, #28]
 8000942:	461a      	mov	r2, r3
 8000944:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	f000 f8b4 	bl	8000ab8 <map>
 8000950:	4603      	mov	r3, r0
 8000952:	b21a      	sxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	825a      	strh	r2, [r3, #18]
	}

	if(JS->smoothedValue[0] < JS->zeroValue[0]){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	895a      	ldrh	r2, [r3, #10]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	d211      	bcs.n	8000988 <JS_Aquisite+0x1b0>
		JS->position[0] = map(JS->smoothedValue[0],JS->minValue[0], JS->zeroValue[0], -2048, 0);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	895b      	ldrh	r3, [r3, #10]
 8000968:	4618      	mov	r0, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	8adb      	ldrh	r3, [r3, #22]
 800096e:	4619      	mov	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	2300      	movs	r3, #0
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <JS_Aquisite+0x288>)
 800097c:	f000 f89c 	bl	8000ab8 <map>
 8000980:	4603      	mov	r3, r0
 8000982:	b21a      	sxth	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	821a      	strh	r2, [r3, #16]
	}
	if(JS->smoothedValue[1] < JS->zeroValue[0]){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	899a      	ldrh	r2, [r3, #12]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	d211      	bcs.n	80009b8 <JS_Aquisite+0x1e0>
		JS->position[1] = map(JS->smoothedValue[1],JS->minValue[1], JS->zeroValue[1], -2048, 0);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	899b      	ldrh	r3, [r3, #12]
 8000998:	4618      	mov	r0, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	8b1b      	ldrh	r3, [r3, #24]
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	885b      	ldrh	r3, [r3, #2]
 80009a4:	461a      	mov	r2, r3
 80009a6:	2300      	movs	r3, #0
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <JS_Aquisite+0x288>)
 80009ac:	f000 f884 	bl	8000ab8 <map>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	825a      	strh	r2, [r3, #18]
//	JS->position[0] = map(JS->smoothedValue[0], 0, 4030, -2100, 2300);
	//JS->position[1] = map(JS->smoothedValue[1], 0, 4030, -2100 , 2300);



	if(abs(JS->position[0]) < JS->deadZone)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	8a9b      	ldrh	r3, [r3, #20]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d202      	bcs.n	80009d4 <JS_Aquisite+0x1fc>
		JS->position[0] = 0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	821a      	strh	r2, [r3, #16]

	if(abs(JS->position[1]) < JS->deadZone)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	bfb8      	it	lt
 80009de:	425b      	neglt	r3, r3
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	8a9b      	ldrh	r3, [r3, #20]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d202      	bcs.n	80009f0 <JS_Aquisite+0x218>
			JS->position[1] = 0;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	825a      	strh	r2, [r3, #18]


	if(JS->position[0] > 2020)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80009f6:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80009fa:	4293      	cmp	r3, r2
 80009fc:	dd03      	ble.n	8000a06 <JS_Aquisite+0x22e>
		JS->position[0] = 2047;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a04:	821a      	strh	r2, [r3, #16]

	if(JS->position[1] > 2020)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a0c:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8000a10:	4293      	cmp	r3, r2
 8000a12:	dd03      	ble.n	8000a1c <JS_Aquisite+0x244>
		JS->position[1] = 2047;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a1a:	825a      	strh	r2, [r3, #18]

	if(JS->position[0] < -2020)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <JS_Aquisite+0x28c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	da03      	bge.n	8000a30 <JS_Aquisite+0x258>
		JS->position[0] = -2048;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000a2e:	821a      	strh	r2, [r3, #16]

	if(JS->position[1] < -2020)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <JS_Aquisite+0x28c>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	da03      	bge.n	8000a44 <JS_Aquisite+0x26c>
		JS->position[1] = -2048;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000a42:	825a      	strh	r2, [r3, #18]


}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	f3af 8000 	nop.w
 8000a50:	cccccccd 	.word	0xcccccccd
 8000a54:	3feccccc 	.word	0x3feccccc
 8000a58:	9999999a 	.word	0x9999999a
 8000a5c:	3fb99999 	.word	0x3fb99999
 8000a60:	fffff800 	.word	0xfffff800
 8000a64:	fffff81c 	.word	0xfffff81c

08000a68 <JS_Calibrate>:

void JS_Calibrate(struct Joystick *JS, uint8_t axisFlag,  uint16_t minValue, uint16_t maxValue, uint16_t middleValue){
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4603      	mov	r3, r0
 8000a78:	72fb      	strb	r3, [r7, #11]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	813b      	strh	r3, [r7, #8]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	80fb      	strh	r3, [r7, #6]
if(!axisFlag){ //for X axis
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d109      	bne.n	8000a9c <JS_Calibrate+0x34>
	JS->minValue[0] = minValue;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	893a      	ldrh	r2, [r7, #8]
 8000a8c:	82da      	strh	r2, [r3, #22]
	JS->maxValue[0] = maxValue;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	835a      	strh	r2, [r3, #26]
	JS->zeroValue[0] = middleValue;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	8b3a      	ldrh	r2, [r7, #24]
 8000a98:	801a      	strh	r2, [r3, #0]
	JS->minValue[1] = minValue;
	JS->maxValue[1] = maxValue;
	JS->zeroValue[1] = middleValue;

 }
}
 8000a9a:	e008      	b.n	8000aae <JS_Calibrate+0x46>
	JS->minValue[1] = minValue;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	893a      	ldrh	r2, [r7, #8]
 8000aa0:	831a      	strh	r2, [r3, #24]
	JS->maxValue[1] = maxValue;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	88fa      	ldrh	r2, [r7, #6]
 8000aa6:	839a      	strh	r2, [r3, #28]
	JS->zeroValue[1] = middleValue;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	8b3a      	ldrh	r2, [r7, #24]
 8000aac:	805a      	strh	r2, [r3, #2]
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <map>:


int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max){
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	69b9      	ldr	r1, [r7, #24]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	1a8a      	subs	r2, r1, r2
 8000ad2:	fb03 f202 	mul.w	r2, r3, r2
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1acb      	subs	r3, r1, r3
 8000adc:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	4413      	add	r3, r2
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
	...

08000af0 <NRF_CS_Select>:
uint8_t TX_DS_flag;




void NRF_CS_Select(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(nrfCsPort, nrfCsPin, GPIO_PIN_RESET);
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <NRF_CS_Select+0x1c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <NRF_CS_Select+0x20>)
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	b291      	uxth	r1, r2
 8000afe:	2200      	movs	r2, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 f92b 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000038 	.word	0x20000038
 8000b10:	2000003c 	.word	0x2000003c

08000b14 <NRF_CS_Unselect>:

void NRF_CS_Unselect(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(nrfCsPort, nrfCsPin, GPIO_PIN_SET);
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <NRF_CS_Unselect+0x1c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <NRF_CS_Unselect+0x20>)
 8000b1e:	6812      	ldr	r2, [r2, #0]
 8000b20:	b291      	uxth	r1, r2
 8000b22:	2201      	movs	r2, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 f919 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000038 	.word	0x20000038
 8000b34:	2000003c 	.word	0x2000003c

08000b38 <NRF_CE_Enable>:

void NRF_CE_Enable(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(nrfCePort, nrfCePin, GPIO_PIN_SET);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <NRF_CE_Enable+0x1c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <NRF_CE_Enable+0x20>)
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	b291      	uxth	r1, r2
 8000b46:	2201      	movs	r2, #1
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 f907 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000040 	.word	0x20000040
 8000b58:	20000044 	.word	0x20000044

08000b5c <NRF_CE_Disable>:

void NRF_CE_Disable(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(nrfCePort, nrfCePin, GPIO_PIN_RESET);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <NRF_CE_Disable+0x1c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <NRF_CE_Disable+0x20>)
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	b291      	uxth	r1, r2
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f8f5 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000040 	.word	0x20000040
 8000b7c:	20000044 	.word	0x20000044

08000b80 <NRF_WriteRegister>:

/* write a single byte to the specified register */
void NRF_WriteRegister(uint8_t reg, uint8_t data){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2];
	/* according to datasheet - we must write 1 to a 5th bit writing data to a register*/
	buffer[0] = reg | (1<<5);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	737b      	strb	r3, [r7, #13]
	//select device
	NRF_CS_Select();
 8000b9e:	f7ff ffa7 	bl	8000af0 <NRF_CS_Select>

	//send data
	HAL_SPI_Transmit(nrf_spi, buffer, 2, 100);
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <NRF_WriteRegister+0x40>)
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	f107 010c 	add.w	r1, r7, #12
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	2202      	movs	r2, #2
 8000bae:	f002 fe81 	bl	80038b4 <HAL_SPI_Transmit>

	//unselect NRF device
	NRF_CS_Unselect();
 8000bb2:	f7ff ffaf 	bl	8000b14 <NRF_CS_Unselect>
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000034 	.word	0x20000034

08000bc4 <NRF_WriteRegisterMultiple>:

/* write multiple bytes of data starting from a specified register */
void NRF_WriteRegisterMultiple(uint8_t reg, uint8_t *data, uint16_t size){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[2];
	/* according to datasheet - we must write 1 to a 5th bit writing data to a register*/
	buffer[0] = reg | (1<<5);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f043 0320 	orr.w	r3, r3, #32
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	733b      	strb	r3, [r7, #12]
	//buffer[1] = data;
	//select device
	NRF_CS_Select();
 8000bde:	f7ff ff87 	bl	8000af0 <NRF_CS_Select>

	//send register address
	HAL_SPI_Transmit(nrf_spi, buffer, 1, 100);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <NRF_WriteRegisterMultiple+0x48>)
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	f107 010c 	add.w	r1, r7, #12
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	2201      	movs	r2, #1
 8000bee:	f002 fe61 	bl	80038b4 <HAL_SPI_Transmit>
	//send the data all at once
	HAL_SPI_Transmit(nrf_spi, data, size, 100);
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <NRF_WriteRegisterMultiple+0x48>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	88ba      	ldrh	r2, [r7, #4]
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	f002 fe5a 	bl	80038b4 <HAL_SPI_Transmit>

	//unselect NRF device
	NRF_CS_Unselect();
 8000c00:	f7ff ff88 	bl	8000b14 <NRF_CS_Unselect>
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000034 	.word	0x20000034

08000c10 <NRF_ReadRegister>:

/* read a byte from a specified register */
uint8_t NRF_ReadRegister(uint8_t reg){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	//select device
	NRF_CS_Select();
 8000c1a:	f7ff ff69 	bl	8000af0 <NRF_CS_Select>

	//send register address to read from
	HAL_SPI_Transmit(nrf_spi, &reg, 1, 100);
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <NRF_ReadRegister+0x3c>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	1df9      	adds	r1, r7, #7
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	2201      	movs	r2, #1
 8000c28:	f002 fe44 	bl	80038b4 <HAL_SPI_Transmit>

	//receive data
	HAL_SPI_Receive(nrf_spi, &data, 1, 100);
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <NRF_ReadRegister+0x3c>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	f107 010f 	add.w	r1, r7, #15
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	2201      	movs	r2, #1
 8000c38:	f002 ff78 	bl	8003b2c <HAL_SPI_Receive>

	//unselect NRF device
	NRF_CS_Unselect();
 8000c3c:	f7ff ff6a 	bl	8000b14 <NRF_CS_Unselect>
	return data;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000034 	.word	0x20000034

08000c50 <NRF_SendCommand>:
	NRF_CS_Unselect();
}


/* send special command to the NRF module */
void NRF_SendCommand(uint8_t cmd){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	//select device
	NRF_CS_Select();
 8000c5a:	f7ff ff49 	bl	8000af0 <NRF_CS_Select>

	//send data
	HAL_SPI_Transmit(nrf_spi, &cmd, 1, 100);
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <NRF_SendCommand+0x28>)
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	1df9      	adds	r1, r7, #7
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	2201      	movs	r2, #1
 8000c68:	f002 fe24 	bl	80038b4 <HAL_SPI_Transmit>

	//unselect NRF device
	NRF_CS_Unselect();
 8000c6c:	f7ff ff52 	bl	8000b14 <NRF_CS_Unselect>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000034 	.word	0x20000034

08000c7c <NRF_Init>:

void NRF_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* irqport, uint32_t irqpin, GPIO_TypeDef* csport, uint32_t cspin, GPIO_TypeDef* ceport, uint32_t cepin ){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	603b      	str	r3, [r7, #0]

	/* substitute gpios */
	nrfCsPort = csport;
 8000c8a:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <NRF_Init+0xa4>)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	6013      	str	r3, [r2, #0]
	nrfCsPin = cspin;
 8000c90:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <NRF_Init+0xa8>)
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	6013      	str	r3, [r2, #0]
	nrfCePort = ceport;
 8000c96:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <NRF_Init+0xac>)
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	6013      	str	r3, [r2, #0]
	nrfCePin = cepin;
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <NRF_Init+0xb0>)
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	6013      	str	r3, [r2, #0]
	nrfIrqPort = irqport;
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <NRF_Init+0xb4>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	6013      	str	r3, [r2, #0]
	nrfIrqPin = irqpin;
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <NRF_Init+0xb8>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]

	//substitute used SPI handler
	nrf_spi = spi;
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <NRF_Init+0xbc>)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6013      	str	r3, [r2, #0]

	//disable device for configuration
	NRF_CE_Disable();
 8000cb4:	f7ff ff52 	bl	8000b5c <NRF_CE_Disable>

	/* reset all the registers*/

	NRF_ResetReg(0);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 f8b9 	bl	8000e30 <NRF_ResetReg>

	/* configure interrupt masking, power mode and working mode to transmit */
	uint8_t config = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	75fb      	strb	r3, [r7, #23]
	config |= (1<<6); //disable rx data ready interrupt request
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	75fb      	strb	r3, [r7, #23]
	config |= (1<<5); // disable tx data sent interrupt request
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	75fb      	strb	r3, [r7, #23]
	config |= (1<<4); //disable max retransmision interrupt request
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	75fb      	strb	r3, [r7, #23]
	NRF_WriteRegister(CONFIG, config);
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff4e 	bl	8000b80 <NRF_WriteRegister>

	/* disable autoacknowledgement */
	NRF_WriteRegister(EN_AA, 0);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ff4a 	bl	8000b80 <NRF_WriteRegister>

	/* enable pipe x - tbi */
	NRF_WriteRegister(EN_RXADDR, 0);
 8000cec:	2100      	movs	r1, #0
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff ff46 	bl	8000b80 <NRF_WriteRegister>

	/* configure 5 byte TX/RX address*/
	NRF_WriteRegister(SETUP_AW, 0x03);
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f7ff ff42 	bl	8000b80 <NRF_WriteRegister>

	/* configure retransmission - disable */
	NRF_WriteRegister(SETUP_RETR, 0);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff ff3e 	bl	8000b80 <NRF_WriteRegister>

	/* select transmission channel */
	NRF_WriteRegister(RF_CH, 0);
 8000d04:	2100      	movs	r1, #0
 8000d06:	2005      	movs	r0, #5
 8000d08:	f7ff ff3a 	bl	8000b80 <NRF_WriteRegister>

	/* RF settings */
	NRF_WriteRegister(RF_SETUP, 0x0E);
 8000d0c:	210e      	movs	r1, #14
 8000d0e:	2006      	movs	r0, #6
 8000d10:	f7ff ff36 	bl	8000b80 <NRF_WriteRegister>

	/* enable back the device */
	NRF_CE_Enable();
 8000d14:	f7ff ff10 	bl	8000b38 <NRF_CE_Enable>

}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000038 	.word	0x20000038
 8000d24:	2000003c 	.word	0x2000003c
 8000d28:	20000040 	.word	0x20000040
 8000d2c:	20000044 	.word	0x20000044
 8000d30:	20000048 	.word	0x20000048
 8000d34:	2000004c 	.word	0x2000004c
 8000d38:	20000034 	.word	0x20000034

08000d3c <NRF_SetTxMode>:

/* set up transmit mode */
void NRF_SetTxMode(uint8_t *RXPipeAddr, uint8_t channel, uint8_t irqEnable){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	70bb      	strb	r3, [r7, #2]

	TX_DS_flag = irqEnable;
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <NRF_SetTxMode+0x74>)
 8000d4e:	78bb      	ldrb	r3, [r7, #2]
 8000d50:	7013      	strb	r3, [r2, #0]

	/* disable device for configuration */
	NRF_CE_Disable();
 8000d52:	f7ff ff03 	bl	8000b5c <NRF_CE_Disable>

	/* Select the channel */
	NRF_WriteRegister(RF_CH, channel);
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2005      	movs	r0, #5
 8000d5c:	f7ff ff10 	bl	8000b80 <NRF_WriteRegister>

	/* set up the TX address */
	NRF_WriteRegisterMultiple(TX_ADDR, RXPipeAddr, 5);
 8000d60:	2205      	movs	r2, #5
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	2010      	movs	r0, #16
 8000d66:	f7ff ff2d 	bl	8000bc4 <NRF_WriteRegisterMultiple>

	uint8_t config = NRF_ReadRegister(CONFIG);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff ff50 	bl	8000c10 <NRF_ReadRegister>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]

	/* enable tx data sent interrupt */
	if(irqEnable)
 8000d74:	78bb      	ldrb	r3, [r7, #2]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <NRF_SetTxMode+0x42>
		config &= !(1<<5);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]


	/* power up the device */
	config = config | (1<<1);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	73fb      	strb	r3, [r7, #15]
	config = config & (0xF2);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	f023 030d 	bic.w	r3, r3, #13
 8000d8c:	73fb      	strb	r3, [r7, #15]



	NRF_WriteRegister(CONFIG, config);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	4619      	mov	r1, r3
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fef4 	bl	8000b80 <NRF_WriteRegister>
	config = NRF_ReadRegister(CONFIG);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff ff39 	bl	8000c10 <NRF_ReadRegister>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	73fb      	strb	r3, [r7, #15]
	/* enable the device back */
	NRF_CE_Enable();
 8000da2:	f7ff fec9 	bl	8000b38 <NRF_CE_Enable>
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000050 	.word	0x20000050

08000db4 <NRF_Transmit>:

/* transmit data over SPI to the NRF module */

uint8_t NRF_Transmit(uint8_t* data){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	uint8_t command;
	command = W_TX_PAYLOAD;
 8000dbc:	23a0      	movs	r3, #160	; 0xa0
 8000dbe:	73bb      	strb	r3, [r7, #14]

	/* select device for transmission*/
	NRF_CS_Select();
 8000dc0:	f7ff fe96 	bl	8000af0 <NRF_CS_Select>


	/* send transmit payload command */
	HAL_SPI_Transmit(nrf_spi, &command, 1, 100);
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <NRF_Transmit+0x78>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	f107 010e 	add.w	r1, r7, #14
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f002 fd70 	bl	80038b4 <HAL_SPI_Transmit>

	/* transmit 32 bit long data stream */
	HAL_SPI_Transmit(nrf_spi, data, 32, 100);
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <NRF_Transmit+0x78>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	2364      	movs	r3, #100	; 0x64
 8000dda:	2220      	movs	r2, #32
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	f002 fd69 	bl	80038b4 <HAL_SPI_Transmit>

	/* unselect device after transmission */
	NRF_CS_Unselect();
 8000de2:	f7ff fe97 	bl	8000b14 <NRF_CS_Unselect>

	/* wait for the pin to settle */
	HAL_Delay(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 ff48 	bl	8001c7c <HAL_Delay>

	/* check for data in fifo - transmission successful */
	uint8_t fifoStatus = NRF_ReadRegister(FIFO_STATUS);
 8000dec:	2017      	movs	r0, #23
 8000dee:	f7ff ff0f 	bl	8000c10 <NRF_ReadRegister>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]
	if((fifoStatus & (1<<4)) && (!(fifoStatus & (1<<3)))){
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00f      	beq.n	8000e20 <NRF_Transmit+0x6c>
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10a      	bne.n	8000e20 <NRF_Transmit+0x6c>
		/* if the data was transfered to the fifo flush it for sending */
		command = FLUSH_TX;
 8000e0a:	23e1      	movs	r3, #225	; 0xe1
 8000e0c:	73bb      	strb	r3, [r7, #14]
		NRF_SendCommand(command);
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff1d 	bl	8000c50 <NRF_SendCommand>

		/*reset fifo status after flushing */
		NRF_ResetReg(FIFO_STATUS);
 8000e16:	2017      	movs	r0, #23
 8000e18:	f000 f80a 	bl	8000e30 <NRF_ResetReg>
		return 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <NRF_Transmit+0x6e>
	}
		return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000034 	.word	0x20000034

08000e30 <NRF_ResetReg>:

}


/* reset register settings */
void NRF_ResetReg(uint8_t REG){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	d104      	bne.n	8000e4a <NRF_ResetReg+0x1a>
	{
		NRF_WriteRegister(STATUS, 0x00);
 8000e40:	2100      	movs	r1, #0
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff fe9c 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_PW_P5, 0);
		NRF_WriteRegister(FIFO_STATUS, 0x11);
		NRF_WriteRegister(DYNPD, 0);
		NRF_WriteRegister(FEATURE, 0);
	}
}
 8000e48:	e090      	b.n	8000f6c <NRF_ResetReg+0x13c>
	else if (REG == FIFO_STATUS)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b17      	cmp	r3, #23
 8000e4e:	d104      	bne.n	8000e5a <NRF_ResetReg+0x2a>
		NRF_WriteRegister(FIFO_STATUS, 0x11);
 8000e50:	2111      	movs	r1, #17
 8000e52:	2017      	movs	r0, #23
 8000e54:	f7ff fe94 	bl	8000b80 <NRF_WriteRegister>
}
 8000e58:	e088      	b.n	8000f6c <NRF_ResetReg+0x13c>
		NRF_WriteRegister(CONFIG, 0x08);
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fe8f 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(EN_AA, 0x3F);
 8000e62:	213f      	movs	r1, #63	; 0x3f
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fe8b 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(EN_RXADDR, 0x03);
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff fe87 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(SETUP_AW, 0x03);
 8000e72:	2103      	movs	r1, #3
 8000e74:	2003      	movs	r0, #3
 8000e76:	f7ff fe83 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(SETUP_RETR, 0x03);
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f7ff fe7f 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RF_CH, 0x02);
 8000e82:	2102      	movs	r1, #2
 8000e84:	2005      	movs	r0, #5
 8000e86:	f7ff fe7b 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RF_SETUP, 0x0E);
 8000e8a:	210e      	movs	r1, #14
 8000e8c:	2006      	movs	r0, #6
 8000e8e:	f7ff fe77 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(STATUS, 0x00);
 8000e92:	2100      	movs	r1, #0
 8000e94:	2007      	movs	r0, #7
 8000e96:	f7ff fe73 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(OBSERVE_TX, 0x00);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2008      	movs	r0, #8
 8000e9e:	f7ff fe6f 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(CD, 0x00);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2009      	movs	r0, #9
 8000ea6:	f7ff fe6b 	bl	8000b80 <NRF_WriteRegister>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000eaa:	4a32      	ldr	r2, [pc, #200]	; (8000f74 <NRF_ResetReg+0x144>)
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	6018      	str	r0, [r3, #0]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	7019      	strb	r1, [r3, #0]
		NRF_WriteRegisterMultiple(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	200a      	movs	r0, #10
 8000ec4:	f7ff fe7e 	bl	8000bc4 <NRF_WriteRegisterMultiple>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000ec8:	4a2b      	ldr	r2, [pc, #172]	; (8000f78 <NRF_ResetReg+0x148>)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed2:	6018      	str	r0, [r3, #0]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	7019      	strb	r1, [r3, #0]
		NRF_WriteRegisterMultiple(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2205      	movs	r2, #5
 8000ede:	4619      	mov	r1, r3
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f7ff fe6f 	bl	8000bc4 <NRF_WriteRegisterMultiple>
		NRF_WriteRegister(RX_ADDR_P2, 0xC3);
 8000ee6:	21c3      	movs	r1, #195	; 0xc3
 8000ee8:	200c      	movs	r0, #12
 8000eea:	f7ff fe49 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_ADDR_P3, 0xC4);
 8000eee:	21c4      	movs	r1, #196	; 0xc4
 8000ef0:	200d      	movs	r0, #13
 8000ef2:	f7ff fe45 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_ADDR_P4, 0xC5);
 8000ef6:	21c5      	movs	r1, #197	; 0xc5
 8000ef8:	200e      	movs	r0, #14
 8000efa:	f7ff fe41 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_ADDR_P5, 0xC6);
 8000efe:	21c6      	movs	r1, #198	; 0xc6
 8000f00:	200f      	movs	r0, #15
 8000f02:	f7ff fe3d 	bl	8000b80 <NRF_WriteRegister>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000f06:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <NRF_ResetReg+0x144>)
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f10:	6018      	str	r0, [r3, #0]
 8000f12:	3304      	adds	r3, #4
 8000f14:	7019      	strb	r1, [r3, #0]
		NRF_WriteRegisterMultiple(TX_ADDR, tx_addr_def, 5);
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f7ff fe50 	bl	8000bc4 <NRF_WriteRegisterMultiple>
		NRF_WriteRegister(RX_PW_P0, 0);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2011      	movs	r0, #17
 8000f28:	f7ff fe2a 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_PW_P1, 0);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2012      	movs	r0, #18
 8000f30:	f7ff fe26 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_PW_P2, 0);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2013      	movs	r0, #19
 8000f38:	f7ff fe22 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_PW_P3, 0);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2014      	movs	r0, #20
 8000f40:	f7ff fe1e 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_PW_P4, 0);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2015      	movs	r0, #21
 8000f48:	f7ff fe1a 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(RX_PW_P5, 0);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2016      	movs	r0, #22
 8000f50:	f7ff fe16 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(FIFO_STATUS, 0x11);
 8000f54:	2111      	movs	r1, #17
 8000f56:	2017      	movs	r0, #23
 8000f58:	f7ff fe12 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(DYNPD, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	201c      	movs	r0, #28
 8000f60:	f7ff fe0e 	bl	8000b80 <NRF_WriteRegister>
		NRF_WriteRegister(FEATURE, 0);
 8000f64:	2100      	movs	r1, #0
 8000f66:	201d      	movs	r0, #29
 8000f68:	f7ff fe0a 	bl	8000b80 <NRF_WriteRegister>
}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08004e4c 	.word	0x08004e4c
 8000f78:	08004e54 	.word	0x08004e54

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	 uint8_t flag = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f000 fe17 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f905 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 fb3d 	bl	800160c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f92:	f000 fb1d 	bl	80015d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f96:	f000 f95d 	bl	8001254 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f9a:	f000 fa17 	bl	80013cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f9e:	f000 fa97 	bl	80014d0 <MX_TIM2_Init>
  MX_SPI2_Init();
 8000fa2:	f000 f9dd 	bl	8001360 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000fa6:	f000 fae9 	bl	800157c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	486c      	ldr	r0, [pc, #432]	; (8001160 <main+0x1e4>)
 8000fb0:	f001 fed4 	bl	8002d5c <HAL_GPIO_WritePin>

  /*initialize necessary flags for callbacks*/
  flag_nrf = 0;
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <main+0x1e8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
  flag_js = 0;
 8000fba:	4b6b      	ldr	r3, [pc, #428]	; (8001168 <main+0x1ec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]

  /*initialize 32 byte buffer for communication*/
  for(uint8_t i = 0; i< 32; ++i){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	e006      	b.n	8000fd4 <main+0x58>
	  NRFBuffer[i] = 0;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4a68      	ldr	r2, [pc, #416]	; (800116c <main+0x1f0>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i< 32; ++i){
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b1f      	cmp	r3, #31
 8000fd8:	d9f5      	bls.n	8000fc6 <main+0x4a>
  }

  /* wait for the VCC settle */
  HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f000 fe4d 	bl	8001c7c <HAL_Delay>

  /*initialize NRF24L01 module in transmit mode */
  NRF_Init(&hspi2, NRF_IRQ_GPIO_Port, NRF_IRQ_Pin, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin);
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	4b62      	ldr	r3, [pc, #392]	; (8001170 <main+0x1f4>)
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4b5b      	ldr	r3, [pc, #364]	; (8001160 <main+0x1e4>)
 8000ff2:	2240      	movs	r2, #64	; 0x40
 8000ff4:	495e      	ldr	r1, [pc, #376]	; (8001170 <main+0x1f4>)
 8000ff6:	485f      	ldr	r0, [pc, #380]	; (8001174 <main+0x1f8>)
 8000ff8:	f7ff fe40 	bl	8000c7c <NRF_Init>
  NRF_SetTxMode(TxPipeAddress, 10, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	210a      	movs	r1, #10
 8001000:	485d      	ldr	r0, [pc, #372]	; (8001178 <main+0x1fc>)
 8001002:	f7ff fe9b 	bl	8000d3c <NRF_SetTxMode>

  /*initialize and calibrate joystick structures */
  JS_Init(&Joystick_L, 2, 100, 100);
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	2264      	movs	r2, #100	; 0x64
 800100a:	2102      	movs	r1, #2
 800100c:	485b      	ldr	r0, [pc, #364]	; (800117c <main+0x200>)
 800100e:	f7ff fbbb 	bl	8000788 <JS_Init>
  JS_Init(&Joystick_R, 0, 100, 100);
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	2264      	movs	r2, #100	; 0x64
 8001016:	2100      	movs	r1, #0
 8001018:	4859      	ldr	r0, [pc, #356]	; (8001180 <main+0x204>)
 800101a:	f7ff fbb5 	bl	8000788 <JS_Init>
  JS_Calibrate(&Joystick_R, 0, 0, 4035, 1975);
 800101e:	f240 73b7 	movw	r3, #1975	; 0x7b7
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	f640 73c3 	movw	r3, #4035	; 0xfc3
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	4854      	ldr	r0, [pc, #336]	; (8001180 <main+0x204>)
 800102e:	f7ff fd1b 	bl	8000a68 <JS_Calibrate>
  JS_Calibrate(&Joystick_R, 1, 0, 4037, 2035);
 8001032:	f240 73f3 	movw	r3, #2035	; 0x7f3
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	f640 73c5 	movw	r3, #4037	; 0xfc5
 800103c:	2200      	movs	r2, #0
 800103e:	2101      	movs	r1, #1
 8001040:	484f      	ldr	r0, [pc, #316]	; (8001180 <main+0x204>)
 8001042:	f7ff fd11 	bl	8000a68 <JS_Calibrate>
  JS_Calibrate(&Joystick_L, 0, 0, 4030, 1966);
 8001046:	f240 73ae 	movw	r3, #1966	; 0x7ae
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	f640 73be 	movw	r3, #4030	; 0xfbe
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	4849      	ldr	r0, [pc, #292]	; (800117c <main+0x200>)
 8001056:	f7ff fd07 	bl	8000a68 <JS_Calibrate>
  JS_Calibrate(&Joystick_L, 1, 0, 4039, 1945);
 800105a:	f240 7399 	movw	r3, #1945	; 0x799
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	f640 73c7 	movw	r3, #4039	; 0xfc7
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4844      	ldr	r0, [pc, #272]	; (800117c <main+0x200>)
 800106a:	f7ff fcfd 	bl	8000a68 <JS_Calibrate>

  /*init/start peripherial structires*/
  analogInit(&hadc1, DMA);
 800106e:	4945      	ldr	r1, [pc, #276]	; (8001184 <main+0x208>)
 8001070:	4845      	ldr	r0, [pc, #276]	; (8001188 <main+0x20c>)
 8001072:	f7ff fb73 	bl	800075c <analogInit>
  HAL_TIM_Base_Start_IT(&htim1);
 8001076:	4845      	ldr	r0, [pc, #276]	; (800118c <main+0x210>)
 8001078:	f003 f904 	bl	8004284 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800107c:	4844      	ldr	r0, [pc, #272]	; (8001190 <main+0x214>)
 800107e:	f003 f901 	bl	8004284 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  /* callback from timer 1: aquisite data from joysticks */
	  if(flag_js){
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <main+0x1ec>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d05a      	beq.n	8001140 <main+0x1c4>
		  JS_Aquisite(&Joystick_R, DMA);
 800108a:	493e      	ldr	r1, [pc, #248]	; (8001184 <main+0x208>)
 800108c:	483c      	ldr	r0, [pc, #240]	; (8001180 <main+0x204>)
 800108e:	f7ff fba3 	bl	80007d8 <JS_Aquisite>
		  JS_Aquisite(&Joystick_L, DMA);
 8001092:	493c      	ldr	r1, [pc, #240]	; (8001184 <main+0x208>)
 8001094:	4839      	ldr	r0, [pc, #228]	; (800117c <main+0x200>)
 8001096:	f7ff fb9f 	bl	80007d8 <JS_Aquisite>
		   * 8 index: right Joystick Y axis upper byte
		   * 9 index: right Joystick Y axis lower byte
		   * 10 - 30 indexes - to be implemented
		   * 31 index - valid data count */
		  /*data frame identificator */
		  NRFBuffer[0] = 'R';
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <main+0x1f0>)
 800109c:	2252      	movs	r2, #82	; 0x52
 800109e:	701a      	strb	r2, [r3, #0]
		  NRFBuffer[1] = 'D';
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <main+0x1f0>)
 80010a2:	2244      	movs	r2, #68	; 0x44
 80010a4:	705a      	strb	r2, [r3, #1]

		  /* left joystick X position */
		  NRFBuffer[2] = highByte(Joystick_L.position[0]);
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <main+0x200>)
 80010a8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010ac:	121b      	asrs	r3, r3, #8
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <main+0x1f0>)
 80010b4:	709a      	strb	r2, [r3, #2]
		  NRFBuffer[3] = lowByte(Joystick_L.position[0]);
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <main+0x200>)
 80010b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <main+0x1f0>)
 80010c0:	70da      	strb	r2, [r3, #3]

		  /*left joystick Y position */
		  NRFBuffer[4] = highByte(Joystick_L.position[1]);
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <main+0x200>)
 80010c4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010c8:	121b      	asrs	r3, r3, #8
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <main+0x1f0>)
 80010d0:	711a      	strb	r2, [r3, #4]
		  NRFBuffer[5] = lowByte(Joystick_L.position[1]);
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <main+0x200>)
 80010d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <main+0x1f0>)
 80010dc:	715a      	strb	r2, [r3, #5]

		  /*right joystick X position */
		  NRFBuffer[6] = highByte(Joystick_R.position[0]);
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <main+0x204>)
 80010e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010e4:	121b      	asrs	r3, r3, #8
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <main+0x1f0>)
 80010ec:	719a      	strb	r2, [r3, #6]
		  NRFBuffer[7] = lowByte(Joystick_R.position[0]);
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <main+0x204>)
 80010f0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <main+0x1f0>)
 80010f8:	71da      	strb	r2, [r3, #7]

		  /*right joystick Y position */
		  NRFBuffer[8] = highByte(Joystick_R.position[1]);
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <main+0x204>)
 80010fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001100:	121b      	asrs	r3, r3, #8
 8001102:	b21b      	sxth	r3, r3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <main+0x1f0>)
 8001108:	721a      	strb	r2, [r3, #8]
		  NRFBuffer[9] = lowByte(Joystick_R.position[1]);
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <main+0x204>)
 800110c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <main+0x1f0>)
 8001114:	725a      	strb	r2, [r3, #9]

		  /* indexes 10 - 30  TBI */

		  /* valid data count: 10 */
		  NRFBuffer[31] = 10;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <main+0x1f0>)
 8001118:	220a      	movs	r2, #10
 800111a:	77da      	strb	r2, [r3, #31]

		 flag = NRF_Transmit(NRFBuffer);
 800111c:	4813      	ldr	r0, [pc, #76]	; (800116c <main+0x1f0>)
 800111e:	f7ff fe49 	bl	8000db4 <NRF_Transmit>
 8001122:	4603      	mov	r3, r0
 8001124:	71bb      	strb	r3, [r7, #6]

		 if(flag)
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <main+0x1b8>
			 flag_blink = 1;
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <main+0x218>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e002      	b.n	800113a <main+0x1be>
		 else
			 flag_blink = 0;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <main+0x218>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]

			 //flag_nrf = 0;
			 //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);

			 flag_js = 0;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <main+0x1ec>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_nrf){
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <main+0x1e8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d09c      	beq.n	8001082 <main+0x106>
		  	  //HAL_GPIO_TogglePin(LED1_Pin, LED1_Pin);
			if(flag_blink)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <main+0x218>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <main+0x1dc>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <main+0x1e4>)
 8001154:	f001 fe1a 	bl	8002d8c <HAL_GPIO_TogglePin>
			  flag_nrf = 0;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <main+0x1e8>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
	  if(flag_js){
 800115e:	e790      	b.n	8001082 <main+0x106>
 8001160:	40010800 	.word	0x40010800
 8001164:	200001f4 	.word	0x200001f4
 8001168:	200001f5 	.word	0x200001f5
 800116c:	20000254 	.word	0x20000254
 8001170:	40010c00 	.word	0x40010c00
 8001174:	200000c8 	.word	0x200000c8
 8001178:	20000000 	.word	0x20000000
 800117c:	2000022c 	.word	0x2000022c
 8001180:	20000204 	.word	0x20000204
 8001184:	200001f8 	.word	0x200001f8
 8001188:	20000054 	.word	0x20000054
 800118c:	20000120 	.word	0x20000120
 8001190:	20000168 	.word	0x20000168
 8001194:	200001f6 	.word	0x200001f6

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a2:	2228      	movs	r2, #40	; 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 fe3c 	bl	8004e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d6:	2301      	movs	r3, #1
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fde6 	bl	8002dc0 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011fa:	f000 facb 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f002 f852 	bl	80032c4 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001226:	f000 fab5 	bl	8001794 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122a:	2302      	movs	r3, #2
 800122c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800122e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001232:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fa02 	bl	8003640 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001242:	f000 faa7 	bl	8001794 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001246:	f002 f927 	bl	8003498 <HAL_RCC_EnableCSS>
}
 800124a:	bf00      	nop
 800124c:	3750      	adds	r7, #80	; 0x50
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <MX_ADC1_Init+0x104>)
 8001266:	4a3d      	ldr	r2, [pc, #244]	; (800135c <MX_ADC1_Init+0x108>)
 8001268:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <MX_ADC1_Init+0x104>)
 800126c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <MX_ADC1_Init+0x104>)
 8001274:	2201      	movs	r2, #1
 8001276:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001278:	4b37      	ldr	r3, [pc, #220]	; (8001358 <MX_ADC1_Init+0x104>)
 800127a:	2200      	movs	r2, #0
 800127c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <MX_ADC1_Init+0x104>)
 8001280:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001284:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <MX_ADC1_Init+0x104>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <MX_ADC1_Init+0x104>)
 800128e:	2206      	movs	r2, #6
 8001290:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001292:	4831      	ldr	r0, [pc, #196]	; (8001358 <MX_ADC1_Init+0x104>)
 8001294:	f000 fd16 	bl	8001cc4 <HAL_ADC_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800129e:	f000 fa79 	bl	8001794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012a2:	2303      	movs	r3, #3
 80012a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4829      	ldr	r0, [pc, #164]	; (8001358 <MX_ADC1_Init+0x104>)
 80012b4:	f000 fed8 	bl	8002068 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012be:	f000 fa69 	bl	8001794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <MX_ADC1_Init+0x104>)
 80012d0:	f000 feca 	bl	8002068 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012da:	f000 fa5b 	bl	8001794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012de:	2301      	movs	r3, #1
 80012e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012e2:	2303      	movs	r3, #3
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	481b      	ldr	r0, [pc, #108]	; (8001358 <MX_ADC1_Init+0x104>)
 80012ec:	f000 febc 	bl	8002068 <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012f6:	f000 fa4d 	bl	8001794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012fe:	2304      	movs	r3, #4
 8001300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <MX_ADC1_Init+0x104>)
 8001308:	f000 feae 	bl	8002068 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001312:	f000 fa3f 	bl	8001794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001316:	2304      	movs	r3, #4
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800131a:	2305      	movs	r3, #5
 800131c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_ADC1_Init+0x104>)
 8001324:	f000 fea0 	bl	8002068 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800132e:	f000 fa31 	bl	8001794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001332:	2305      	movs	r3, #5
 8001334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001336:	2306      	movs	r3, #6
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_ADC1_Init+0x104>)
 8001340:	f000 fe92 	bl	8002068 <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800134a:	f000 fa23 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000054 	.word	0x20000054
 800135c:	40012400 	.word	0x40012400

08001360 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_SPI2_Init+0x64>)
 8001366:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <MX_SPI2_Init+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_SPI2_Init+0x64>)
 800136c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_SPI2_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_SPI2_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_SPI2_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_SPI2_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_SPI2_Init+0x64>)
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_SPI2_Init+0x64>)
 8001394:	2208      	movs	r2, #8
 8001396:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_SPI2_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_SPI2_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_SPI2_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_SPI2_Init+0x64>)
 80013ac:	220a      	movs	r2, #10
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_SPI2_Init+0x64>)
 80013b2:	f002 f9fb 	bl	80037ac <HAL_SPI_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013bc:	f000 f9ea 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200000c8 	.word	0x200000c8
 80013c8:	40003800 	.word	0x40003800

080013cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b092      	sub	sp, #72	; 0x48
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2220      	movs	r2, #32
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fd14 	bl	8004e24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013fc:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <MX_TIM1_Init+0xfc>)
 80013fe:	4a33      	ldr	r2, [pc, #204]	; (80014cc <MX_TIM1_Init+0x100>)
 8001400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8001402:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <MX_TIM1_Init+0xfc>)
 8001404:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001408:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <MX_TIM1_Init+0xfc>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8001410:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <MX_TIM1_Init+0xfc>)
 8001412:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <MX_TIM1_Init+0xfc>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <MX_TIM1_Init+0xfc>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <MX_TIM1_Init+0xfc>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800142a:	4827      	ldr	r0, [pc, #156]	; (80014c8 <MX_TIM1_Init+0xfc>)
 800142c:	f002 ff7c 	bl	8004328 <HAL_TIM_OC_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 f9ad 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001442:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001446:	4619      	mov	r1, r3
 8001448:	481f      	ldr	r0, [pc, #124]	; (80014c8 <MX_TIM1_Init+0xfc>)
 800144a:	f003 fb2b 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001454:	f000 f99e 	bl	8001794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	4812      	ldr	r0, [pc, #72]	; (80014c8 <MX_TIM1_Init+0xfc>)
 800147e:	f003 f8ab 	bl	80045d8 <HAL_TIM_OC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001488:	f000 f984 	bl	8001794 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM1_Init+0xfc>)
 80014b0:	f003 fb56 	bl	8004b60 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80014ba:	f000 f96b 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3748      	adds	r7, #72	; 0x48
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000120 	.word	0x20000120
 80014cc:	40012c00 	.word	0x40012c00

080014d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_TIM2_Init+0xa8>)
 80014f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_TIM2_Init+0xa8>)
 80014fc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001500:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_TIM2_Init+0xa8>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_TIM2_Init+0xa8>)
 800150a:	2263      	movs	r2, #99	; 0x63
 800150c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM2_Init+0xa8>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_TIM2_Init+0xa8>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800151a:	4817      	ldr	r0, [pc, #92]	; (8001578 <MX_TIM2_Init+0xa8>)
 800151c:	f002 ff04 	bl	8004328 <HAL_TIM_OC_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001526:	f000 f935 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <MX_TIM2_Init+0xa8>)
 800153a:	f003 fab3 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001544:	f000 f926 	bl	8001794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_TIM2_Init+0xa8>)
 8001560:	f003 f83a 	bl	80045d8 <HAL_TIM_OC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800156a:	f000 f913 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000168 	.word	0x20000168

0800157c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015b4:	f003 fb37 	bl	8004c26 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f000 f8e9 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200001b0 	.word	0x200001b0
 80015cc:	40013800 	.word	0x40013800

080015d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_DMA_Init+0x38>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <MX_DMA_Init+0x38>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_DMA_Init+0x38>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	200b      	movs	r0, #11
 80015f4:	f001 f809 	bl	800260a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f8:	200b      	movs	r0, #11
 80015fa:	f001 f822 	bl	8002642 <HAL_NVIC_EnableIRQ>

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <MX_GPIO_Init+0x134>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <MX_GPIO_Init+0x134>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b44      	ldr	r3, [pc, #272]	; (8001740 <MX_GPIO_Init+0x134>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <MX_GPIO_Init+0x134>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a40      	ldr	r2, [pc, #256]	; (8001740 <MX_GPIO_Init+0x134>)
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <MX_GPIO_Init+0x134>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <MX_GPIO_Init+0x134>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a3a      	ldr	r2, [pc, #232]	; (8001740 <MX_GPIO_Init+0x134>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <MX_GPIO_Init+0x134>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <MX_GPIO_Init+0x134>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a34      	ldr	r2, [pc, #208]	; (8001740 <MX_GPIO_Init+0x134>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <MX_GPIO_Init+0x134>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001686:	482f      	ldr	r0, [pc, #188]	; (8001744 <MX_GPIO_Init+0x138>)
 8001688:	f001 fb68 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LCD_LED_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f241 0101 	movw	r1, #4097	; 0x1001
 8001692:	482d      	ldr	r0, [pc, #180]	; (8001748 <MX_GPIO_Init+0x13c>)
 8001694:	f001 fb62 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	4829      	ldr	r0, [pc, #164]	; (8001744 <MX_GPIO_Init+0x138>)
 80016a0:	f001 fb5c 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	4827      	ldr	r0, [pc, #156]	; (8001748 <MX_GPIO_Init+0x13c>)
 80016aa:	f001 fb57 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JS_B_SW_Pin JS_A_SW_Pin */
  GPIO_InitStruct.Pin = JS_B_SW_Pin|JS_A_SW_Pin;
 80016ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	4822      	ldr	r0, [pc, #136]	; (800174c <MX_GPIO_Init+0x140>)
 80016c4:	f001 f9c6 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LCD_CS_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LCD_CS_Pin|NRF_CSN_Pin;
 80016c8:	f44f 538c 	mov.w	r3, #4480	; 0x1180
 80016cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4619      	mov	r1, r3
 80016e0:	4818      	ldr	r0, [pc, #96]	; (8001744 <MX_GPIO_Init+0x138>)
 80016e2:	f001 f9b7 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LCD_LED_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LCD_LED_Pin|NRF_CE_Pin;
 80016e6:	f241 0381 	movw	r3, #4225	; 0x1081
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	4812      	ldr	r0, [pc, #72]	; (8001748 <MX_GPIO_Init+0x13c>)
 8001700:	f001 f9a8 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT3_Pin BT2_Pin BT1_Pin */
  GPIO_InitStruct.Pin = BT3_Pin|BT2_Pin|BT1_Pin;
 8001704:	f640 4302 	movw	r3, #3074	; 0xc02
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <MX_GPIO_Init+0x13c>)
 800171a:	f001 f99b 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_GPIO_Init+0x144>)
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_GPIO_Init+0x13c>)
 8001732:	f001 f98f 	bl	8002a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	40010800 	.word	0x40010800
 8001748:	40010c00 	.word	0x40010c00
 800174c:	40011000 	.word	0x40011000
 8001750:	10110000 	.word	0x10110000

08001754 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef  *htim){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d102      	bne.n	800176a <HAL_TIM_PeriodElapsedCallback+0x16>

		flag_nrf = 1;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
	}

	if(htim == &htim2){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d102      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x24>
		//HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
		flag_js = 1;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
	}
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000120 	.word	0x20000120
 8001788:	200001f4 	.word	0x200001f4
 800178c:	20000168 	.word	0x20000168
 8001790:	200001f5 	.word	0x200001f5

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179c:	e7fe      	b.n	800179c <Error_Handler+0x8>
	...

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_MspInit+0x40>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_MspInit+0x40>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6193      	str	r3, [r2, #24]
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_MspInit+0x40>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_MspInit+0x40>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_MspInit+0x40>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_MspInit+0x40>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_ADC_MspInit+0xbc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d149      	bne.n	8001898 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_ADC_MspInit+0xc0>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <HAL_ADC_MspInit+0xc0>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_ADC_MspInit+0xc0>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_ADC_MspInit+0xc0>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <HAL_ADC_MspInit+0xc0>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_ADC_MspInit+0xc0>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = JS_AX_ADC_Pin|JS_AY_ADC_Pin|JS_BX_ADC_Pin|JS_BX_ADCA3_Pin
 8001834:	233f      	movs	r3, #63	; 0x3f
 8001836:	613b      	str	r3, [r7, #16]
                          |VBAT_ADC_Pin|POT_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001838:	2303      	movs	r3, #3
 800183a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4619      	mov	r1, r3
 8001842:	4819      	ldr	r0, [pc, #100]	; (80018a8 <HAL_ADC_MspInit+0xc4>)
 8001844:	f001 f906 	bl	8002a54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 800184a:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_ADC_MspInit+0xcc>)
 800184c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 8001862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001866:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 800186a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 8001872:	2220      	movs	r2, #32
 8001874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 8001878:	2200      	movs	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 800187e:	f000 fefb 	bl	8002678 <HAL_DMA_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001888:	f7ff ff84 	bl	8001794 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 8001890:	621a      	str	r2, [r3, #32]
 8001892:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_ADC_MspInit+0xc8>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40012400 	.word	0x40012400
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010800 	.word	0x40010800
 80018ac:	20000084 	.word	0x20000084
 80018b0:	40020008 	.word	0x40020008

080018b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_SPI_MspInit+0x8c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d131      	bne.n	8001938 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018de:	61d3      	str	r3, [r2, #28]
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018f2:	f043 0308 	orr.w	r3, r3, #8
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001904:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <HAL_SPI_MspInit+0x94>)
 800191a:	f001 f89b 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800191e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_SPI_MspInit+0x94>)
 8001934:	f001 f88e 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40003800 	.word	0x40003800
 8001944:	40021000 	.word	0x40021000
 8001948:	40010c00 	.word	0x40010c00

0800194c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_TIM_OC_MspInit+0xa8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12c      	bne.n	80019b8 <HAL_TIM_OC_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_TIM_OC_MspInit+0xac>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <HAL_TIM_OC_MspInit+0xac>)
 8001964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_TIM_OC_MspInit+0xac>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2018      	movs	r0, #24
 800197c:	f000 fe45 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001980:	2018      	movs	r0, #24
 8001982:	f000 fe5e 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2019      	movs	r0, #25
 800198c:	f000 fe3d 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001990:	2019      	movs	r0, #25
 8001992:	f000 fe56 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	201a      	movs	r0, #26
 800199c:	f000 fe35 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80019a0:	201a      	movs	r0, #26
 80019a2:	f000 fe4e 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	201b      	movs	r0, #27
 80019ac:	f000 fe2d 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019b0:	201b      	movs	r0, #27
 80019b2:	f000 fe46 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019b6:	e018      	b.n	80019ea <HAL_TIM_OC_MspInit+0x9e>
  else if(htim_oc->Instance==TIM2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c0:	d113      	bne.n	80019ea <HAL_TIM_OC_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_TIM_OC_MspInit+0xac>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_TIM_OC_MspInit+0xac>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_TIM_OC_MspInit+0xac>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	201c      	movs	r0, #28
 80019e0:	f000 fe13 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019e4:	201c      	movs	r0, #28
 80019e6:	f000 fe2c 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <HAL_UART_MspInit+0x8c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d131      	bne.n	8001a80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_UART_MspInit+0x90>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <HAL_UART_MspInit+0x90>)
 8001a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_UART_MspInit+0x90>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_UART_MspInit+0x90>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <HAL_UART_MspInit+0x90>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_UART_MspInit+0x90>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <HAL_UART_MspInit+0x94>)
 8001a62:	f000 fff7 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_UART_MspInit+0x94>)
 8001a7c:	f000 ffea 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010800 	.word	0x40010800

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001a98:	f001 fd9a 	bl	80035d0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <NMI_Handler+0x8>

08001a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f000 f8b1 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <DMA1_Channel1_IRQHandler+0x10>)
 8001aee:	f000 fe7d 	bl	80027ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000084 	.word	0x20000084

08001afc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM1_BRK_IRQHandler+0x10>)
 8001b02:	f002 fc60 	bl	80043c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000120 	.word	0x20000120

08001b10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <TIM1_UP_IRQHandler+0x10>)
 8001b16:	f002 fc56 	bl	80043c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000120 	.word	0x20000120

08001b24 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001b2a:	f002 fc4c 	bl	80043c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000120 	.word	0x20000120

08001b38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM1_CC_IRQHandler+0x10>)
 8001b3e:	f002 fc42 	bl	80043c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000120 	.word	0x20000120

08001b4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM2_IRQHandler+0x10>)
 8001b52:	f002 fc38 	bl	80043c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000168 	.word	0x20000168

08001b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	; (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b92:	f7ff ffe5 	bl	8001b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f003 f921 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9a:	f7ff f9ef 	bl	8000f7c <main>
  bx lr
 8001b9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ba8:	08004e8c 	.word	0x08004e8c
  ldr r2, =_sbss
 8001bac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001bb0:	20000278 	.word	0x20000278

08001bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC1_2_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x28>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x28>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fd13 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fde4 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fd2b 	bl	800265e <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 fcf3 	bl	800260a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_IncTick+0x1c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x20>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_IncTick+0x20>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000010 	.word	0x20000010
 8001c64:	20000274 	.word	0x20000274

08001c68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_GetTick+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000274 	.word	0x20000274

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff fff0 	bl	8001c68 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffe0 	bl	8001c68 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000010 	.word	0x20000010

08001cc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0be      	b.n	8001e64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fd6e 	bl	80017e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 faff 	bl	800230c <ADC_ConversionStop_Disable>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 8099 	bne.w	8001e52 <HAL_ADC_Init+0x18e>
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 8095 	bne.w	8001e52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d30:	f023 0302 	bic.w	r3, r3, #2
 8001d34:	f043 0202 	orr.w	r2, r3, #2
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7b1b      	ldrb	r3, [r3, #12]
 8001d4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d003      	beq.n	8001d66 <HAL_ADC_Init+0xa2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_ADC_Init+0xa8>
 8001d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6a:	e000      	b.n	8001d6e <HAL_ADC_Init+0xaa>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7d1b      	ldrb	r3, [r3, #20]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d119      	bne.n	8001db0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7b1b      	ldrb	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	035a      	lsls	r2, r3, #13
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e00b      	b.n	8001db0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f043 0220 	orr.w	r2, r3, #32
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_ADC_Init+0x1a8>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de0:	d003      	beq.n	8001dea <HAL_ADC_Init+0x126>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d104      	bne.n	8001df4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	051b      	lsls	r3, r3, #20
 8001df2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_ADC_Init+0x1ac>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e2e:	e018      	b.n	8001e62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	f023 0312 	bic.w	r3, r3, #18
 8001e38:	f043 0210 	orr.w	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f043 0201 	orr.w	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e50:	e007      	b.n	8001e62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e70:	ff1f0efe 	.word	0xff1f0efe

08001e74 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a64      	ldr	r2, [pc, #400]	; (800201c <HAL_ADC_Start_DMA+0x1a8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_ADC_Start_DMA+0x24>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a63      	ldr	r2, [pc, #396]	; (8002020 <HAL_ADC_Start_DMA+0x1ac>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d106      	bne.n	8001ea6 <HAL_ADC_Start_DMA+0x32>
 8001e98:	4b60      	ldr	r3, [pc, #384]	; (800201c <HAL_ADC_Start_DMA+0x1a8>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 80b3 	bne.w	800200c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_Start_DMA+0x40>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e0ae      	b.n	8002012 <HAL_ADC_Start_DMA+0x19e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f9cb 	bl	8002258 <ADC_Enable>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 809a 	bne.w	8002002 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <HAL_ADC_Start_DMA+0x1ac>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d105      	bne.n	8001ef8 <HAL_ADC_Start_DMA+0x84>
 8001eec:	4b4b      	ldr	r3, [pc, #300]	; (800201c <HAL_ADC_Start_DMA+0x1a8>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d115      	bne.n	8001f24 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d026      	beq.n	8001f60 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f22:	e01d      	b.n	8001f60 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a39      	ldr	r2, [pc, #228]	; (800201c <HAL_ADC_Start_DMA+0x1a8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_ADC_Start_DMA+0xd0>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a38      	ldr	r2, [pc, #224]	; (8002020 <HAL_ADC_Start_DMA+0x1ac>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10d      	bne.n	8001f60 <HAL_ADC_Start_DMA+0xec>
 8001f44:	4b35      	ldr	r3, [pc, #212]	; (800201c <HAL_ADC_Start_DMA+0x1a8>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f023 0206 	bic.w	r2, r3, #6
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	; (8002024 <HAL_ADC_Start_DMA+0x1b0>)
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_ADC_Start_DMA+0x1b4>)
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <HAL_ADC_Start_DMA+0x1b8>)
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0202 	mvn.w	r2, #2
 8001fa8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a18      	ldr	r0, [r3, #32]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	334c      	adds	r3, #76	; 0x4c
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f000 fbaf 	bl	800272c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fd8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fdc:	d108      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001fec:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001fee:	e00f      	b.n	8002010 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ffe:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002000:	e006      	b.n	8002010 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800200a:	e001      	b.n	8002010 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002010:	7dfb      	ldrb	r3, [r7, #23]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40012400 	.word	0x40012400
 8002020:	40012800 	.word	0x40012800
 8002024:	0800238f 	.word	0x0800238f
 8002028:	0800240b 	.word	0x0800240b
 800202c:	08002427 	.word	0x08002427

08002030 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
	...

08002068 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x20>
 8002084:	2302      	movs	r3, #2
 8002086:	e0dc      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1da>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b06      	cmp	r3, #6
 8002096:	d81c      	bhi.n	80020d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	3b05      	subs	r3, #5
 80020aa:	221f      	movs	r2, #31
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4019      	ands	r1, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b05      	subs	r3, #5
 80020c4:	fa00 f203 	lsl.w	r2, r0, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
 80020d0:	e03c      	b.n	800214c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d81c      	bhi.n	8002114 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3b23      	subs	r3, #35	; 0x23
 80020ec:	221f      	movs	r2, #31
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4019      	ands	r1, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b23      	subs	r3, #35	; 0x23
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
 8002112:	e01b      	b.n	800214c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b41      	subs	r3, #65	; 0x41
 8002126:	221f      	movs	r2, #31
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	4019      	ands	r1, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b41      	subs	r3, #65	; 0x41
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b09      	cmp	r3, #9
 8002152:	d91c      	bls.n	800218e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	3b1e      	subs	r3, #30
 8002166:	2207      	movs	r2, #7
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	4019      	ands	r1, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6898      	ldr	r0, [r3, #8]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	3b1e      	subs	r3, #30
 8002180:	fa00 f203 	lsl.w	r2, r0, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	e019      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6919      	ldr	r1, [r3, #16]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	2207      	movs	r2, #7
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	4019      	ands	r1, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6898      	ldr	r0, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d003      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ce:	2b11      	cmp	r3, #17
 80021d0:	d132      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1d      	ldr	r2, [pc, #116]	; (800224c <HAL_ADC_ConfigChannel+0x1e4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d125      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d126      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021f8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d11a      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_ADC_ConfigChannel+0x1e8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <HAL_ADC_ConfigChannel+0x1ec>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9a      	lsrs	r2, r3, #18
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002218:	e002      	b.n	8002220 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3b01      	subs	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f9      	bne.n	800221a <HAL_ADC_ConfigChannel+0x1b2>
 8002226:	e007      	b.n	8002238 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40012400 	.word	0x40012400
 8002250:	20000008 	.word	0x20000008
 8002254:	431bde83 	.word	0x431bde83

08002258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d040      	beq.n	80022f8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002286:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <ADC_Enable+0xac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <ADC_Enable+0xb0>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	0c9b      	lsrs	r3, r3, #18
 8002292:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002294:	e002      	b.n	800229c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3b01      	subs	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f9      	bne.n	8002296 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a2:	f7ff fce1 	bl	8001c68 <HAL_GetTick>
 80022a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022a8:	e01f      	b.n	80022ea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022aa:	f7ff fcdd 	bl	8001c68 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d918      	bls.n	80022ea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d011      	beq.n	80022ea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e007      	b.n	80022fa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d1d8      	bne.n	80022aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000008 	.word	0x20000008
 8002308:	431bde83 	.word	0x431bde83

0800230c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d12e      	bne.n	8002384 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002336:	f7ff fc97 	bl	8001c68 <HAL_GetTick>
 800233a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800233c:	e01b      	b.n	8002376 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800233e:	f7ff fc93 	bl	8001c68 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d914      	bls.n	8002376 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10d      	bne.n	8002376 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	f043 0210 	orr.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e007      	b.n	8002386 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d0dc      	beq.n	800233e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d127      	bne.n	80023f8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023c2:	d115      	bne.n	80023f0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d111      	bne.n	80023f0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff fe1d 	bl	8002030 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023f6:	e004      	b.n	8002402 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7ff fe12 	bl	8002042 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7ff fe01 	bl	8002054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248e:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <__NVIC_GetPriorityGrouping+0x18>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 0307 	and.w	r3, r3, #7
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db0b      	blt.n	80024ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	4906      	ldr	r1, [pc, #24]	; (80024f4 <__NVIC_EnableIRQ+0x34>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2001      	movs	r0, #1
 80024e2:	fa00 f202 	lsl.w	r2, r0, r2
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c0:	d301      	bcc.n	80025c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <SysTick_Config+0x40>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ce:	210f      	movs	r1, #15
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f7ff ff90 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <SysTick_Config+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <SysTick_Config+0x40>)
 80025e0:	2207      	movs	r2, #7
 80025e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff2d 	bl	800245c <__NVIC_SetPriorityGrouping>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff42 	bl	80024a4 <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff90 	bl	800254c <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5f 	bl	80024f8 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff35 	bl	80024c0 <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa2 	bl	80025b0 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e043      	b.n	8002716 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_DMA_Init+0xa8>)
 8002696:	4413      	add	r3, r2
 8002698:	4a22      	ldr	r2, [pc, #136]	; (8002724 <HAL_DMA_Init+0xac>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	009a      	lsls	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <HAL_DMA_Init+0xb0>)
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	bffdfff8 	.word	0xbffdfff8
 8002724:	cccccccd 	.word	0xcccccccd
 8002728:	40020000 	.word	0x40020000

0800272c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_DMA_Start_IT+0x20>
 8002748:	2302      	movs	r3, #2
 800274a:	e04a      	b.n	80027e2 <HAL_DMA_Start_IT+0xb6>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800275a:	2b01      	cmp	r3, #1
 800275c:	d13a      	bne.n	80027d4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f938 	bl	80029f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 020e 	orr.w	r2, r2, #14
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e00f      	b.n	80027c2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0204 	bic.w	r2, r2, #4
 80027b0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 020a 	orr.w	r2, r2, #10
 80027c0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e005      	b.n	80027e0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
 80027de:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2204      	movs	r2, #4
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d04f      	beq.n	80028b4 <HAL_DMA_IRQHandler+0xc8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0204 	bic.w	r2, r2, #4
 800283a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_DMA_IRQHandler+0x1f0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d029      	beq.n	800289a <HAL_DMA_IRQHandler+0xae>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_DMA_IRQHandler+0x1f4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <HAL_DMA_IRQHandler+0xaa>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a63      	ldr	r2, [pc, #396]	; (80029e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01a      	beq.n	8002890 <HAL_DMA_IRQHandler+0xa4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a62      	ldr	r2, [pc, #392]	; (80029e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d012      	beq.n	800288a <HAL_DMA_IRQHandler+0x9e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a60      	ldr	r2, [pc, #384]	; (80029ec <HAL_DMA_IRQHandler+0x200>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00a      	beq.n	8002884 <HAL_DMA_IRQHandler+0x98>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_DMA_IRQHandler+0x204>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d102      	bne.n	800287e <HAL_DMA_IRQHandler+0x92>
 8002878:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800287c:	e00e      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 800287e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002882:	e00b      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 8002884:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002888:	e008      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 800288a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800288e:	e005      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 8002890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002894:	e002      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 8002896:	2340      	movs	r3, #64	; 0x40
 8002898:	e000      	b.n	800289c <HAL_DMA_IRQHandler+0xb0>
 800289a:	2304      	movs	r3, #4
 800289c:	4a55      	ldr	r2, [pc, #340]	; (80029f4 <HAL_DMA_IRQHandler+0x208>)
 800289e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8094 	beq.w	80029d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028b2:	e08e      	b.n	80029d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	2202      	movs	r2, #2
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d056      	beq.n	8002972 <HAL_DMA_IRQHandler+0x186>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d051      	beq.n	8002972 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020a 	bic.w	r2, r2, #10
 80028ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a38      	ldr	r2, [pc, #224]	; (80029dc <HAL_DMA_IRQHandler+0x1f0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d029      	beq.n	8002952 <HAL_DMA_IRQHandler+0x166>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_DMA_IRQHandler+0x162>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a35      	ldr	r2, [pc, #212]	; (80029e4 <HAL_DMA_IRQHandler+0x1f8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01a      	beq.n	8002948 <HAL_DMA_IRQHandler+0x15c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d012      	beq.n	8002942 <HAL_DMA_IRQHandler+0x156>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a32      	ldr	r2, [pc, #200]	; (80029ec <HAL_DMA_IRQHandler+0x200>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00a      	beq.n	800293c <HAL_DMA_IRQHandler+0x150>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <HAL_DMA_IRQHandler+0x204>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d102      	bne.n	8002936 <HAL_DMA_IRQHandler+0x14a>
 8002930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002934:	e00e      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 8002936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	e00b      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 800293c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002940:	e008      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 8002942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002946:	e005      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 8002948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800294c:	e002      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 800294e:	2320      	movs	r3, #32
 8002950:	e000      	b.n	8002954 <HAL_DMA_IRQHandler+0x168>
 8002952:	2302      	movs	r3, #2
 8002954:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_DMA_IRQHandler+0x208>)
 8002956:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d034      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002970:	e02f      	b.n	80029d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2208      	movs	r2, #8
 8002978:	409a      	lsls	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d028      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x1e8>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020e 	bic.w	r2, r2, #14
 800299a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	2101      	movs	r1, #1
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
    }
  }
  return;
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
}
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40020008 	.word	0x40020008
 80029e0:	4002001c 	.word	0x4002001c
 80029e4:	40020030 	.word	0x40020030
 80029e8:	40020044 	.word	0x40020044
 80029ec:	40020058 	.word	0x40020058
 80029f0:	4002006c 	.word	0x4002006c
 80029f4:	40020000 	.word	0x40020000

080029f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d108      	bne.n	8002a38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a36:	e007      	b.n	8002a48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b08b      	sub	sp, #44	; 0x2c
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a66:	e169      	b.n	8002d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 8158 	bne.w	8002d36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a9a      	ldr	r2, [pc, #616]	; (8002cf4 <HAL_GPIO_Init+0x2a0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d05e      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002a90:	4a98      	ldr	r2, [pc, #608]	; (8002cf4 <HAL_GPIO_Init+0x2a0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d875      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002a96:	4a98      	ldr	r2, [pc, #608]	; (8002cf8 <HAL_GPIO_Init+0x2a4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d058      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002a9c:	4a96      	ldr	r2, [pc, #600]	; (8002cf8 <HAL_GPIO_Init+0x2a4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d86f      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aa2:	4a96      	ldr	r2, [pc, #600]	; (8002cfc <HAL_GPIO_Init+0x2a8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d052      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002aa8:	4a94      	ldr	r2, [pc, #592]	; (8002cfc <HAL_GPIO_Init+0x2a8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d869      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aae:	4a94      	ldr	r2, [pc, #592]	; (8002d00 <HAL_GPIO_Init+0x2ac>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d04c      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002ab4:	4a92      	ldr	r2, [pc, #584]	; (8002d00 <HAL_GPIO_Init+0x2ac>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d863      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aba:	4a92      	ldr	r2, [pc, #584]	; (8002d04 <HAL_GPIO_Init+0x2b0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d046      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002ac0:	4a90      	ldr	r2, [pc, #576]	; (8002d04 <HAL_GPIO_Init+0x2b0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d85d      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002ac6:	2b12      	cmp	r3, #18
 8002ac8:	d82a      	bhi.n	8002b20 <HAL_GPIO_Init+0xcc>
 8002aca:	2b12      	cmp	r3, #18
 8002acc:	d859      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <HAL_GPIO_Init+0x80>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b4f 	.word	0x08002b4f
 8002ad8:	08002b29 	.word	0x08002b29
 8002adc:	08002b3b 	.word	0x08002b3b
 8002ae0:	08002b7d 	.word	0x08002b7d
 8002ae4:	08002b83 	.word	0x08002b83
 8002ae8:	08002b83 	.word	0x08002b83
 8002aec:	08002b83 	.word	0x08002b83
 8002af0:	08002b83 	.word	0x08002b83
 8002af4:	08002b83 	.word	0x08002b83
 8002af8:	08002b83 	.word	0x08002b83
 8002afc:	08002b83 	.word	0x08002b83
 8002b00:	08002b83 	.word	0x08002b83
 8002b04:	08002b83 	.word	0x08002b83
 8002b08:	08002b83 	.word	0x08002b83
 8002b0c:	08002b83 	.word	0x08002b83
 8002b10:	08002b83 	.word	0x08002b83
 8002b14:	08002b83 	.word	0x08002b83
 8002b18:	08002b31 	.word	0x08002b31
 8002b1c:	08002b45 	.word	0x08002b45
 8002b20:	4a79      	ldr	r2, [pc, #484]	; (8002d08 <HAL_GPIO_Init+0x2b4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b26:	e02c      	b.n	8002b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	623b      	str	r3, [r7, #32]
          break;
 8002b2e:	e029      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	3304      	adds	r3, #4
 8002b36:	623b      	str	r3, [r7, #32]
          break;
 8002b38:	e024      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	623b      	str	r3, [r7, #32]
          break;
 8002b42:	e01f      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	623b      	str	r3, [r7, #32]
          break;
 8002b4c:	e01a      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b56:	2304      	movs	r3, #4
 8002b58:	623b      	str	r3, [r7, #32]
          break;
 8002b5a:	e013      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b64:	2308      	movs	r3, #8
 8002b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	611a      	str	r2, [r3, #16]
          break;
 8002b6e:	e009      	b.n	8002b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b70:	2308      	movs	r3, #8
 8002b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	615a      	str	r2, [r3, #20]
          break;
 8002b7a:	e003      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
          break;
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          break;
 8002b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2bff      	cmp	r3, #255	; 0xff
 8002b88:	d801      	bhi.n	8002b8e <HAL_GPIO_Init+0x13a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	e001      	b.n	8002b92 <HAL_GPIO_Init+0x13e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2bff      	cmp	r3, #255	; 0xff
 8002b98:	d802      	bhi.n	8002ba0 <HAL_GPIO_Init+0x14c>
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	e002      	b.n	8002ba6 <HAL_GPIO_Init+0x152>
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	3b08      	subs	r3, #8
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	210f      	movs	r1, #15
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80b1 	beq.w	8002d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bd4:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <HAL_GPIO_Init+0x2b8>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	4a4c      	ldr	r2, [pc, #304]	; (8002d0c <HAL_GPIO_Init+0x2b8>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6193      	str	r3, [r2, #24]
 8002be0:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_GPIO_Init+0x2b8>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bec:	4a48      	ldr	r2, [pc, #288]	; (8002d10 <HAL_GPIO_Init+0x2bc>)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <HAL_GPIO_Init+0x2c0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_GPIO_Init+0x1ec>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3f      	ldr	r2, [pc, #252]	; (8002d18 <HAL_GPIO_Init+0x2c4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00d      	beq.n	8002c3c <HAL_GPIO_Init+0x1e8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3e      	ldr	r2, [pc, #248]	; (8002d1c <HAL_GPIO_Init+0x2c8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <HAL_GPIO_Init+0x1e4>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <HAL_GPIO_Init+0x2cc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_GPIO_Init+0x1e0>
 8002c30:	2303      	movs	r3, #3
 8002c32:	e006      	b.n	8002c42 <HAL_GPIO_Init+0x1ee>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e004      	b.n	8002c42 <HAL_GPIO_Init+0x1ee>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e002      	b.n	8002c42 <HAL_GPIO_Init+0x1ee>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_GPIO_Init+0x1ee>
 8002c40:	2300      	movs	r3, #0
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	f002 0203 	and.w	r2, r2, #3
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	4093      	lsls	r3, r2
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c52:	492f      	ldr	r1, [pc, #188]	; (8002d10 <HAL_GPIO_Init+0x2bc>)
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	492c      	ldr	r1, [pc, #176]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	4928      	ldr	r1, [pc, #160]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c94:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4922      	ldr	r1, [pc, #136]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	491e      	ldr	r1, [pc, #120]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4918      	ldr	r1, [pc, #96]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	4914      	ldr	r1, [pc, #80]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d021      	beq.n	8002d28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	490e      	ldr	r1, [pc, #56]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
 8002cf0:	e021      	b.n	8002d36 <HAL_GPIO_Init+0x2e2>
 8002cf2:	bf00      	nop
 8002cf4:	10320000 	.word	0x10320000
 8002cf8:	10310000 	.word	0x10310000
 8002cfc:	10220000 	.word	0x10220000
 8002d00:	10210000 	.word	0x10210000
 8002d04:	10120000 	.word	0x10120000
 8002d08:	10110000 	.word	0x10110000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40010000 	.word	0x40010000
 8002d14:	40010800 	.word	0x40010800
 8002d18:	40010c00 	.word	0x40010c00
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40011400 	.word	0x40011400
 8002d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	4909      	ldr	r1, [pc, #36]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	3301      	adds	r3, #1
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f47f ae8e 	bne.w	8002a68 <HAL_GPIO_Init+0x14>
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	372c      	adds	r7, #44	; 0x2c
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4013      	ands	r3, r2
 8002da4:	041a      	lsls	r2, r3, #16
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	43d9      	mvns	r1, r3
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	400b      	ands	r3, r1
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	611a      	str	r2, [r3, #16]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e272      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8087 	beq.w	8002eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de0:	4b92      	ldr	r3, [pc, #584]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d00c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dec:	4b8f      	ldr	r3, [pc, #572]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d112      	bne.n	8002e1e <HAL_RCC_OscConfig+0x5e>
 8002df8:	4b8c      	ldr	r3, [pc, #560]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e06:	4b89      	ldr	r3, [pc, #548]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d06c      	beq.n	8002eec <HAL_RCC_OscConfig+0x12c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d168      	bne.n	8002eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e24c      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x76>
 8002e28:	4b80      	ldr	r3, [pc, #512]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a7f      	ldr	r2, [pc, #508]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e02e      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x98>
 8002e3e:	4b7b      	ldr	r3, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b78      	ldr	r3, [pc, #480]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a77      	ldr	r2, [pc, #476]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0xbc>
 8002e62:	4b72      	ldr	r3, [pc, #456]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a71      	ldr	r2, [pc, #452]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b6f      	ldr	r3, [pc, #444]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6e      	ldr	r2, [pc, #440]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e7c:	4b6b      	ldr	r3, [pc, #428]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6a      	ldr	r2, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b68      	ldr	r3, [pc, #416]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a67      	ldr	r2, [pc, #412]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fee4 	bl	8001c68 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fee0 	bl	8001c68 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e200      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xe4>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fed0 	bl	8001c68 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fecc 	bl	8001c68 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1ec      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x10c>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d063      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f06:	4b49      	ldr	r3, [pc, #292]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x18c>
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x176>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1c0      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4939      	ldr	r1, [pc, #228]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e03a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fe85 	bl	8001c68 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fe fe81 	bl	8001c68 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e1a1      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4927      	ldr	r1, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]
 8002f94:	e015      	b.n	8002fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	4b26      	ldr	r3, [pc, #152]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fe64 	bl	8001c68 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7fe fe60 	bl	8001c68 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e180      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d03a      	beq.n	8003044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d019      	beq.n	800300a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fe44 	bl	8001c68 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fe40 	bl	8001c68 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e160      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003002:	2001      	movs	r0, #1
 8003004:	f000 faf8 	bl	80035f8 <RCC_Delay>
 8003008:	e01c      	b.n	8003044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe fe2a 	bl	8001c68 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003016:	e00f      	b.n	8003038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe fe26 	bl	8001c68 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d908      	bls.n	8003038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e146      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	42420000 	.word	0x42420000
 8003034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	4b92      	ldr	r3, [pc, #584]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e9      	bne.n	8003018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a6 	beq.w	800319e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	4b8b      	ldr	r3, [pc, #556]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10d      	bne.n	800307e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4a87      	ldr	r2, [pc, #540]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306c:	61d3      	str	r3, [r2, #28]
 800306e:	4b85      	ldr	r3, [pc, #532]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	4b82      	ldr	r3, [pc, #520]	; (8003288 <HAL_RCC_OscConfig+0x4c8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d118      	bne.n	80030bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308a:	4b7f      	ldr	r3, [pc, #508]	; (8003288 <HAL_RCC_OscConfig+0x4c8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7e      	ldr	r2, [pc, #504]	; (8003288 <HAL_RCC_OscConfig+0x4c8>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003096:	f7fe fde7 	bl	8001c68 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309e:	f7fe fde3 	bl	8001c68 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b64      	cmp	r3, #100	; 0x64
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e103      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	4b75      	ldr	r3, [pc, #468]	; (8003288 <HAL_RCC_OscConfig+0x4c8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x312>
 80030c4:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a6e      	ldr	r2, [pc, #440]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	e02d      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x334>
 80030da:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4a69      	ldr	r2, [pc, #420]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6213      	str	r3, [r2, #32]
 80030e6:	4b67      	ldr	r3, [pc, #412]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a66      	ldr	r2, [pc, #408]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	6213      	str	r3, [r2, #32]
 80030f2:	e01c      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d10c      	bne.n	8003116 <HAL_RCC_OscConfig+0x356>
 80030fc:	4b61      	ldr	r3, [pc, #388]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a60      	ldr	r2, [pc, #384]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	6213      	str	r3, [r2, #32]
 8003108:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4a5d      	ldr	r2, [pc, #372]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6213      	str	r3, [r2, #32]
 8003114:	e00b      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 8003116:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a5a      	ldr	r2, [pc, #360]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	4b58      	ldr	r3, [pc, #352]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a57      	ldr	r2, [pc, #348]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d015      	beq.n	8003162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7fe fd97 	bl	8001c68 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe fd93 	bl	8001c68 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0b1      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ee      	beq.n	800313e <HAL_RCC_OscConfig+0x37e>
 8003160:	e014      	b.n	800318c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fe fd81 	bl	8001c68 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe fd7d 	bl	8001c68 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e09b      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003180:	4b40      	ldr	r3, [pc, #256]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ee      	bne.n	800316a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4b3c      	ldr	r3, [pc, #240]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a3b      	ldr	r2, [pc, #236]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d061      	beq.n	8003278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d146      	bne.n	800324a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b33      	ldr	r3, [pc, #204]	; (800328c <HAL_RCC_OscConfig+0x4cc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fd51 	bl	8001c68 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe fd4d 	bl	8001c68 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e06d      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d108      	bne.n	8003204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4921      	ldr	r1, [pc, #132]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003204:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a19      	ldr	r1, [r3, #32]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	430b      	orrs	r3, r1
 8003216:	491b      	ldr	r1, [pc, #108]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x4cc>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe fd21 	bl	8001c68 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322a:	f7fe fd1d 	bl	8001c68 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e03d      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x46a>
 8003248:	e035      	b.n	80032b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <HAL_RCC_OscConfig+0x4cc>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe fd0a 	bl	8001c68 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe fd06 	bl	8001c68 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e026      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x498>
 8003276:	e01e      	b.n	80032b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d107      	bne.n	8003290 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e019      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
 800328c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_OscConfig+0x500>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0d0      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d910      	bls.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	4965      	ldr	r1, [pc, #404]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0b8      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003320:	4b59      	ldr	r3, [pc, #356]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a58      	ldr	r2, [pc, #352]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800332a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003338:	4b53      	ldr	r3, [pc, #332]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a52      	ldr	r2, [pc, #328]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	494d      	ldr	r1, [pc, #308]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d040      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d115      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e07f      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e073      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06b      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	4b39      	ldr	r3, [pc, #228]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4936      	ldr	r1, [pc, #216]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b4:	f7fe fc58 	bl	8001c68 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe fc54 	bl	8001c68 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e053      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1eb      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d210      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	4922      	ldr	r1, [pc, #136]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e032      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4916      	ldr	r1, [pc, #88]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800343e:	4b12      	ldr	r3, [pc, #72]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	490e      	ldr	r1, [pc, #56]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003452:	f000 f82d 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8003456:	4602      	mov	r2, r0
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	490a      	ldr	r1, [pc, #40]	; (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	5ccb      	ldrb	r3, [r1, r3]
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <HAL_RCC_ClockConfig+0x1cc>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCC_ClockConfig+0x1d0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fbb6 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40022000 	.word	0x40022000
 8003488:	40021000 	.word	0x40021000
 800348c:	08004e6c 	.word	0x08004e6c
 8003490:	20000008 	.word	0x20000008
 8003494:	2000000c 	.word	0x2000000c

08003498 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCC_EnableCSS+0x14>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	4242004c 	.word	0x4242004c

080034b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	b490      	push	{r4, r7}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_RCC_GetSysClockFreq+0xac>)
 80034b8:	1d3c      	adds	r4, r7, #4
 80034ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034c0:	f240 2301 	movw	r3, #513	; 0x201
 80034c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034da:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x40>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x46>
 80034ee:	e02b      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f0:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034f2:	623b      	str	r3, [r7, #32]
      break;
 80034f4:	e02b      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	3328      	adds	r3, #40	; 0x28
 8003500:	443b      	add	r3, r7
 8003502:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003506:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d012      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	0c5b      	lsrs	r3, r3, #17
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	3328      	adds	r3, #40	; 0x28
 800351e:	443b      	add	r3, r7
 8003520:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003524:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <HAL_RCC_GetSysClockFreq+0xb4>)
 800352a:	fb03 f202 	mul.w	r2, r3, r2
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	e004      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	623b      	str	r3, [r7, #32]
      break;
 8003546:	e002      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_GetSysClockFreq+0xb4>)
 800354a:	623b      	str	r3, [r7, #32]
      break;
 800354c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354e:	6a3b      	ldr	r3, [r7, #32]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bc90      	pop	{r4, r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	08004e5c 	.word	0x08004e5c
 8003560:	40021000 	.word	0x40021000
 8003564:	007a1200 	.word	0x007a1200
 8003568:	003d0900 	.word	0x003d0900

0800356c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b02      	ldr	r3, [pc, #8]	; (800357c <HAL_RCC_GetHCLKFreq+0x10>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	20000008 	.word	0x20000008

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff2 	bl	800356c <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4903      	ldr	r1, [pc, #12]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08004e7c 	.word	0x08004e7c

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035ac:	f7ff ffde 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0adb      	lsrs	r3, r3, #11
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08004e7c 	.word	0x08004e7c

080035d0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d104      	bne.n	80035ea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80035e0:	f000 f828 	bl	8003634 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	701a      	strb	r2, [r3, #0]
  }
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	4002100a 	.word	0x4002100a

080035f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <RCC_Delay+0x34>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <RCC_Delay+0x38>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a5b      	lsrs	r3, r3, #9
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003614:	bf00      	nop
  }
  while (Delay --);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1e5a      	subs	r2, r3, #1
 800361a:	60fa      	str	r2, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f9      	bne.n	8003614 <RCC_Delay+0x1c>
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	20000008 	.word	0x20000008
 8003630:	10624dd3 	.word	0x10624dd3

08003634 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d07d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800365c:	2300      	movs	r3, #0
 800365e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003660:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4a4b      	ldr	r2, [pc, #300]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003676:	61d3      	str	r3, [r2, #28]
 8003678:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003684:	2301      	movs	r3, #1
 8003686:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d118      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003694:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a42      	ldr	r2, [pc, #264]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a0:	f7fe fae2 	bl	8001c68 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	e008      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a8:	f7fe fade 	bl	8001c68 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e06d      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d02e      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d027      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036e4:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ee:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036f4:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036fa:	4a29      	ldr	r2, [pc, #164]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d014      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe faad 	bl	8001c68 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003710:	e00a      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003712:	f7fe faa9 	bl	8001c68 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e036      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ee      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4917      	ldr	r1, [pc, #92]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	4313      	orrs	r3, r2
 8003744:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003756:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	490b      	ldr	r1, [pc, #44]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
 80037a8:	42420440 	.word	0x42420440

080037ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e076      	b.n	80038ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ce:	d009      	beq.n	80037e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
 80037d6:	e005      	b.n	80037e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe f858 	bl	80018b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	ea42 0103 	orr.w	r1, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0c1a      	lsrs	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f002 0204 	and.w	r2, r2, #4
 800388a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_SPI_Transmit+0x22>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e126      	b.n	8003b24 <HAL_SPI_Transmit+0x270>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038de:	f7fe f9c3 	bl	8001c68 <HAL_GetTick>
 80038e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
 80038f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038f8:	e10b      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_SPI_Transmit+0x52>
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	77fb      	strb	r3, [r7, #31]
    goto error;
 800390a:	e102      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2203      	movs	r2, #3
 8003910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003952:	d10f      	bne.n	8003974 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003972:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d007      	beq.n	8003992 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399a:	d14b      	bne.n	8003a34 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_Transmit+0xf6>
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d13e      	bne.n	8003a28 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039ce:	e02b      	b.n	8003a28 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d112      	bne.n	8003a04 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a02:	e011      	b.n	8003a28 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a04:	f7fe f930 	bl	8001c68 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d803      	bhi.n	8003a1c <HAL_SPI_Transmit+0x168>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d102      	bne.n	8003a22 <HAL_SPI_Transmit+0x16e>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a26:	e074      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ce      	bne.n	80039d0 <HAL_SPI_Transmit+0x11c>
 8003a32:	e04c      	b.n	8003ace <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_SPI_Transmit+0x18e>
 8003a3c:	8afb      	ldrh	r3, [r7, #22]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d140      	bne.n	8003ac4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a68:	e02c      	b.n	8003ac4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d113      	bne.n	8003aa0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a9e:	e011      	b.n	8003ac4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa0:	f7fe f8e2 	bl	8001c68 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d803      	bhi.n	8003ab8 <HAL_SPI_Transmit+0x204>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d102      	bne.n	8003abe <HAL_SPI_Transmit+0x20a>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ac2:	e026      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1cd      	bne.n	8003a6a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fbb8 	bl	8004248 <SPI_EndRxTxTransaction>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e000      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b48:	d112      	bne.n	8003b70 <HAL_SPI_Receive+0x44>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10e      	bne.n	8003b70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2204      	movs	r2, #4
 8003b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f8f1 	bl	8003d4e <HAL_SPI_TransmitReceive>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	e0ea      	b.n	8003d46 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_SPI_Receive+0x52>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e0e3      	b.n	8003d46 <HAL_SPI_Receive+0x21a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b86:	f7fe f86f 	bl	8001c68 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b9c:	e0ca      	b.n	8003d34 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_SPI_Receive+0x7e>
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bae:	e0c1      	b.n	8003d34 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf6:	d10f      	bne.n	8003c18 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d007      	beq.n	8003c36 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d162      	bne.n	8003d04 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c3e:	e02e      	b.n	8003c9e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d115      	bne.n	8003c7a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f103 020c 	add.w	r2, r3, #12
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c78:	e011      	b.n	8003c9e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c7a:	f7fd fff5 	bl	8001c68 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d803      	bhi.n	8003c92 <HAL_SPI_Receive+0x166>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d102      	bne.n	8003c98 <HAL_SPI_Receive+0x16c>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c9c:	e04a      	b.n	8003d34 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1cb      	bne.n	8003c40 <HAL_SPI_Receive+0x114>
 8003ca8:	e031      	b.n	8003d0e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d113      	bne.n	8003ce0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	1c9a      	adds	r2, r3, #2
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cde:	e011      	b.n	8003d04 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce0:	f7fd ffc2 	bl	8001c68 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d803      	bhi.n	8003cf8 <HAL_SPI_Receive+0x1cc>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d102      	bne.n	8003cfe <HAL_SPI_Receive+0x1d2>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d02:	e017      	b.n	8003d34 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1cd      	bne.n	8003caa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fa46 	bl	80041a4 <SPI_EndRxTransaction>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
 8003d30:	e000      	b.n	8003d34 <HAL_SPI_Receive+0x208>
  }

error :
 8003d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b08c      	sub	sp, #48	; 0x30
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x26>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e18a      	b.n	800408a <HAL_SPI_TransmitReceive+0x33c>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7c:	f7fd ff74 	bl	8001c68 <HAL_GetTick>
 8003d80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d00f      	beq.n	8003dbe <HAL_SPI_TransmitReceive+0x70>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da4:	d107      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x68>
 8003dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d003      	beq.n	8003dbe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
 8003db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dbc:	e15b      	b.n	8004076 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_SPI_TransmitReceive+0x82>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SPI_TransmitReceive+0x82>
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dd6:	e14e      	b.n	8004076 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d003      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2205      	movs	r2, #5
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	887a      	ldrh	r2, [r7, #2]
 8003dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	887a      	ldrh	r2, [r7, #2]
 8003e02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	887a      	ldrh	r2, [r7, #2]
 8003e0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d007      	beq.n	8003e40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e48:	d178      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x10a>
 8003e52:	8b7b      	ldrh	r3, [r7, #26]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d166      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	881a      	ldrh	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7c:	e053      	b.n	8003f26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x176>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x176>
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d113      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	881a      	ldrh	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d119      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x1b8>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f02:	2301      	movs	r3, #1
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f06:	f7fd feaf 	bl	8001c68 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d807      	bhi.n	8003f26 <HAL_SPI_TransmitReceive+0x1d8>
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d003      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f24:	e0a7      	b.n	8004076 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1a6      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0x130>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1a1      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0x130>
 8003f3a:	e07c      	b.n	8004036 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x1fc>
 8003f44:	8b7b      	ldrh	r3, [r7, #26]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d16b      	bne.n	8004022 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f70:	e057      	b.n	8004022 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d11c      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x26c>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d017      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x26c>
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d114      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d119      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x2ae>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d014      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ffc:	f7fd fe34 	bl	8001c68 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004008:	429a      	cmp	r2, r3
 800400a:	d803      	bhi.n	8004014 <HAL_SPI_TransmitReceive+0x2c6>
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d102      	bne.n	800401a <HAL_SPI_TransmitReceive+0x2cc>
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004020:	e029      	b.n	8004076 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1a2      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x224>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d19d      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f904 	bl	8004248 <SPI_EndRxTxTransaction>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d006      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004052:	e010      	b.n	8004076 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	e000      	b.n	8004076 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004074:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800408a:	4618      	mov	r0, r3
 800408c:	3730      	adds	r7, #48	; 0x30
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040a4:	f7fd fde0 	bl	8001c68 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	4413      	add	r3, r2
 80040b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040b4:	f7fd fdd8 	bl	8001c68 <HAL_GetTick>
 80040b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ba:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	015b      	lsls	r3, r3, #5
 80040c0:	0d1b      	lsrs	r3, r3, #20
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ca:	e054      	b.n	8004176 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d050      	beq.n	8004176 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040d4:	f7fd fdc8 	bl	8001c68 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d902      	bls.n	80040ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d13d      	bne.n	8004166 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004102:	d111      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410c:	d004      	beq.n	8004118 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004116:	d107      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004126:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004130:	d10f      	bne.n	8004152 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004150:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e017      	b.n	8004196 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	3b01      	subs	r3, #1
 8004174:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	429a      	cmp	r2, r3
 8004192:	d19b      	bne.n	80040cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000008 	.word	0x20000008

080041a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b8:	d111      	bne.n	80041de <SPI_EndRxTransaction+0x3a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c2:	d004      	beq.n	80041ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041cc:	d107      	bne.n	80041de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e6:	d117      	bne.n	8004218 <SPI_EndRxTransaction+0x74>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f0:	d112      	bne.n	8004218 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2101      	movs	r1, #1
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7ff ff49 	bl	8004094 <SPI_WaitFlagStateUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01a      	beq.n	800423e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e013      	b.n	8004240 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2200      	movs	r2, #0
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff ff36 	bl	8004094 <SPI_WaitFlagStateUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e000      	b.n	8004240 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff18 	bl	8004094 <SPI_WaitFlagStateUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e000      	b.n	800427c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d001      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e03a      	b.n	8004312 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_TIM_Base_Start_IT+0x98>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x58>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c6:	d009      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x58>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_TIM_Base_Start_IT+0x9c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x58>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <HAL_TIM_Base_Start_IT+0xa0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d111      	bne.n	8004300 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d010      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	e007      	b.n	8004310 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800

08004328 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e041      	b.n	80043be <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd fafc 	bl	800194c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f000 f9b2 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d122      	bne.n	8004422 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d11b      	bne.n	8004422 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0202 	mvn.w	r2, #2
 80043f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f946 	bl	800469a <HAL_TIM_IC_CaptureCallback>
 800440e:	e005      	b.n	800441c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f939 	bl	8004688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f948 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d122      	bne.n	8004476 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d11b      	bne.n	8004476 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0204 	mvn.w	r2, #4
 8004446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f91c 	bl	800469a <HAL_TIM_IC_CaptureCallback>
 8004462:	e005      	b.n	8004470 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f90f 	bl	8004688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f91e 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d122      	bne.n	80044ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b08      	cmp	r3, #8
 8004490:	d11b      	bne.n	80044ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f06f 0208 	mvn.w	r2, #8
 800449a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2204      	movs	r2, #4
 80044a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f8f2 	bl	800469a <HAL_TIM_IC_CaptureCallback>
 80044b6:	e005      	b.n	80044c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f8e5 	bl	8004688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f8f4 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d122      	bne.n	800451e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d11b      	bne.n	800451e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f06f 0210 	mvn.w	r2, #16
 80044ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2208      	movs	r2, #8
 80044f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8c8 	bl	800469a <HAL_TIM_IC_CaptureCallback>
 800450a:	e005      	b.n	8004518 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f8bb 	bl	8004688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8ca 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d10e      	bne.n	800454a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0201 	mvn.w	r2, #1
 8004542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fd f905 	bl	8001754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b80      	cmp	r3, #128	; 0x80
 8004556:	d10e      	bne.n	8004576 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d107      	bne.n	8004576 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800456e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fb4f 	bl	8004c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d10e      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d107      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800459a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f88e 	bl	80046be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d10e      	bne.n	80045ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d107      	bne.n	80045ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f06f 0220 	mvn.w	r2, #32
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fb1a 	bl	8004c02 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e046      	b.n	8004680 <HAL_TIM_OC_ConfigChannel+0xa8>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	d839      	bhi.n	8004674 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800463d 	.word	0x0800463d
 800460c:	08004675 	.word	0x08004675
 8004610:	08004675 	.word	0x08004675
 8004614:	08004675 	.word	0x08004675
 8004618:	0800464b 	.word	0x0800464b
 800461c:	08004675 	.word	0x08004675
 8004620:	08004675 	.word	0x08004675
 8004624:	08004675 	.word	0x08004675
 8004628:	08004659 	.word	0x08004659
 800462c:	08004675 	.word	0x08004675
 8004630:	08004675 	.word	0x08004675
 8004634:	08004675 	.word	0x08004675
 8004638:	08004667 	.word	0x08004667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f8a6 	bl	8004794 <TIM_OC1_SetConfig>
      break;
 8004648:	e015      	b.n	8004676 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f905 	bl	8004860 <TIM_OC2_SetConfig>
      break;
 8004656:	e00e      	b.n	8004676 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f968 	bl	8004934 <TIM_OC3_SetConfig>
      break;
 8004664:	e007      	b.n	8004676 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f9cb 	bl	8004a08 <TIM_OC4_SetConfig>
      break;
 8004672:	e000      	b.n	8004676 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <TIM_Base_SetConfig+0xb8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d007      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a26      	ldr	r2, [pc, #152]	; (800478c <TIM_Base_SetConfig+0xbc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a25      	ldr	r2, [pc, #148]	; (8004790 <TIM_Base_SetConfig+0xc0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <TIM_Base_SetConfig+0xb8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <TIM_Base_SetConfig+0xbc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a18      	ldr	r2, [pc, #96]	; (8004790 <TIM_Base_SetConfig+0xc0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <TIM_Base_SetConfig+0xb8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800

08004794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 0302 	bic.w	r3, r3, #2
 80047dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a1c      	ldr	r2, [pc, #112]	; (800485c <TIM_OC1_SetConfig+0xc8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10c      	bne.n	800480a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f023 0308 	bic.w	r3, r3, #8
 80047f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <TIM_OC1_SetConfig+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d111      	bne.n	8004836 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	621a      	str	r2, [r3, #32]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00

08004860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	f023 0210 	bic.w	r2, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0320 	bic.w	r3, r3, #32
 80048aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <TIM_OC2_SetConfig+0xd0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10d      	bne.n	80048dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a14      	ldr	r2, [pc, #80]	; (8004930 <TIM_OC2_SetConfig+0xd0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d113      	bne.n	800490c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	621a      	str	r2, [r3, #32]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	40012c00 	.word	0x40012c00

08004934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800497c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <TIM_OC3_SetConfig+0xd0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10d      	bne.n	80049ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <TIM_OC3_SetConfig+0xd0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d113      	bne.n	80049de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	621a      	str	r2, [r3, #32]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40012c00 	.word	0x40012c00

08004a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0f      	ldr	r2, [pc, #60]	; (8004aa0 <TIM_OC4_SetConfig+0x98>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d109      	bne.n	8004a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr
 8004aa0:	40012c00 	.word	0x40012c00

08004aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e046      	b.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b08:	d009      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10c      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800

08004b60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e03d      	b.n	8004bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e03f      	b.n	8004cb8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fc fed5 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2224      	movs	r2, #36	; 0x24
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f828 	bl	8004cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c8e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cfa:	f023 030c 	bic.w	r3, r3, #12
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2c      	ldr	r2, [pc, #176]	; (8004dd4 <UART_SetConfig+0x114>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d28:	f7fe fc3e 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	e002      	b.n	8004d36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fe fc26 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8004d34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009a      	lsls	r2, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	0119      	lsls	r1, r3, #4
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2064      	movs	r0, #100	; 0x64
 8004d76:	fb00 f303 	mul.w	r3, r0, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d8c:	4419      	add	r1, r3
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009a      	lsls	r2, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <UART_SetConfig+0x118>)
 8004da6:	fba3 0302 	umull	r0, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2064      	movs	r0, #100	; 0x64
 8004dae:	fb00 f303 	mul.w	r3, r0, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	3332      	adds	r3, #50	; 0x32
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <UART_SetConfig+0x118>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	440a      	add	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	2600      	movs	r6, #0
 8004de0:	4d0c      	ldr	r5, [pc, #48]	; (8004e14 <__libc_init_array+0x38>)
 8004de2:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de4:	1b64      	subs	r4, r4, r5
 8004de6:	10a4      	asrs	r4, r4, #2
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	f000 f822 	bl	8004e34 <_init>
 8004df0:	2600      	movs	r6, #0
 8004df2:	4d0a      	ldr	r5, [pc, #40]	; (8004e1c <__libc_init_array+0x40>)
 8004df4:	4c0a      	ldr	r4, [pc, #40]	; (8004e20 <__libc_init_array+0x44>)
 8004df6:	1b64      	subs	r4, r4, r5
 8004df8:	10a4      	asrs	r4, r4, #2
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	08004e84 	.word	0x08004e84
 8004e18:	08004e84 	.word	0x08004e84
 8004e1c:	08004e84 	.word	0x08004e84
 8004e20:	08004e88 	.word	0x08004e88

08004e24 <memset>:
 8004e24:	4603      	mov	r3, r0
 8004e26:	4402      	add	r2, r0
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d100      	bne.n	8004e2e <memset+0xa>
 8004e2c:	4770      	bx	lr
 8004e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e32:	e7f9      	b.n	8004e28 <memset+0x4>

08004e34 <_init>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr

08004e40 <_fini>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr
