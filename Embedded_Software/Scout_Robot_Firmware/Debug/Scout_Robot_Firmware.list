
Scout_Robot_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008134  08008134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800817c  0800817c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008184  08008184  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800818c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  2000000c  08008198  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08008198  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b839  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef6  00000000  00000000  0003b875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  0003e770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  0003ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003781  00000000  00000000  000416d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c55f  00000000  00000000  00044e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bf41  00000000  00000000  000613b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d2f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006934  00000000  00000000  0016d34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800811c 	.word	0x0800811c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800811c 	.word	0x0800811c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <BMP280_Read8>:
//
//	Functions
//

uint8_t BMP280_Read8(uint8_t addr)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af04      	add	r7, sp, #16
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <BMP280_Read8+0x38>)
 80004dc:	6818      	ldr	r0, [r3, #0]
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	230a      	movs	r3, #10
 80004e4:	9302      	str	r3, [sp, #8]
 80004e6:	2301      	movs	r3, #1
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	f107 030f 	add.w	r3, r7, #15
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2301      	movs	r3, #1
 80004f2:	21ec      	movs	r1, #236	; 0xec
 80004f4:	f003 fbdc 	bl	8003cb0 <HAL_I2C_Mem_Read>
  return tmp;
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000028 	.word	0x20000028

08000508 <BMP280_Read16>:

uint16_t BMP280_Read16(uint8_t addr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af04      	add	r7, sp, #16
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <BMP280_Read16+0x40>)
 8000514:	6818      	ldr	r0, [r3, #0]
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	b29a      	uxth	r2, r3
 800051a:	230a      	movs	r3, #10
 800051c:	9302      	str	r3, [sp, #8]
 800051e:	2302      	movs	r3, #2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2301      	movs	r3, #1
 800052a:	21ec      	movs	r1, #236	; 0xec
 800052c:	f003 fbc0 	bl	8003cb0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000530:	7b3b      	ldrb	r3, [r7, #12]
 8000532:	021b      	lsls	r3, r3, #8
 8000534:	b21a      	sxth	r2, r3
 8000536:	7b7b      	ldrb	r3, [r7, #13]
 8000538:	b21b      	sxth	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	b21b      	sxth	r3, r3
 800053e:	b29b      	uxth	r3, r3
}
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000028 	.word	0x20000028

0800054c <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffd5 	bl	8000508 <BMP280_Read16>
 800055e:	4603      	mov	r3, r0
 8000560:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000562:	89fb      	ldrh	r3, [r7, #14]
 8000564:	0a1b      	lsrs	r3, r3, #8
 8000566:	b29b      	uxth	r3, r3
 8000568:	b21a      	sxth	r2, r3
 800056a:	89fb      	ldrh	r3, [r7, #14]
 800056c:	021b      	lsls	r3, r3, #8
 800056e:	b21b      	sxth	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	b21b      	sxth	r3, r3
 8000574:	b29b      	uxth	r3, r3
}
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <BMP280_Write8>:

void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af04      	add	r7, sp, #16
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <BMP280_Write8+0x34>)
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	b29a      	uxth	r2, r3
 8000598:	230a      	movs	r3, #10
 800059a:	9302      	str	r3, [sp, #8]
 800059c:	2301      	movs	r3, #1
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	1dbb      	adds	r3, r7, #6
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2301      	movs	r3, #1
 80005a6:	21ec      	movs	r1, #236	; 0xec
 80005a8:	f003 fa6e 	bl	8003a88 <HAL_I2C_Mem_Write>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000028 	.word	0x20000028

080005b8 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af04      	add	r7, sp, #16
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <BMP280_Read24+0x40>)
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	230a      	movs	r3, #10
 80005cc:	9302      	str	r3, [sp, #8]
 80005ce:	2303      	movs	r3, #3
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	21ec      	movs	r1, #236	; 0xec
 80005dc:	f003 fb68 	bl	8003cb0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80005e0:	7b3b      	ldrb	r3, [r7, #12]
 80005e2:	041a      	lsls	r2, r3, #16
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	021b      	lsls	r3, r3, #8
 80005e8:	4313      	orrs	r3, r2
 80005ea:	7bba      	ldrb	r2, [r7, #14]
 80005ec:	4313      	orrs	r3, r2
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028

080005fc <BMP280_Init>:

void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution,  uint8_t mode)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
 8000608:	4613      	mov	r3, r2
 800060a:	70bb      	strb	r3, [r7, #2]
	i2c_h = i2c_handler;
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <BMP280_Init+0x98>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
	if (mode > BMP280_NORMALMODE)
 8000612:	78bb      	ldrb	r3, [r7, #2]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d901      	bls.n	800061c <BMP280_Init+0x20>
		    mode = BMP280_NORMALMODE;
 8000618:	2303      	movs	r3, #3
 800061a:	70bb      	strb	r3, [r7, #2]
		_mode = mode;
 800061c:	4a1e      	ldr	r2, [pc, #120]	; (8000698 <BMP280_Init+0x9c>)
 800061e:	78bb      	ldrb	r3, [r7, #2]
 8000620:	7013      	strb	r3, [r2, #0]
		if(mode == BMP280_FORCEDMODE)
 8000622:	78bb      	ldrb	r3, [r7, #2]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d101      	bne.n	800062c <BMP280_Init+0x30>
			mode = BMP280_SLEEPMODE;
 8000628:	2300      	movs	r3, #0
 800062a:	70bb      	strb	r3, [r7, #2]

		if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b05      	cmp	r3, #5
 8000630:	d901      	bls.n	8000636 <BMP280_Init+0x3a>
			temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8000632:	2305      	movs	r3, #5
 8000634:	70fb      	strb	r3, [r7, #3]
		_temperature_res = temperature_resolution;
 8000636:	4a19      	ldr	r2, [pc, #100]	; (800069c <BMP280_Init+0xa0>)
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	7013      	strb	r3, [r2, #0]

		while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800063c:	bf00      	nop
 800063e:	20d0      	movs	r0, #208	; 0xd0
 8000640:	f7ff ff44 	bl	80004cc <BMP280_Read8>
 8000644:	4603      	mov	r3, r0
 8000646:	2b58      	cmp	r3, #88	; 0x58
 8000648:	d1f9      	bne.n	800063e <BMP280_Init+0x42>

		/* read calibration data */
		t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800064a:	2088      	movs	r0, #136	; 0x88
 800064c:	f7ff ff7e 	bl	800054c <BMP280_Read16LE>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <BMP280_Init+0xa4>)
 8000656:	801a      	strh	r2, [r3, #0]
		t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8000658:	208a      	movs	r0, #138	; 0x8a
 800065a:	f7ff ff77 	bl	800054c <BMP280_Read16LE>
 800065e:	4603      	mov	r3, r0
 8000660:	b21a      	sxth	r2, r3
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <BMP280_Init+0xa8>)
 8000664:	801a      	strh	r2, [r3, #0]
		t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8000666:	208c      	movs	r0, #140	; 0x8c
 8000668:	f7ff ff70 	bl	800054c <BMP280_Read16LE>
 800066c:	4603      	mov	r3, r0
 800066e:	b21a      	sxth	r2, r3
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <BMP280_Init+0xac>)
 8000672:	801a      	strh	r2, [r3, #0]
		BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | mode));
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	015b      	lsls	r3, r3, #5
 8000678:	b25a      	sxtb	r2, r3
 800067a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800067e:	4313      	orrs	r3, r2
 8000680:	b25b      	sxtb	r3, r3
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	20f4      	movs	r0, #244	; 0xf4
 8000688:	f7ff ff7a 	bl	8000580 <BMP280_Write8>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	2000002d 	.word	0x2000002d
 800069c:	2000002c 	.word	0x2000002c
 80006a0:	20000032 	.word	0x20000032
 80006a4:	2000002e 	.word	0x2000002e
 80006a8:	20000030 	.word	0x20000030

080006ac <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80006b2:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <BMP280_ReadTemperature+0xfc>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d16d      	bne.n	8000796 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80006ba:	20f4      	movs	r0, #244	; 0xf4
 80006bc:	f7ff ff06 	bl	80004cc <BMP280_Read8>
 80006c0:	4603      	mov	r3, r0
 80006c2:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	4619      	mov	r1, r3
 80006d8:	20f4      	movs	r0, #244	; 0xf4
 80006da:	f7ff ff51 	bl	8000580 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80006de:	20f4      	movs	r0, #244	; 0xf4
 80006e0:	f7ff fef4 	bl	80004cc <BMP280_Read8>
 80006e4:	4603      	mov	r3, r0
 80006e6:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80006e8:	7dbb      	ldrb	r3, [r7, #22]
 80006ea:	f003 0303 	and.w	r3, r3, #3
 80006ee:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80006f0:	7dbb      	ldrb	r3, [r7, #22]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d14f      	bne.n	8000796 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80006f6:	20f4      	movs	r0, #244	; 0xf4
 80006f8:	f7ff fee8 	bl	80004cc <BMP280_Read8>
 80006fc:	4603      	mov	r3, r0
 80006fe:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8000700:	7dbb      	ldrb	r3, [r7, #22]
 8000702:	f003 0303 	and.w	r3, r3, #3
 8000706:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8000708:	7dbb      	ldrb	r3, [r7, #22]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800070e:	e7f2      	b.n	80006f6 <BMP280_ReadTemperature+0x4a>
				  break;
 8000710:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8000712:	20fa      	movs	r0, #250	; 0xfa
 8000714:	f7ff ff50 	bl	80005b8 <BMP280_Read24>
 8000718:	4603      	mov	r3, r0
 800071a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	111b      	asrs	r3, r3, #4
 8000720:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	10da      	asrs	r2, r3, #3
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <BMP280_ReadTemperature+0x100>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800072e:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <BMP280_ReadTemperature+0x104>)
 8000730:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000734:	fb02 f303 	mul.w	r3, r2, r3
 8000738:	12db      	asrs	r3, r3, #11
 800073a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	111b      	asrs	r3, r3, #4
 8000740:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <BMP280_ReadTemperature+0x100>)
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	1112      	asrs	r2, r2, #4
 800074a:	4918      	ldr	r1, [pc, #96]	; (80007ac <BMP280_ReadTemperature+0x100>)
 800074c:	8809      	ldrh	r1, [r1, #0]
 800074e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000750:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000754:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <BMP280_ReadTemperature+0x108>)
 8000758:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800075c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000760:	139b      	asrs	r3, r3, #14
 8000762:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4413      	add	r3, r2
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <BMP280_ReadTemperature+0x10c>)
 800076c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <BMP280_ReadTemperature+0x10c>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3380      	adds	r3, #128	; 0x80
 800077a:	121b      	asrs	r3, r3, #8
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000784:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8000788:	edd7 7a01 	vldr	s15, [r7, #4]
 800078c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80007bc <BMP280_ReadTemperature+0x110>
 8000790:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000794:	e001      	b.n	800079a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8000796:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80007c0 <BMP280_ReadTemperature+0x114>
}
 800079a:	eef0 7a47 	vmov.f32	s15, s14
 800079e:	eeb0 0a67 	vmov.f32	s0, s15
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000002d 	.word	0x2000002d
 80007ac:	20000032 	.word	0x20000032
 80007b0:	2000002e 	.word	0x2000002e
 80007b4:	20000030 	.word	0x20000030
 80007b8:	20000034 	.word	0x20000034
 80007bc:	42c80000 	.word	0x42c80000
 80007c0:	c2c60000 	.word	0xc2c60000

080007c4 <BMP280_Read_Temperature>:


uint8_t BMP280_Read_Temperature(float *temperature)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	  *temperature = BMP280_ReadTemperature();
 80007cc:	f7ff ff6e 	bl	80006ac <BMP280_ReadTemperature>
 80007d0:	eef0 7a40 	vmov.f32	s15, s0
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	edc3 7a00 	vstr	s15, [r3]
	  if(*temperature == -99){
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	edd3 7a00 	vldr	s15, [r3]
 80007e0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80007fc <BMP280_Read_Temperature+0x38>
 80007e4:	eef4 7a47 	vcmp.f32	s15, s14
 80007e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ec:	d101      	bne.n	80007f2 <BMP280_Read_Temperature+0x2e>
		  return -1;
 80007ee:	23ff      	movs	r3, #255	; 0xff
 80007f0:	e000      	b.n	80007f4 <BMP280_Read_Temperature+0x30>
	  }
	  return 0;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	c2c60000 	.word	0xc2c60000

08000800 <TEMT6000_Init>:
ADC_HandleTypeDef *temt6000_adc;

volatile uint16_t AdcValue[TEMT6000_ADC_SAMPLES];

TEMT6000_STATUS TEMT6000_Init(ADC_HandleTypeDef *hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	temt6000_adc = hadc;
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <TEMT6000_Init+0x30>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]

	if(HAL_OK == HAL_ADC_Start_DMA(temt6000_adc, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <TEMT6000_Init+0x30>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2208      	movs	r2, #8
 8000814:	4907      	ldr	r1, [pc, #28]	; (8000834 <TEMT6000_Init+0x34>)
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fd20 	bl	800225c <HAL_ADC_Start_DMA>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <TEMT6000_Init+0x26>
		return TEMT6000_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <TEMT6000_Init+0x28>

	return TEMT6000_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000038 	.word	0x20000038
 8000834:	2000003c 	.word	0x2000003c

08000838 <TEMT6000_ReadLight>:

TEMT6000_STATUS TEMT6000_ReadLight(float *Result)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	uint32_t AdcAverage;
	uint8_t i;

	AdcAverage = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]

	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	72fb      	strb	r3, [r7, #11]
 8000848:	e00b      	b.n	8000862 <TEMT6000_ReadLight+0x2a>
	{
		AdcAverage += AdcValue[i];
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <TEMT6000_ReadLight+0x74>)
 800084e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4413      	add	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 800085c:	7afb      	ldrb	r3, [r7, #11]
 800085e:	3301      	adds	r3, #1
 8000860:	72fb      	strb	r3, [r7, #11]
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	2b07      	cmp	r3, #7
 8000866:	d9f0      	bls.n	800084a <TEMT6000_ReadLight+0x12>
	}

	AdcAverage /= TEMT6000_ADC_SAMPLES;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	60fb      	str	r3, [r7, #12]

	*Result = ((((float)AdcAverage / (float)TEMT6000_ADC_MAX_VALUE) * (float)TEMT6000_POWER_SUPPLY) / TEMT6000_RESISTOR_OHMS) * 2000000.0;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000878:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80008b0 <TEMT6000_ReadLight+0x78>
 800087c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000880:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80008b4 <TEMT6000_ReadLight+0x7c>
 8000884:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000888:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80008b8 <TEMT6000_ReadLight+0x80>
 800088c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000890:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80008bc <TEMT6000_ReadLight+0x84>
 8000894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	edc3 7a00 	vstr	s15, [r3]

	return TEMT6000_OK;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	2000003c 	.word	0x2000003c
 80008b0:	45800000 	.word	0x45800000
 80008b4:	40533333 	.word	0x40533333
 80008b8:	447a0000 	.word	0x447a0000
 80008bc:	49f42400 	.word	0x49f42400

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f001 f8fd 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f861 	bl	8000990 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008ce:	f000 f8b0 	bl	8000a32 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 fc65 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d6:	f000 fc3d 	bl	8001154 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008da:	f000 fc0b 	bl	80010f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008de:	f000 f8d3 	bl	8000a88 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008e2:	f000 f977 	bl	8000bd4 <MX_ADC2_Init>
  MX_I2C1_Init();
 80008e6:	f000 fa0d 	bl	8000d04 <MX_I2C1_Init>
  MX_I2C2_Init();
 80008ea:	f000 fa4b 	bl	8000d84 <MX_I2C2_Init>
  MX_SPI2_Init();
 80008ee:	f000 fa89 	bl	8000e04 <MX_SPI2_Init>
  MX_TIM1_Init();
 80008f2:	f000 fac5 	bl	8000e80 <MX_TIM1_Init>
  MX_TIM3_Init();
 80008f6:	f000 fb51 	bl	8000f9c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008fa:	f000 fbcb 	bl	8001094 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_20BIT, BMP280_FORCEDMODE);
 80008fe:	2201      	movs	r2, #1
 8000900:	2105      	movs	r1, #5
 8000902:	481e      	ldr	r0, [pc, #120]	; (800097c <main+0xbc>)
 8000904:	f7ff fe7a 	bl	80005fc <BMP280_Init>
  HAL_Delay(3000);
 8000908:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800090c:	f001 f956 	bl	8001bbc <HAL_Delay>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <main+0xc0>)
 8000914:	f005 fc2a 	bl	800616c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	4819      	ldr	r0, [pc, #100]	; (8000980 <main+0xc0>)
 800091c:	f005 fc26 	bl	800616c <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000920:	2108      	movs	r1, #8
 8000922:	4817      	ldr	r0, [pc, #92]	; (8000980 <main+0xc0>)
 8000924:	f005 faba 	bl	8005e9c <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8000928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092c:	f001 f946 	bl	8001bbc <HAL_Delay>
  TEMT6000_Init(&hadc2);
 8000930:	4814      	ldr	r0, [pc, #80]	; (8000984 <main+0xc4>)
 8000932:	f7ff ff65 	bl	8000800 <TEMT6000_Init>
  HAL_Delay(1000);
 8000936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093a:	f001 f93f 	bl	8001bbc <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  float light;
	  	  uint32_t start = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800093e:	2100      	movs	r1, #0
 8000940:	480f      	ldr	r0, [pc, #60]	; (8000980 <main+0xc0>)
 8000942:	f006 f821 	bl	8006988 <HAL_TIM_ReadCapturedValue>
 8000946:	60f8      	str	r0, [r7, #12]
	  	  uint32_t stop = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8000948:	2104      	movs	r1, #4
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <main+0xc0>)
 800094c:	f006 f81c 	bl	8006988 <HAL_TIM_ReadCapturedValue>
 8000950:	60b8      	str	r0, [r7, #8]
	  	  TEMT6000_ReadLight(&TEMT6000_lux);
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <main+0xc8>)
 8000954:	f7ff ff70 	bl	8000838 <TEMT6000_ReadLight>
	  	 	  if(TEMT6000_OK == TEMT6000_ReadLight(&TEMT6000_lux))
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <main+0xc8>)
 800095a:	f7ff ff6d 	bl	8000838 <TEMT6000_ReadLight>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <main+0xaa>
	  	 	  	  {
	  	 	  		 light=TEMT6000_lux;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <main+0xc8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	607b      	str	r3, [r7, #4]
	  	 	  	  }
	  	  BMP280_Read_Temperature(&temperature);
 800096a:	4808      	ldr	r0, [pc, #32]	; (800098c <main+0xcc>)
 800096c:	f7ff ff2a 	bl	80007c4 <BMP280_Read_Temperature>
	  	 // printf("%.1f %.1f %.1f\n", (stop - start) / 58.0f, light, temperature);
	  HAL_Delay(1000);
 8000970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000974:	f001 f922 	bl	8001bbc <HAL_Delay>
  {
 8000978:	e7e1      	b.n	800093e <main+0x7e>
 800097a:	bf00      	nop
 800097c:	200001a4 	.word	0x200001a4
 8000980:	200002fc 	.word	0x200002fc
 8000984:	200000b0 	.word	0x200000b0
 8000988:	20000454 	.word	0x20000454
 800098c:	20000450 	.word	0x20000450

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	; 0x58
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2244      	movs	r2, #68	; 0x44
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 fbb4 	bl	800810c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009b6:	f003 fde1 	bl	800457c <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c0:	f000 fcb0 	bl	8001324 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	2303      	movs	r3, #3
 80009d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80009da:	2314      	movs	r3, #20
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009de:	2307      	movs	r3, #7
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fe1a 	bl	8004628 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009fa:	f000 fc93 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2303      	movs	r3, #3
 8000a04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	2104      	movs	r1, #4
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 f9e2 	bl	8004de0 <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a22:	f000 fc7f 	bl	8001324 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a26:	f004 fb9f 	bl	8005168 <HAL_RCC_EnableCSS>
}
 8000a2a:	bf00      	nop
 8000a2c:	3758      	adds	r7, #88	; 0x58
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b0a2      	sub	sp, #136	; 0x88
 8000a36:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2288      	movs	r2, #136	; 0x88
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 fb64 	bl	800810c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a48:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a4e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000a50:	2303      	movs	r3, #3
 8000a52:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a6c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 fc05 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000a7c:	f000 fc52 	bl	8001324 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3788      	adds	r7, #136	; 0x88
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000aac:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <MX_ADC1_Init+0x138>)
 8000aae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab0:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abc:	4b3f      	ldr	r3, [pc, #252]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ac8:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ace:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000ada:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae0:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae8:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000af4:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0a:	482c      	ldr	r0, [pc, #176]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000b0c:	f001 fa50 	bl	8001fb0 <HAL_ADC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b16:	f000 fc05 	bl	8001324 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4825      	ldr	r0, [pc, #148]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000b26:	f002 f9a3 	bl	8002e70 <HAL_ADCEx_MultiModeConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b30:	f000 fbf8 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_ADC1_Init+0x13c>)
 8000b36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b38:	2306      	movs	r3, #6
 8000b3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b40:	237f      	movs	r3, #127	; 0x7f
 8000b42:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b44:	2304      	movs	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481a      	ldr	r0, [pc, #104]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000b52:	f001 fc5d 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b5c:	f000 fbe2 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_ADC1_Init+0x140>)
 8000b62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b64:	230c      	movs	r3, #12
 8000b66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4813      	ldr	r0, [pc, #76]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000b6e:	f001 fc4f 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000b78:	f000 fbd4 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_ADC1_Init+0x144>)
 8000b7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b80:	2312      	movs	r3, #18
 8000b82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000b8a:	f001 fc41 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000b94:	f000 fbc6 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_ADC1_Init+0x148>)
 8000b9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b9c:	2318      	movs	r3, #24
 8000b9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_ADC1_Init+0x134>)
 8000ba6:	f001 fc33 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000bb0:	f000 fbb8 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000004c 	.word	0x2000004c
 8000bc0:	50040000 	.word	0x50040000
 8000bc4:	04300002 	.word	0x04300002
 8000bc8:	08600004 	.word	0x08600004
 8000bcc:	0c900008 	.word	0x0c900008
 8000bd0:	10c00010 	.word	0x10c00010

08000bd4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bea:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000bec:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <MX_ADC2_Init+0x124>)
 8000bee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bf0:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfc:	4b3d      	ldr	r3, [pc, #244]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c08:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c0e:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 5;
 8000c1a:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c1c:	2205      	movs	r2, #5
 8000c1e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c20:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c28:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c4a:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c4c:	f001 f9b0 	bl	8001fb0 <HAL_ADC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000c56:	f000 fb65 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <MX_ADC2_Init+0x128>)
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c66:	237f      	movs	r3, #127	; 0x7f
 8000c68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	481f      	ldr	r0, [pc, #124]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c78:	f001 fbca 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000c82:	f000 fb4f 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c86:	230c      	movs	r3, #12
 8000c88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000c90:	f001 fbbe 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 8000c9a:	f000 fb43 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c9e:	2312      	movs	r3, #18
 8000ca0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000ca8:	f001 fbb2 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8000cb2:	f000 fb37 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cb6:	2318      	movs	r3, #24
 8000cb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000cc0:	f001 fba6 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC2_Init+0xfa>
  {
    Error_Handler();
 8000cca:	f000 fb2b 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_ADC2_Init+0x12c>)
 8000cd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_ADC2_Init+0x120>)
 8000cde:	f001 fb97 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC2_Init+0x118>
  {
    Error_Handler();
 8000ce8:	f000 fb1c 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000b0 	.word	0x200000b0
 8000cf8:	50040100 	.word	0x50040100
 8000cfc:	2e300800 	.word	0x2e300800
 8000d00:	14f00020 	.word	0x14f00020

08000d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <MX_I2C1_Init+0x78>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <MX_I2C1_Init+0x7c>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d40:	f002 fe12 	bl	8003968 <HAL_I2C_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d4a:	f000 faeb 	bl	8001324 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4809      	ldr	r0, [pc, #36]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d52:	f003 fb6d 	bl	8004430 <HAL_I2CEx_ConfigAnalogFilter>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d5c:	f000 fae2 	bl	8001324 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d60:	2100      	movs	r1, #0
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_I2C1_Init+0x74>)
 8000d64:	f003 fbaf 	bl	80044c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d6e:	f000 fad9 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200001a4 	.word	0x200001a4
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	00702991 	.word	0x00702991

08000d84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <MX_I2C2_Init+0x78>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702991;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000d90:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <MX_I2C2_Init+0x7c>)
 8000d92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dbe:	480e      	ldr	r0, [pc, #56]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000dc0:	f002 fdd2 	bl	8003968 <HAL_I2C_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dca:	f000 faab 	bl	8001324 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000dd2:	f003 fb2d 	bl	8004430 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ddc:	f000 faa2 	bl	8001324 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000de0:	2100      	movs	r1, #0
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_I2C2_Init+0x74>)
 8000de4:	f003 fb6f 	bl	80044c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fa99 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001f8 	.word	0x200001f8
 8000dfc:	40005800 	.word	0x40005800
 8000e00:	00702991 	.word	0x00702991

08000e04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <MX_SPI2_Init+0x78>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e52:	2207      	movs	r2, #7
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_SPI2_Init+0x74>)
 8000e64:	f004 fec8 	bl	8005bf8 <HAL_SPI_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 fa59 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000024c 	.word	0x2000024c
 8000e7c:	40003800 	.word	0x40003800

08000e80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	; 0x30
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eae:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000eb0:	4a39      	ldr	r2, [pc, #228]	; (8000f98 <MX_TIM1_Init+0x118>)
 8000eb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eb4:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ec0:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eda:	482e      	ldr	r0, [pc, #184]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000edc:	f004 ff2f 	bl	8005d3e <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000ee6:	f000 fa1d 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000eea:	482a      	ldr	r0, [pc, #168]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000eec:	f005 f8dc 	bl	80060a8 <HAL_TIM_IC_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ef6:	f000 fa15 	bl	8001324 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4822      	ldr	r0, [pc, #136]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000f0a:	f005 fcfb 	bl	8006904 <HAL_TIM_SlaveConfigSynchro>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f14:	f000 fa06 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000f2c:	f006 fb6e 	bl	800760c <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000f36:	f000 f9f5 	bl	8001324 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4810      	ldr	r0, [pc, #64]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000f52:	f005 fb26 	bl	80065a2 <HAL_TIM_IC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000f5c:	f000 f9e2 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	2204      	movs	r2, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000f68:	f005 fb1b 	bl	80065a2 <HAL_TIM_IC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000f72:	f000 f9d7 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM1_Init+0x114>)
 8000f7e:	f005 fb10 	bl	80065a2 <HAL_TIM_IC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000f88:	f000 f9cc 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3730      	adds	r7, #48	; 0x30
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200002b0 	.word	0x200002b0
 8000f98:	40012c00 	.word	0x40012c00

08000f9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	615a      	str	r2, [r3, #20]
 8000fbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fc0:	4b32      	ldr	r3, [pc, #200]	; (800108c <MX_TIM3_Init+0xf0>)
 8000fc2:	4a33      	ldr	r2, [pc, #204]	; (8001090 <MX_TIM3_Init+0xf4>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <MX_TIM3_Init+0xf0>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <MX_TIM3_Init+0xf0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_TIM3_Init+0xf0>)
 8000fd4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000fd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <MX_TIM3_Init+0xf0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	; (800108c <MX_TIM3_Init+0xf0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fe6:	4829      	ldr	r0, [pc, #164]	; (800108c <MX_TIM3_Init+0xf0>)
 8000fe8:	f004 ff00 	bl	8005dec <HAL_TIM_PWM_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ff2:	f000 f997 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4821      	ldr	r0, [pc, #132]	; (800108c <MX_TIM3_Init+0xf0>)
 8001006:	f006 fb01 	bl	800760c <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001010:	f000 f988 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001014:	2360      	movs	r3, #96	; 0x60
 8001016:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <MX_TIM3_Init+0xf0>)
 800102c:	f005 fb56 	bl	80066dc <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001036:	f000 f975 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2204      	movs	r2, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4812      	ldr	r0, [pc, #72]	; (800108c <MX_TIM3_Init+0xf0>)
 8001042:	f005 fb4b 	bl	80066dc <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800104c:	f000 f96a 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	2208      	movs	r2, #8
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_TIM3_Init+0xf0>)
 8001058:	f005 fb40 	bl	80066dc <HAL_TIM_PWM_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001062:	f000 f95f 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	220c      	movs	r2, #12
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_TIM3_Init+0xf0>)
 800106e:	f005 fb35 	bl	80066dc <HAL_TIM_PWM_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001078:	f000 f954 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <MX_TIM3_Init+0xf0>)
 800107e:	f000 fbc1 	bl	8001804 <HAL_TIM_MspPostInit>

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002fc 	.word	0x200002fc
 8001090:	40000400 	.word	0x40000400

08001094 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_USART1_UART_Init+0x58>)
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <MX_USART1_UART_Init+0x5c>)
 800109c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010d8:	f006 fb3e 	bl	8007758 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 f91f 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000348 	.word	0x20000348
 80010f0:	40013800 	.word	0x40013800

080010f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART2_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <MX_USART2_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART2_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001138:	f006 fb0e 	bl	8007758 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f8ef 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200003cc 	.word	0x200003cc
 8001150:	40004400 	.word	0x40004400

08001154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_DMA_Init+0x48>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <MX_DMA_Init+0x48>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6493      	str	r3, [r2, #72]	; 0x48
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <MX_DMA_Init+0x48>)
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	200b      	movs	r0, #11
 8001178:	f002 f805 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800117c:	200b      	movs	r0, #11
 800117e:	f002 f81e 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	200c      	movs	r0, #12
 8001188:	f001 fffd 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800118c:	200c      	movs	r0, #12
 800118e:	f002 f816 	bl	80031be <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	4b57      	ldr	r3, [pc, #348]	; (8001314 <MX_GPIO_Init+0x174>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a56      	ldr	r2, [pc, #344]	; (8001314 <MX_GPIO_Init+0x174>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b54      	ldr	r3, [pc, #336]	; (8001314 <MX_GPIO_Init+0x174>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	4b51      	ldr	r3, [pc, #324]	; (8001314 <MX_GPIO_Init+0x174>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <MX_GPIO_Init+0x174>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <MX_GPIO_Init+0x174>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <MX_GPIO_Init+0x174>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <MX_GPIO_Init+0x174>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b48      	ldr	r3, [pc, #288]	; (8001314 <MX_GPIO_Init+0x174>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b45      	ldr	r3, [pc, #276]	; (8001314 <MX_GPIO_Init+0x174>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a44      	ldr	r2, [pc, #272]	; (8001314 <MX_GPIO_Init+0x174>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b42      	ldr	r3, [pc, #264]	; (8001314 <MX_GPIO_Init+0x174>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <MX_GPIO_Init+0x174>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <MX_GPIO_Init+0x174>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <MX_GPIO_Init+0x174>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, US_SENS_B_TRIG_Pin|US_SENS_C_TRIG_Pin|LD2_Pin|CHRG_EN_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f649 0132 	movw	r1, #38962	; 0x9832
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f002 fb7e 	bl	8003938 <HAL_GPIO_WritePin>
                          |PWR_LEDS_EN_Pin|MOT_D_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|NRF_CE_Pin|US_SENS_A_TRIG_Pin|WSLED_DIN_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f241 0123 	movw	r1, #4131	; 0x1023
 8001242:	4835      	ldr	r0, [pc, #212]	; (8001318 <MX_GPIO_Init+0x178>)
 8001244:	f002 fb78 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOT_C_DIR_Pin|MOT_B_DIR_Pin|MOT_A_DIR_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800124e:	4833      	ldr	r0, [pc, #204]	; (800131c <MX_GPIO_Init+0x17c>)
 8001250:	f002 fb72 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOT_EN_GPIO_Port, MOT_EN_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2104      	movs	r1, #4
 8001258:	4831      	ldr	r0, [pc, #196]	; (8001320 <MX_GPIO_Init+0x180>)
 800125a:	f002 fb6d 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001264:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4829      	ldr	r0, [pc, #164]	; (800131c <MX_GPIO_Init+0x17c>)
 8001276:	f002 f9b5 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_SENS_B_TRIG_Pin US_SENS_C_TRIG_Pin LD2_Pin CHRG_EN_Pin
                           PWR_LEDS_EN_Pin MOT_D_DIR_Pin */
  GPIO_InitStruct.Pin = US_SENS_B_TRIG_Pin|US_SENS_C_TRIG_Pin|LD2_Pin|CHRG_EN_Pin
 800127a:	f649 0332 	movw	r3, #38962	; 0x9832
 800127e:	617b      	str	r3, [r7, #20]
                          |PWR_LEDS_EN_Pin|MOT_D_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f002 f9a5 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin US_SENS_A_TRIG_Pin WSLED_DIN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin|US_SENS_A_TRIG_Pin|WSLED_DIN_Pin;
 800129a:	f241 0323 	movw	r3, #4131	; 0x1023
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4819      	ldr	r0, [pc, #100]	; (8001318 <MX_GPIO_Init+0x178>)
 80012b4:	f002 f996 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80012b8:	2304      	movs	r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4812      	ldr	r0, [pc, #72]	; (8001318 <MX_GPIO_Init+0x178>)
 80012ce:	f002 f989 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_C_DIR_Pin MOT_B_DIR_Pin MOT_A_DIR_Pin */
  GPIO_InitStruct.Pin = MOT_C_DIR_Pin|MOT_B_DIR_Pin|MOT_A_DIR_Pin;
 80012d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0x17c>)
 80012ec:	f002 f97a 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT_EN_Pin */
  GPIO_InitStruct.Pin = MOT_EN_Pin;
 80012f0:	2304      	movs	r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOT_EN_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_GPIO_Init+0x180>)
 8001308:	f002 f96c 	bl	80035e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	48000400 	.word	0x48000400
 800131c:	48000800 	.word	0x48000800
 8001320:	48000c00 	.word	0x48000c00

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_MspInit+0x44>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6613      	str	r3, [r2, #96]	; 0x60
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_MspInit+0x44>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_MspInit+0x44>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_MspInit+0x44>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <HAL_ADC_MspInit+0x1c8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d158      	bne.n	800144c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <HAL_ADC_MspInit+0x1cc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a68      	ldr	r2, [pc, #416]	; (8001544 <HAL_ADC_MspInit+0x1cc>)
 80013a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013a4:	4b67      	ldr	r3, [pc, #412]	; (8001544 <HAL_ADC_MspInit+0x1cc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10b      	bne.n	80013c4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013ac:	4b66      	ldr	r3, [pc, #408]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	4a65      	ldr	r2, [pc, #404]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 80013b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b8:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c4:	4b60      	ldr	r3, [pc, #384]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	4a5f      	ldr	r2, [pc, #380]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d0:	4b5d      	ldr	r3, [pc, #372]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	697b      	ldr	r3, [r7, #20]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = MOT_A_CURR_ADC_Pin|MOT_B_CURR_ADC_Pin|MOT_C_CURR_ADC_Pin|MOT_D_CURR_ADC_Pin;
 80013dc:	230f      	movs	r3, #15
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013e0:	230b      	movs	r3, #11
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4857      	ldr	r0, [pc, #348]	; (800154c <HAL_ADC_MspInit+0x1d4>)
 80013f0:	f002 f8f8 	bl	80035e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 80013f6:	4a57      	ldr	r2, [pc, #348]	; (8001554 <HAL_ADC_MspInit+0x1dc>)
 80013f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013fa:	4b55      	ldr	r3, [pc, #340]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	4b52      	ldr	r3, [pc, #328]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001412:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 8001414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001418:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 800141c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001420:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001422:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001428:	4b49      	ldr	r3, [pc, #292]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800142e:	4848      	ldr	r0, [pc, #288]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 8001430:	f001 fee0 	bl	80031f4 <HAL_DMA_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800143a:	f7ff ff73 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a43      	ldr	r2, [pc, #268]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 8001442:	64da      	str	r2, [r3, #76]	; 0x4c
 8001444:	4a42      	ldr	r2, [pc, #264]	; (8001550 <HAL_ADC_MspInit+0x1d8>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800144a:	e075      	b.n	8001538 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <HAL_ADC_MspInit+0x1e0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d170      	bne.n	8001538 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_ADC_MspInit+0x1cc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a39      	ldr	r2, [pc, #228]	; (8001544 <HAL_ADC_MspInit+0x1cc>)
 800145e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001460:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_ADC_MspInit+0x1cc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10b      	bne.n	8001480 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	4a36      	ldr	r2, [pc, #216]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 800146e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001484:	4a30      	ldr	r2, [pc, #192]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_ADC_MspInit+0x1d0>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BAT_CURR_CHRG_ADC_Pin|BAT_CURR_DISCH_ADC_Pin|V_BAT_ADC_Pin;
 80014b0:	23c1      	movs	r3, #193	; 0xc1
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014b4:	230b      	movs	r3, #11
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f002 f88d 	bl	80035e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIGHT_SENS_ADC_Pin|V_CHRG_ADC_Pin;
 80014ca:	2330      	movs	r3, #48	; 0x30
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014ce:	230b      	movs	r3, #11
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	481b      	ldr	r0, [pc, #108]	; (800154c <HAL_ADC_MspInit+0x1d4>)
 80014de:	f002 f881 	bl	80035e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 80014e4:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_ADC_MspInit+0x1e8>)
 80014e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 8001502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001506:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 800150a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800151c:	480f      	ldr	r0, [pc, #60]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 800151e:	f001 fe69 	bl	80031f4 <HAL_DMA_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001528:	f7ff fefc 	bl	8001324 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 8001530:	64da      	str	r2, [r3, #76]	; 0x4c
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_ADC_MspInit+0x1e4>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001538:	bf00      	nop
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	50040000 	.word	0x50040000
 8001544:	20000458 	.word	0x20000458
 8001548:	40021000 	.word	0x40021000
 800154c:	48000800 	.word	0x48000800
 8001550:	20000114 	.word	0x20000114
 8001554:	40020008 	.word	0x40020008
 8001558:	50040100 	.word	0x50040100
 800155c:	2000015c 	.word	0x2000015c
 8001560:	4002001c 	.word	0x4002001c

08001564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0ae      	sub	sp, #184	; 0xb8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	2288      	movs	r2, #136	; 0x88
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f006 fdc1 	bl	800810c <memset>
  if(hi2c->Instance==I2C1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_I2C_MspInit+0x134>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d13c      	bne.n	800160e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001594:	2340      	movs	r3, #64	; 0x40
 8001596:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001598:	2300      	movs	r3, #0
 800159a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fe6d 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015ac:	f7ff feba 	bl	8001324 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_I2C_MspInit+0x138>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a39      	ldr	r2, [pc, #228]	; (800169c <HAL_I2C_MspInit+0x138>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_I2C_MspInit+0x138>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e2:	2304      	movs	r3, #4
 80015e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ec:	4619      	mov	r1, r3
 80015ee:	482c      	ldr	r0, [pc, #176]	; (80016a0 <HAL_I2C_MspInit+0x13c>)
 80015f0:	f001 fff8 	bl	80035e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_I2C_MspInit+0x138>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_I2C_MspInit+0x138>)
 80015fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_I2C_MspInit+0x138>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800160c:	e040      	b.n	8001690 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_I2C_MspInit+0x140>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d13b      	bne.n	8001690 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800161c:	2300      	movs	r3, #0
 800161e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fe2b 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001630:	f7ff fe78 	bl	8001324 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_I2C_MspInit+0x138>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_I2C_MspInit+0x138>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_I2C_MspInit+0x138>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800164c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001654:	2312      	movs	r3, #18
 8001656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001666:	2304      	movs	r3, #4
 8001668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001670:	4619      	mov	r1, r3
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <HAL_I2C_MspInit+0x13c>)
 8001674:	f001 ffb6 	bl	80035e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_I2C_MspInit+0x138>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_I2C_MspInit+0x138>)
 800167e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001682:	6593      	str	r3, [r2, #88]	; 0x58
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_I2C_MspInit+0x138>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	bf00      	nop
 8001692:	37b8      	adds	r7, #184	; 0xb8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40005400 	.word	0x40005400
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	40005800 	.word	0x40005800

080016a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_SPI_MspInit+0x7c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d128      	bne.n	800171c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_SPI_MspInit+0x80>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <HAL_SPI_MspInit+0x80>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6593      	str	r3, [r2, #88]	; 0x58
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_SPI_MspInit+0x80>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_SPI_MspInit+0x80>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_SPI_MspInit+0x80>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_SPI_MspInit+0x80>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800170c:	2305      	movs	r3, #5
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <HAL_SPI_MspInit+0x84>)
 8001718:	f001 ff64 	bl	80035e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40003800 	.word	0x40003800
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400

08001730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_TIM_Base_MspInit+0x80>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d129      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_TIM_Base_MspInit+0x84>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_TIM_Base_MspInit+0x84>)
 8001758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800175c:	6613      	str	r3, [r2, #96]	; 0x60
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_TIM_Base_MspInit+0x84>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_TIM_Base_MspInit+0x84>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_TIM_Base_MspInit+0x84>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_TIM_Base_MspInit+0x84>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = US_SENS_A_ECHO_Pin|US_SENS_B_ECHO_Pin|US_SENS_C_ECHO_Pin;
 8001782:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001794:	2301      	movs	r3, #1
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f001 ff1f 	bl	80035e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40012c00 	.word	0x40012c00
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_TIM_PWM_MspInit+0x44>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d113      	bne.n	80017f2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_TIM_PWM_MspInit+0x48>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_TIM_PWM_MspInit+0x48>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_TIM_PWM_MspInit+0x48>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	201d      	movs	r0, #29
 80017e8:	f001 fccd 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017ec:	201d      	movs	r0, #29
 80017ee:	f001 fce6 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40000400 	.word	0x40000400
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_TIM_MspPostInit+0x64>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d11c      	bne.n	8001860 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOT_A_PWM_Pin|MOT_B_PWM_Pin|MOT_C_PWM_Pin|MOT_D_PWM_Pin;
 800183e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001842:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001850:	2302      	movs	r3, #2
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 800185c:	f001 fec2 	bl	80035e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40000400 	.word	0x40000400
 800186c:	40021000 	.word	0x40021000
 8001870:	48000800 	.word	0x48000800

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0ae      	sub	sp, #184	; 0xb8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	2288      	movs	r2, #136	; 0x88
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f006 fc39 	bl	800810c <memset>
  if(huart->Instance==USART1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_UART_MspInit+0x134>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d13b      	bne.n	800191c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018a8:	2300      	movs	r3, #0
 80018aa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fce5 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018bc:	f7ff fd32 	bl	8001324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_UART_MspInit+0x138>)
 80018c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c4:	4a39      	ldr	r2, [pc, #228]	; (80019ac <HAL_UART_MspInit+0x138>)
 80018c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ca:	6613      	str	r3, [r2, #96]	; 0x60
 80018cc:	4b37      	ldr	r3, [pc, #220]	; (80019ac <HAL_UART_MspInit+0x138>)
 80018ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_UART_MspInit+0x138>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	4a33      	ldr	r2, [pc, #204]	; (80019ac <HAL_UART_MspInit+0x138>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <HAL_UART_MspInit+0x138>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f0:	23c0      	movs	r3, #192	; 0xc0
 80018f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001908:	2307      	movs	r3, #7
 800190a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001912:	4619      	mov	r1, r3
 8001914:	4826      	ldr	r0, [pc, #152]	; (80019b0 <HAL_UART_MspInit+0x13c>)
 8001916:	f001 fe65 	bl	80035e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191a:	e040      	b.n	800199e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <HAL_UART_MspInit+0x140>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d13b      	bne.n	800199e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001926:	2302      	movs	r3, #2
 8001928:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800192a:	2300      	movs	r3, #0
 800192c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fca4 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800193e:	f7ff fcf1 	bl	8001324 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_UART_MspInit+0x138>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_UART_MspInit+0x138>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	6593      	str	r3, [r2, #88]	; 0x58
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_UART_MspInit+0x138>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_UART_MspInit+0x138>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <HAL_UART_MspInit+0x138>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_UART_MspInit+0x138>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001972:	230c      	movs	r3, #12
 8001974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f001 fe23 	bl	80035e4 <HAL_GPIO_Init>
}
 800199e:	bf00      	nop
 80019a0:	37b8      	adds	r7, #184	; 0xb8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40013800 	.word	0x40013800
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000400 	.word	0x48000400
 80019b4:	40004400 	.word	0x40004400

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80019bc:	f003 fbe4 	bl	8005188 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler+0x8>

080019c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <UsageFault_Handler+0x4>

080019da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a08:	f000 f8b8 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <DMA1_Channel1_IRQHandler+0x10>)
 8001a16:	f001 fd05 	bl	8003424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000114 	.word	0x20000114

08001a24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <DMA1_Channel2_IRQHandler+0x10>)
 8001a2a:	f001 fcfb 	bl	8003424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000015c 	.word	0x2000015c

08001a38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM3_IRQHandler+0x10>)
 8001a3e:	f004 fc91 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200002fc 	.word	0x200002fc

08001a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a74:	f7ff ffea 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7a:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <LoopForever+0xe>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a90:	4c0a      	ldr	r4, [pc, #40]	; (8001abc <LoopForever+0x16>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f006 fb11 	bl	80080c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aa2:	f7fe ff0d 	bl	80008c0 <main>

08001aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa6:	e7fe      	b.n	8001aa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ab4:	0800818c 	.word	0x0800818c
  ldr r2, =_sbss
 8001ab8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001abc:	20000460 	.word	0x20000460

08001ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC1_2_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_Init+0x3c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_Init+0x3c>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f001 fb48 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f000 f80f 	bl	8001b04 <HAL_InitTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	71fb      	strb	r3, [r7, #7]
 8001af0:	e001      	b.n	8001af6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af2:	f7ff fc1d 	bl	8001330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af6:	79fb      	ldrb	r3, [r7, #7]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40022000 	.word	0x40022000

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d023      	beq.n	8001b60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_InitTick+0x70>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_InitTick+0x6c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 fb53 	bl	80031da <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d809      	bhi.n	8001b54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f001 fb1d 	bl	8003186 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_InitTick+0x74>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e007      	b.n	8001b64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e004      	b.n	8001b64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e001      	b.n	8001b64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	2000045c 	.word	0x2000045c

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000045c 	.word	0x2000045c

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000008 	.word	0x20000008

08001c04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3360      	adds	r3, #96	; 0x60
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <LL_ADC_SetOffset+0x44>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	03fff000 	.word	0x03fff000

08001cb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3360      	adds	r3, #96	; 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3360      	adds	r3, #96	; 0x60
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3330      	adds	r3, #48	; 0x30
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	4413      	add	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	211f      	movs	r1, #31
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0e9b      	lsrs	r3, r3, #26
 8001d74:	f003 011f 	and.w	r1, r3, #31
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	431a      	orrs	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3314      	adds	r3, #20
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	0e5b      	lsrs	r3, r3, #25
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	4413      	add	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	0d1b      	lsrs	r3, r3, #20
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2107      	movs	r1, #7
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	401a      	ands	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	0d1b      	lsrs	r3, r3, #20
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0318 	and.w	r3, r3, #24
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e10:	40d9      	lsrs	r1, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	400b      	ands	r3, r1
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	0007ffff 	.word	0x0007ffff

08001e34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 031f 	and.w	r3, r3, #31
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6093      	str	r3, [r2, #8]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e88:	d101      	bne.n	8001e8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed8:	d101      	bne.n	8001ede <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001efc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <LL_ADC_IsEnabled+0x18>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_ADC_IsEnabled+0x1a>
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f4e:	f043 0204 	orr.w	r2, r3, #4
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d101      	bne.n	8001fa0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e136      	b.n	8002238 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff f9cd 	bl	8001378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff3f 	bl	8001e74 <LL_ADC_IsDeepPowerDownEnabled>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff25 	bl	8001e50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff5a 	bl	8001ec4 <LL_ADC_IsInternalRegulatorEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff3e 	bl	8001e9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002020:	4b87      	ldr	r3, [pc, #540]	; (8002240 <HAL_ADC_Init+0x290>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	4a87      	ldr	r2, [pc, #540]	; (8002244 <HAL_ADC_Init+0x294>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002034:	e002      	b.n	800203c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3b01      	subs	r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f9      	bne.n	8002036 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff3c 	bl	8001ec4 <LL_ADC_IsInternalRegulatorEnabled>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	f043 0210 	orr.w	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff75 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 8002078:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80cf 	bne.w	8002226 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80cb 	bne.w	8002226 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002098:	f043 0202 	orr.w	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff35 	bl	8001f14 <LL_ADC_IsEnabled>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d115      	bne.n	80020dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b0:	4865      	ldr	r0, [pc, #404]	; (8002248 <HAL_ADC_Init+0x298>)
 80020b2:	f7ff ff2f 	bl	8001f14 <LL_ADC_IsEnabled>
 80020b6:	4604      	mov	r4, r0
 80020b8:	4864      	ldr	r0, [pc, #400]	; (800224c <HAL_ADC_Init+0x29c>)
 80020ba:	f7ff ff2b 	bl	8001f14 <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	431c      	orrs	r4, r3
 80020c2:	4863      	ldr	r0, [pc, #396]	; (8002250 <HAL_ADC_Init+0x2a0>)
 80020c4:	f7ff ff26 	bl	8001f14 <LL_ADC_IsEnabled>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4323      	orrs	r3, r4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4619      	mov	r1, r3
 80020d6:	485f      	ldr	r0, [pc, #380]	; (8002254 <HAL_ADC_Init+0x2a4>)
 80020d8:	f7ff fd94 	bl	8001c04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e5b      	ldrb	r3, [r3, #25]
 80020e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d106      	bne.n	8002118 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	3b01      	subs	r3, #1
 8002110:	045b      	lsls	r3, r3, #17
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d009      	beq.n	8002134 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_ADC_Init+0x2a8>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	69b9      	ldr	r1, [r7, #24]
 8002144:	430b      	orrs	r3, r1
 8002146:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff08 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 8002152:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff15 	bl	8001f88 <LL_ADC_INJ_IsConversionOngoing>
 800215e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d13d      	bne.n	80021e2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d13a      	bne.n	80021e2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002170:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002178:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002188:	f023 0302 	bic.w	r3, r3, #2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	69b9      	ldr	r1, [r7, #24]
 8002192:	430b      	orrs	r3, r1
 8002194:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800219c:	2b01      	cmp	r3, #1
 800219e:	d118      	bne.n	80021d2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021c2:	430a      	orrs	r2, r1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	e007      	b.n	80021e2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10c      	bne.n	8002204 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	f023 010f 	bic.w	r1, r3, #15
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	e007      	b.n	8002214 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 020f 	bic.w	r2, r2, #15
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f023 0303 	bic.w	r3, r3, #3
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
 8002224:	e007      	b.n	8002236 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002236:	7ffb      	ldrb	r3, [r7, #31]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3724      	adds	r7, #36	; 0x24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	20000000 	.word	0x20000000
 8002244:	053e2d63 	.word	0x053e2d63
 8002248:	50040000 	.word	0x50040000
 800224c:	50040100 	.word	0x50040100
 8002250:	50040200 	.word	0x50040200
 8002254:	50040300 	.word	0x50040300
 8002258:	fff0c007 	.word	0xfff0c007

0800225c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002268:	4853      	ldr	r0, [pc, #332]	; (80023b8 <HAL_ADC_Start_DMA+0x15c>)
 800226a:	f7ff fde3 	bl	8001e34 <LL_ADC_GetMultimode>
 800226e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fe74 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 8093 	bne.w	80023a8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_ADC_Start_DMA+0x34>
 800228c:	2302      	movs	r3, #2
 800228e:	e08e      	b.n	80023ae <HAL_ADC_Start_DMA+0x152>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a47      	ldr	r2, [pc, #284]	; (80023bc <HAL_ADC_Start_DMA+0x160>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d008      	beq.n	80022b4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d002      	beq.n	80022b4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d172      	bne.n	800239a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fc9b 	bl	8002bf0 <ADC_Enable>
 80022ba:	4603      	mov	r3, r0
 80022bc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d165      	bne.n	8002390 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <HAL_ADC_Start_DMA+0x164>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d002      	beq.n	80022e8 <HAL_ADC_Start_DMA+0x8c>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	e000      	b.n	80022ea <HAL_ADC_Start_DMA+0x8e>
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_ADC_Start_DMA+0x168>)
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d002      	beq.n	80022f8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	f023 0206 	bic.w	r2, r3, #6
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	659a      	str	r2, [r3, #88]	; 0x58
 800231c:	e002      	b.n	8002324 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_ADC_Start_DMA+0x16c>)
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002330:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_ADC_Start_DMA+0x170>)
 8002332:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <HAL_ADC_Start_DMA+0x174>)
 800233a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	221c      	movs	r2, #28
 8002342:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0210 	orr.w	r2, r2, #16
 800235a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3340      	adds	r3, #64	; 0x40
 8002376:	4619      	mov	r1, r3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f000 fff2 	bl	8003364 <HAL_DMA_Start_IT>
 8002380:	4603      	mov	r3, r0
 8002382:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fdd6 	bl	8001f3a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800238e:	e00d      	b.n	80023ac <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002398:	e008      	b.n	80023ac <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023a6:	e001      	b.n	80023ac <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
 80023aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	50040300 	.word	0x50040300
 80023bc:	50040200 	.word	0x50040200
 80023c0:	50040100 	.word	0x50040100
 80023c4:	50040000 	.word	0x50040000
 80023c8:	08002cfd 	.word	0x08002cfd
 80023cc:	08002dd5 	.word	0x08002dd5
 80023d0:	08002df1 	.word	0x08002df1

080023d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0b6      	sub	sp, #216	; 0xd8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x22>
 800242e:	2302      	movs	r3, #2
 8002430:	e3c7      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x7b2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fd8f 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 83a8 	bne.w	8002b9c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d824      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	3b02      	subs	r3, #2
 800245a:	2b03      	cmp	r3, #3
 800245c:	d81b      	bhi.n	8002496 <HAL_ADC_ConfigChannel+0x86>
 800245e:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <HAL_ADC_ConfigChannel+0x54>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	0800247d 	.word	0x0800247d
 800246c:	08002485 	.word	0x08002485
 8002470:	0800248d 	.word	0x0800248d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	220c      	movs	r2, #12
 8002478:	605a      	str	r2, [r3, #4]
          break;
 800247a:	e011      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2212      	movs	r2, #18
 8002480:	605a      	str	r2, [r3, #4]
          break;
 8002482:	e00d      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2218      	movs	r2, #24
 8002488:	605a      	str	r2, [r3, #4]
          break;
 800248a:	e009      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002492:	605a      	str	r2, [r3, #4]
          break;
 8002494:	e004      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2206      	movs	r2, #6
 800249a:	605a      	str	r2, [r3, #4]
          break;
 800249c:	e000      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800249e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f7ff fc45 	bl	8001d3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fd53 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 80024bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fd5f 	bl	8001f88 <LL_ADC_INJ_IsConversionOngoing>
 80024ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 81a6 	bne.w	8002824 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 81a1 	bne.w	8002824 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f7ff fc50 	bl	8001d94 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d00a      	beq.n	800252c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6919      	ldr	r1, [r3, #16]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002526:	f7ff fba1 	bl	8001c6c <LL_ADC_SetOffset>
 800252a:	e17b      	b.n	8002824 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fbbe 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x148>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fbb3 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	f003 021f 	and.w	r2, r3, #31
 8002556:	e01e      	b.n	8002596 <HAL_ADC_ConfigChannel+0x186>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fba8 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002564:	4603      	mov	r3, r0
 8002566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800257a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800257e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002586:	2320      	movs	r3, #32
 8002588:	e004      	b.n	8002594 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800258a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x19e>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0e9b      	lsrs	r3, r3, #26
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	e018      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e004      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80025d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fb77 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fb5b 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <HAL_ADC_ConfigChannel+0x20e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fb50 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	e01e      	b.n	800265c <HAL_ADC_ConfigChannel+0x24c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2101      	movs	r1, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fb45 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800263c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e004      	b.n	800265a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x264>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	e018      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x296>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002688:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800268c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e004      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800269c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d106      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2200      	movs	r2, #0
 80026b0:	2101      	movs	r1, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fb14 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2102      	movs	r1, #2
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff faf8 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10a      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x2d4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2102      	movs	r1, #2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff faed 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	e01e      	b.n	8002722 <HAL_ADC_ConfigChannel+0x312>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fae2 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800270a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e004      	b.n	8002720 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_ADC_ConfigChannel+0x32a>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	e016      	b.n	8002768 <HAL_ADC_ConfigChannel+0x358>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800274c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800274e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e004      	b.n	8002768 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800275e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002768:	429a      	cmp	r2, r3
 800276a:	d106      	bne.n	800277a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2200      	movs	r2, #0
 8002772:	2102      	movs	r1, #2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fab3 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2103      	movs	r1, #3
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fa97 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x396>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2103      	movs	r1, #3
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fa8c 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	e017      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x3c6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2103      	movs	r1, #3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fa81 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e003      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80027cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x3de>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	e011      	b.n	8002812 <HAL_ADC_ConfigChannel+0x402>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002806:	2320      	movs	r3, #32
 8002808:	e003      	b.n	8002812 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800280a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002812:	429a      	cmp	r2, r3
 8002814:	d106      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	2103      	movs	r1, #3
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fa5e 	bl	8001ce0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fb73 	bl	8001f14 <LL_ADC_IsEnabled>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 813f 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	461a      	mov	r2, r3
 8002844:	f7ff fad2 	bl	8001dec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a8e      	ldr	r2, [pc, #568]	; (8002a88 <HAL_ADC_ConfigChannel+0x678>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f040 8130 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10b      	bne.n	800287c <HAL_ADC_ConfigChannel+0x46c>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2b09      	cmp	r3, #9
 8002872:	bf94      	ite	ls
 8002874:	2301      	movls	r3, #1
 8002876:	2300      	movhi	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e019      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x4a0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800288a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800288e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e003      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2b09      	cmp	r3, #9
 80028a8:	bf94      	ite	ls
 80028aa:	2301      	movls	r3, #1
 80028ac:	2300      	movhi	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d079      	beq.n	80029a8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x4c0>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	069b      	lsls	r3, r3, #26
 80028ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ce:	e015      	b.n	80028fc <HAL_ADC_ConfigChannel+0x4ec>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e003      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80028ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	069b      	lsls	r3, r3, #26
 80028f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <HAL_ADC_ConfigChannel+0x50c>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	3301      	adds	r3, #1
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	e017      	b.n	800294c <HAL_ADC_ConfigChannel+0x53c>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800292e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002934:	2320      	movs	r3, #32
 8002936:	e003      	b.n	8002940 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	3301      	adds	r3, #1
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2101      	movs	r1, #1
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	ea42 0103 	orr.w	r1, r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x562>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	3301      	adds	r3, #1
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	051b      	lsls	r3, r3, #20
 8002970:	e018      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x594>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002982:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e003      	b.n	8002996 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a4:	430b      	orrs	r3, r1
 80029a6:	e080      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x5b4>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	3301      	adds	r3, #1
 80029bc:	069b      	lsls	r3, r3, #26
 80029be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c2:	e015      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x5e0>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e003      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	069b      	lsls	r3, r3, #26
 80029ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x600>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e9b      	lsrs	r3, r3, #26
 8002a02:	3301      	adds	r3, #1
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	e017      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x630>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	61fb      	str	r3, [r7, #28]
  return result;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e003      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	ea42 0103 	orr.w	r1, r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x65c>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	3301      	adds	r3, #1
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	3b1e      	subs	r3, #30
 8002a64:	051b      	lsls	r3, r3, #20
 8002a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	e01d      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x698>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	613b      	str	r3, [r7, #16]
  return result;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e005      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x684>
 8002a88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 021f 	and.w	r2, r3, #31
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b1e      	subs	r3, #30
 8002aa2:	051b      	lsls	r3, r3, #20
 8002aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	6892      	ldr	r2, [r2, #8]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f7ff f970 	bl	8001d94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_ADC_ConfigChannel+0x7bc>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d07a      	beq.n	8002bb6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac0:	4843      	ldr	r0, [pc, #268]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ac2:	f7ff f8c5 	bl	8001c50 <LL_ADC_GetCommonPathInternalCh>
 8002ac6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a41      	ldr	r2, [pc, #260]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d12c      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d126      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a3c      	ldr	r2, [pc, #240]	; (8002bd8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0x6e4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <HAL_ADC_ConfigChannel+0x7cc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d15d      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002afc:	4619      	mov	r1, r3
 8002afe:	4834      	ldr	r0, [pc, #208]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b00:	f7ff f893 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	4a36      	ldr	r2, [pc, #216]	; (8002be4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b1e:	e002      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f9      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b2c:	e040      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d118      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x75a>
 8002b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d112      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_ADC_ConfigChannel+0x748>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <HAL_ADC_ConfigChannel+0x7cc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d12d      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b60:	4619      	mov	r1, r3
 8002b62:	481b      	ldr	r0, [pc, #108]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b64:	f7ff f861 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b68:	e024      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_ADC_ConfigChannel+0x7dc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d120      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11a      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d115      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b92:	4619      	mov	r1, r3
 8002b94:	480e      	ldr	r0, [pc, #56]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b96:	f7ff f848 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
 8002b9a:	e00c      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bae:	e002      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb0:	bf00      	nop
 8002bb2:	e000      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	37d8      	adds	r7, #216	; 0xd8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	80080000 	.word	0x80080000
 8002bd0:	50040300 	.word	0x50040300
 8002bd4:	c7520000 	.word	0xc7520000
 8002bd8:	50040000 	.word	0x50040000
 8002bdc:	50040200 	.word	0x50040200
 8002be0:	20000000 	.word	0x20000000
 8002be4:	053e2d63 	.word	0x053e2d63
 8002be8:	cb840000 	.word	0xcb840000
 8002bec:	80000001 	.word	0x80000001

08002bf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff f987 	bl	8001f14 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d169      	bne.n	8002ce0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	4b36      	ldr	r3, [pc, #216]	; (8002cec <ADC_Enable+0xfc>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e055      	b.n	8002ce2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f956 	bl	8001eec <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c40:	482b      	ldr	r0, [pc, #172]	; (8002cf0 <ADC_Enable+0x100>)
 8002c42:	f7ff f805 	bl	8001c50 <LL_ADC_GetCommonPathInternalCh>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c50:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <ADC_Enable+0x104>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <ADC_Enable+0x108>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c6a:	e002      	b.n	8002c72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f9      	bne.n	8002c6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c78:	f7fe ff94 	bl	8001ba4 <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c7e:	e028      	b.n	8002cd2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff f945 	bl	8001f14 <LL_ADC_IsEnabled>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff f929 	bl	8001eec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c9a:	f7fe ff83 	bl	8001ba4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d914      	bls.n	8002cd2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d00d      	beq.n	8002cd2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f043 0210 	orr.w	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e007      	b.n	8002ce2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d1cf      	bne.n	8002c80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	8000003f 	.word	0x8000003f
 8002cf0:	50040300 	.word	0x50040300
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	053e2d63 	.word	0x053e2d63

08002cfc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d14b      	bne.n	8002dae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d021      	beq.n	8002d74 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe ffee 	bl	8001d16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d032      	beq.n	8002da6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d12b      	bne.n	8002da6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11f      	bne.n	8002da6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
 8002d72:	e018      	b.n	8002da6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d111      	bne.n	8002da6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f7ff fb14 	bl	80023d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dac:	e00e      	b.n	8002dcc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff fb1e 	bl	80023fc <HAL_ADC_ErrorCallback>
}
 8002dc0:	e004      	b.n	8002dcc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff fb00 	bl	80023e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f043 0204 	orr.w	r2, r3, #4
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff faf0 	bl	80023fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <LL_ADC_IsEnabled>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <LL_ADC_IsEnabled+0x18>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <LL_ADC_IsEnabled+0x1a>
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d101      	bne.n	8002e62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b09f      	sub	sp, #124	; 0x7c
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e093      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e96:	2300      	movs	r3, #0
 8002e98:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a47      	ldr	r2, [pc, #284]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d102      	bne.n	8002eae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ea8:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	e001      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e072      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ffb9 	bl	8002e4a <LL_ADC_REG_IsConversionOngoing>
 8002ed8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ffb3 	bl	8002e4a <LL_ADC_REG_IsConversionOngoing>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d154      	bne.n	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d151      	bne.n	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ef2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02c      	beq.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f0e:	035b      	lsls	r3, r3, #13
 8002f10:	430b      	orrs	r3, r1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f18:	4829      	ldr	r0, [pc, #164]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f1a:	f7ff ff83 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f1e:	4604      	mov	r4, r0
 8002f20:	4828      	ldr	r0, [pc, #160]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f22:	f7ff ff7f 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f26:	4603      	mov	r3, r0
 8002f28:	431c      	orrs	r4, r3
 8002f2a:	4828      	ldr	r0, [pc, #160]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f2c:	f7ff ff7a 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4323      	orrs	r3, r4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d137      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f40:	f023 030f 	bic.w	r3, r3, #15
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	6811      	ldr	r1, [r2, #0]
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	6892      	ldr	r2, [r2, #8]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f52:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f54:	e028      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f60:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f62:	4817      	ldr	r0, [pc, #92]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f64:	f7ff ff5e 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f68:	4604      	mov	r4, r0
 8002f6a:	4816      	ldr	r0, [pc, #88]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f6c:	f7ff ff5a 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f70:	4603      	mov	r3, r0
 8002f72:	431c      	orrs	r4, r3
 8002f74:	4815      	ldr	r0, [pc, #84]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f76:	f7ff ff55 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4323      	orrs	r3, r4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d112      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f8a:	f023 030f 	bic.w	r3, r3, #15
 8002f8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f92:	e009      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fa6:	e000      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fb2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	377c      	adds	r7, #124	; 0x7c
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	50040000 	.word	0x50040000
 8002fc4:	50040100 	.word	0x50040100
 8002fc8:	50040300 	.word	0x50040300
 8002fcc:	50040200 	.word	0x50040200

08002fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fec:	4013      	ands	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <__NVIC_GetPriorityGrouping+0x18>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 0307 	and.w	r3, r3, #7
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	2b00      	cmp	r3, #0
 8003044:	db0b      	blt.n	800305e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <__NVIC_EnableIRQ+0x38>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2001      	movs	r0, #1
 8003056:	fa00 f202 	lsl.w	r2, r0, r2
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000e100 	.word	0xe000e100

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff8e 	bl	8003070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff29 	bl	8002fd0 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff3e 	bl	8003018 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff8e 	bl	80030c4 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5d 	bl	8003070 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff31 	bl	8003034 <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa2 	bl	800312c <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e098      	b.n	8003338 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b4d      	ldr	r3, [pc, #308]	; (8003344 <HAL_DMA_Init+0x150>)
 800320e:	429a      	cmp	r2, r3
 8003210:	d80f      	bhi.n	8003232 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_DMA_Init+0x154>)
 800321a:	4413      	add	r3, r2
 800321c:	4a4b      	ldr	r2, [pc, #300]	; (800334c <HAL_DMA_Init+0x158>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	009a      	lsls	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a48      	ldr	r2, [pc, #288]	; (8003350 <HAL_DMA_Init+0x15c>)
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
 8003230:	e00e      	b.n	8003250 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_DMA_Init+0x160>)
 800323a:	4413      	add	r3, r2
 800323c:	4a43      	ldr	r2, [pc, #268]	; (800334c <HAL_DMA_Init+0x158>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	009a      	lsls	r2, r3, #2
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a42      	ldr	r2, [pc, #264]	; (8003358 <HAL_DMA_Init+0x164>)
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032aa:	d039      	beq.n	8003320 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	4a27      	ldr	r2, [pc, #156]	; (8003350 <HAL_DMA_Init+0x15c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d11a      	bne.n	80032ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032b6:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_DMA_Init+0x168>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f003 031c 	and.w	r3, r3, #28
 80032c2:	210f      	movs	r1, #15
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4924      	ldr	r1, [pc, #144]	; (800335c <HAL_DMA_Init+0x168>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032d0:	4b22      	ldr	r3, [pc, #136]	; (800335c <HAL_DMA_Init+0x168>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f003 031c 	and.w	r3, r3, #28
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	491d      	ldr	r1, [pc, #116]	; (800335c <HAL_DMA_Init+0x168>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
 80032ea:	e019      	b.n	8003320 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032ec:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <HAL_DMA_Init+0x16c>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f003 031c 	and.w	r3, r3, #28
 80032f8:	210f      	movs	r1, #15
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	4917      	ldr	r1, [pc, #92]	; (8003360 <HAL_DMA_Init+0x16c>)
 8003302:	4013      	ands	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_DMA_Init+0x16c>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f003 031c 	and.w	r3, r3, #28
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	4911      	ldr	r1, [pc, #68]	; (8003360 <HAL_DMA_Init+0x16c>)
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40020407 	.word	0x40020407
 8003348:	bffdfff8 	.word	0xbffdfff8
 800334c:	cccccccd 	.word	0xcccccccd
 8003350:	40020000 	.word	0x40020000
 8003354:	bffdfbf8 	.word	0xbffdfbf8
 8003358:	40020400 	.word	0x40020400
 800335c:	400200a8 	.word	0x400200a8
 8003360:	400204a8 	.word	0x400204a8

08003364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_DMA_Start_IT+0x20>
 8003380:	2302      	movs	r3, #2
 8003382:	e04b      	b.n	800341c <HAL_DMA_Start_IT+0xb8>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d13a      	bne.n	800340e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f8e0 	bl	8003582 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 020e 	orr.w	r2, r2, #14
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e00f      	b.n	80033fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0204 	bic.w	r2, r2, #4
 80033ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 020a 	orr.w	r2, r2, #10
 80033fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e005      	b.n	800341a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003416:	2302      	movs	r3, #2
 8003418:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800341a:	7dfb      	ldrb	r3, [r7, #23]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f003 031c 	and.w	r3, r3, #28
 8003444:	2204      	movs	r2, #4
 8003446:	409a      	lsls	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d026      	beq.n	800349e <HAL_DMA_IRQHandler+0x7a>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d021      	beq.n	800349e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0204 	bic.w	r2, r2, #4
 8003476:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f003 021c 	and.w	r2, r3, #28
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2104      	movs	r1, #4
 8003486:	fa01 f202 	lsl.w	r2, r1, r2
 800348a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	2b00      	cmp	r3, #0
 8003492:	d071      	beq.n	8003578 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800349c:	e06c      	b.n	8003578 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f003 031c 	and.w	r3, r3, #28
 80034a6:	2202      	movs	r2, #2
 80034a8:	409a      	lsls	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02e      	beq.n	8003510 <HAL_DMA_IRQHandler+0xec>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d029      	beq.n	8003510 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 020a 	bic.w	r2, r2, #10
 80034d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f003 021c 	and.w	r2, r3, #28
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2102      	movs	r1, #2
 80034f0:	fa01 f202 	lsl.w	r2, r1, r2
 80034f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d038      	beq.n	8003578 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800350e:	e033      	b.n	8003578 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	f003 031c 	and.w	r3, r3, #28
 8003518:	2208      	movs	r2, #8
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02a      	beq.n	800357a <HAL_DMA_IRQHandler+0x156>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d025      	beq.n	800357a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 020e 	bic.w	r2, r2, #14
 800353c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f003 021c 	and.w	r2, r3, #28
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003578:	bf00      	nop
 800357a:	bf00      	nop
}
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	f003 021c 	and.w	r2, r3, #28
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f202 	lsl.w	r2, r1, r2
 80035a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d108      	bne.n	80035c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035c4:	e007      	b.n	80035d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	60da      	str	r2, [r3, #12]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f2:	e17f      	b.n	80038f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8171 	beq.w	80038ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d005      	beq.n	8003624 <HAL_GPIO_Init+0x40>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d130      	bne.n	8003686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800365a:	2201      	movs	r2, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 0201 	and.w	r2, r3, #1
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b03      	cmp	r3, #3
 8003690:	d118      	bne.n	80036c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003698:	2201      	movs	r2, #1
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	08db      	lsrs	r3, r3, #3
 80036ae:	f003 0201 	and.w	r2, r3, #1
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d017      	beq.n	8003700 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d123      	bne.n	8003754 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	220f      	movs	r2, #15
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	08da      	lsrs	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	6939      	ldr	r1, [r7, #16]
 8003750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0203 	and.w	r2, r3, #3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80ac 	beq.w	80038ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_GPIO_Init+0x330>)
 8003798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379a:	4a5e      	ldr	r2, [pc, #376]	; (8003914 <HAL_GPIO_Init+0x330>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6613      	str	r3, [r2, #96]	; 0x60
 80037a2:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <HAL_GPIO_Init+0x330>)
 80037a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037ae:	4a5a      	ldr	r2, [pc, #360]	; (8003918 <HAL_GPIO_Init+0x334>)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3302      	adds	r3, #2
 80037b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	220f      	movs	r2, #15
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037d8:	d025      	beq.n	8003826 <HAL_GPIO_Init+0x242>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4f      	ldr	r2, [pc, #316]	; (800391c <HAL_GPIO_Init+0x338>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01f      	beq.n	8003822 <HAL_GPIO_Init+0x23e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4e      	ldr	r2, [pc, #312]	; (8003920 <HAL_GPIO_Init+0x33c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d019      	beq.n	800381e <HAL_GPIO_Init+0x23a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4d      	ldr	r2, [pc, #308]	; (8003924 <HAL_GPIO_Init+0x340>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_GPIO_Init+0x236>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4c      	ldr	r2, [pc, #304]	; (8003928 <HAL_GPIO_Init+0x344>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00d      	beq.n	8003816 <HAL_GPIO_Init+0x232>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a4b      	ldr	r2, [pc, #300]	; (800392c <HAL_GPIO_Init+0x348>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <HAL_GPIO_Init+0x22e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <HAL_GPIO_Init+0x34c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_GPIO_Init+0x22a>
 800380a:	2306      	movs	r3, #6
 800380c:	e00c      	b.n	8003828 <HAL_GPIO_Init+0x244>
 800380e:	2307      	movs	r3, #7
 8003810:	e00a      	b.n	8003828 <HAL_GPIO_Init+0x244>
 8003812:	2305      	movs	r3, #5
 8003814:	e008      	b.n	8003828 <HAL_GPIO_Init+0x244>
 8003816:	2304      	movs	r3, #4
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x244>
 800381a:	2303      	movs	r3, #3
 800381c:	e004      	b.n	8003828 <HAL_GPIO_Init+0x244>
 800381e:	2302      	movs	r3, #2
 8003820:	e002      	b.n	8003828 <HAL_GPIO_Init+0x244>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_GPIO_Init+0x244>
 8003826:	2300      	movs	r3, #0
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	f002 0203 	and.w	r2, r2, #3
 800382e:	0092      	lsls	r2, r2, #2
 8003830:	4093      	lsls	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003838:	4937      	ldr	r1, [pc, #220]	; (8003918 <HAL_GPIO_Init+0x334>)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003846:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <HAL_GPIO_Init+0x350>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800386a:	4a32      	ldr	r2, [pc, #200]	; (8003934 <HAL_GPIO_Init+0x350>)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003870:	4b30      	ldr	r3, [pc, #192]	; (8003934 <HAL_GPIO_Init+0x350>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43db      	mvns	r3, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <HAL_GPIO_Init+0x350>)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800389a:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_GPIO_Init+0x350>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038be:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <HAL_GPIO_Init+0x350>)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_GPIO_Init+0x350>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038e8:	4a12      	ldr	r2, [pc, #72]	; (8003934 <HAL_GPIO_Init+0x350>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa22 f303 	lsr.w	r3, r2, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f47f ae78 	bne.w	80035f4 <HAL_GPIO_Init+0x10>
  }
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	40010000 	.word	0x40010000
 800391c:	48000400 	.word	0x48000400
 8003920:	48000800 	.word	0x48000800
 8003924:	48000c00 	.word	0x48000c00
 8003928:	48001000 	.word	0x48001000
 800392c:	48001400 	.word	0x48001400
 8003930:	48001800 	.word	0x48001800
 8003934:	40010400 	.word	0x40010400

08003938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
 8003944:	4613      	mov	r3, r2
 8003946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003948:	787b      	ldrb	r3, [r7, #1]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003954:	e002      	b.n	800395c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e081      	b.n	8003a7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fde8 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d107      	bne.n	80039e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	e006      	b.n	80039f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d104      	bne.n	8003a02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69d9      	ldr	r1, [r3, #28]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	817b      	strh	r3, [r7, #10]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	813b      	strh	r3, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	f040 80f9 	bne.w	8003ca2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_I2C_Mem_Write+0x34>
 8003ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0ed      	b.n	8003ca4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_I2C_Mem_Write+0x4e>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e0e6      	b.n	8003ca4 <HAL_I2C_Mem_Write+0x21c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ade:	f7fe f861 	bl	8001ba4 <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2319      	movs	r3, #25
 8003aea:	2201      	movs	r2, #1
 8003aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fac3 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d1      	b.n	8003ca4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2221      	movs	r2, #33	; 0x21
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2240      	movs	r2, #64	; 0x40
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a3a      	ldr	r2, [r7, #32]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b28:	88f8      	ldrh	r0, [r7, #6]
 8003b2a:	893a      	ldrh	r2, [r7, #8]
 8003b2c:	8979      	ldrh	r1, [r7, #10]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	4603      	mov	r3, r0
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f9d3 	bl	8003ee4 <I2C_RequestMemoryWrite>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0a9      	b.n	8003ca4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2bff      	cmp	r3, #255	; 0xff
 8003b58:	d90e      	bls.n	8003b78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	22ff      	movs	r2, #255	; 0xff
 8003b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	8979      	ldrh	r1, [r7, #10]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fc2b 	bl	80043cc <I2C_TransferConfig>
 8003b76:	e00f      	b.n	8003b98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	8979      	ldrh	r1, [r7, #10]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fc1a 	bl	80043cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 faad 	bl	80040fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e07b      	b.n	8003ca4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d034      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x1c8>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d130      	bne.n	8003c50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fa3f 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e04d      	b.n	8003ca4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2bff      	cmp	r3, #255	; 0xff
 8003c10:	d90e      	bls.n	8003c30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	8979      	ldrh	r1, [r7, #10]
 8003c20:	2300      	movs	r3, #0
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fbcf 	bl	80043cc <I2C_TransferConfig>
 8003c2e:	e00f      	b.n	8003c50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	8979      	ldrh	r1, [r7, #10]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fbbe 	bl	80043cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d19e      	bne.n	8003b98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fa8c 	bl	800417c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e01a      	b.n	8003ca4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2220      	movs	r2, #32
 8003c74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6859      	ldr	r1, [r3, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_I2C_Mem_Write+0x224>)
 8003c82:	400b      	ands	r3, r1
 8003c84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	fe00e800 	.word	0xfe00e800

08003cb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	817b      	strh	r3, [r7, #10]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	813b      	strh	r3, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	f040 80fd 	bne.w	8003ed2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_I2C_Mem_Read+0x34>
 8003cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0f1      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x4e>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e0ea      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x224>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d06:	f7fd ff4d 	bl	8001ba4 <HAL_GetTick>
 8003d0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2319      	movs	r3, #25
 8003d12:	2201      	movs	r2, #1
 8003d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f9af 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0d5      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2222      	movs	r2, #34	; 0x22
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d50:	88f8      	ldrh	r0, [r7, #6]
 8003d52:	893a      	ldrh	r2, [r7, #8]
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	4603      	mov	r3, r0
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f913 	bl	8003f8c <I2C_RequestMemoryRead>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0ad      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2bff      	cmp	r3, #255	; 0xff
 8003d80:	d90e      	bls.n	8003da0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	22ff      	movs	r2, #255	; 0xff
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	8979      	ldrh	r1, [r7, #10]
 8003d90:	4b52      	ldr	r3, [pc, #328]	; (8003edc <HAL_I2C_Mem_Read+0x22c>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fb17 	bl	80043cc <I2C_TransferConfig>
 8003d9e:	e00f      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	8979      	ldrh	r1, [r7, #10]
 8003db2:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <HAL_I2C_Mem_Read+0x22c>)
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fb06 	bl	80043cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2104      	movs	r1, #4
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f956 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07c      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d034      	beq.n	8003e80 <HAL_I2C_Mem_Read+0x1d0>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d130      	bne.n	8003e80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	2200      	movs	r2, #0
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f927 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e04d      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2bff      	cmp	r3, #255	; 0xff
 8003e40:	d90e      	bls.n	8003e60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	22ff      	movs	r2, #255	; 0xff
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	8979      	ldrh	r1, [r7, #10]
 8003e50:	2300      	movs	r3, #0
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fab7 	bl	80043cc <I2C_TransferConfig>
 8003e5e:	e00f      	b.n	8003e80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	8979      	ldrh	r1, [r7, #10]
 8003e72:	2300      	movs	r3, #0
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 faa6 	bl	80043cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d19a      	bne.n	8003dc0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f974 	bl	800417c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e01a      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_I2C_Mem_Read+0x230>)
 8003eb2:	400b      	ands	r3, r1
 8003eb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	80002400 	.word	0x80002400
 8003ee0:	fe00e800 	.word	0xfe00e800

08003ee4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	8979      	ldrh	r1, [r7, #10]
 8003f04:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <I2C_RequestMemoryWrite+0xa4>)
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fa5d 	bl	80043cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8f0 	bl	80040fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e02c      	b.n	8003f80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2c:	893b      	ldrh	r3, [r7, #8]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
 8003f36:	e015      	b.n	8003f64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f38:	893b      	ldrh	r3, [r7, #8]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f8d6 	bl	80040fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e012      	b.n	8003f80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5a:	893b      	ldrh	r3, [r7, #8]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f884 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	80002000 	.word	0x80002000

08003f8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	4608      	mov	r0, r1
 8003f96:	4611      	mov	r1, r2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	817b      	strh	r3, [r7, #10]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	813b      	strh	r3, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <I2C_RequestMemoryRead+0xa4>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fa0a 	bl	80043cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f89d 	bl	80040fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e02c      	b.n	8004026 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd2:	893b      	ldrh	r3, [r7, #8]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
 8003fdc:	e015      	b.n	800400a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fde:	893b      	ldrh	r3, [r7, #8]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	69b9      	ldr	r1, [r7, #24]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f883 	bl	80040fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e012      	b.n	8004026 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2200      	movs	r2, #0
 8004012:	2140      	movs	r1, #64	; 0x40
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f831 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	80002000 	.word	0x80002000

08004034 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d103      	bne.n	8004052 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2200      	movs	r2, #0
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d007      	beq.n	8004070 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	619a      	str	r2, [r3, #24]
  }
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408c:	e022      	b.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d01e      	beq.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fd fd85 	bl	8001ba4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d113      	bne.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e00f      	b.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d0cd      	beq.n	800408e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004108:	e02c      	b.n	8004164 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f870 	bl	80041f4 <I2C_IsErrorOccurred>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e02a      	b.n	8004174 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d01e      	beq.n	8004164 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fd fd3d 	bl	8001ba4 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d113      	bne.n	8004164 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b02      	cmp	r3, #2
 8004170:	d1cb      	bne.n	800410a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004188:	e028      	b.n	80041dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f830 	bl	80041f4 <I2C_IsErrorOccurred>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e026      	b.n	80041ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7fd fd01 	bl	8001ba4 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d113      	bne.n	80041dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e007      	b.n	80041ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d1cf      	bne.n	800418a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d075      	beq.n	800430c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2210      	movs	r2, #16
 8004226:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004228:	e056      	b.n	80042d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d052      	beq.n	80042d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fd fcb7 	bl	8001ba4 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <I2C_IsErrorOccurred+0x54>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d147      	bne.n	80042d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004252:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800425a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426a:	d12e      	bne.n	80042ca <I2C_IsErrorOccurred+0xd6>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004272:	d02a      	beq.n	80042ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	2b20      	cmp	r3, #32
 8004278:	d027      	beq.n	80042ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004288:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800428a:	f7fd fc8b 	bl	8001ba4 <HAL_GetTick>
 800428e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004290:	e01b      	b.n	80042ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004292:	f7fd fc87 	bl	8001ba4 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b19      	cmp	r3, #25
 800429e:	d914      	bls.n	80042ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d1dc      	bne.n	8004292 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d003      	beq.n	80042ee <I2C_IsErrorOccurred+0xfa>
 80042e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d09d      	beq.n	800422a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2220      	movs	r2, #32
 80042fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800432e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	f043 0308 	orr.w	r3, r3, #8
 8004346:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004350:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004372:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800437a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01c      	beq.n	80043bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f7ff fe56 	bl	8004034 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <I2C_IsErrorOccurred+0x1d4>)
 8004394:	400b      	ands	r3, r1
 8004396:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	431a      	orrs	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80043bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3728      	adds	r7, #40	; 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	fe00e800 	.word	0xfe00e800

080043cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	817b      	strh	r3, [r7, #10]
 80043da:	4613      	mov	r3, r2
 80043dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043e4:	7a7b      	ldrb	r3, [r7, #9]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	0d5b      	lsrs	r3, r3, #21
 8004406:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <I2C_TransferConfig+0x60>)
 800440c:	430b      	orrs	r3, r1
 800440e:	43db      	mvns	r3, r3
 8004410:	ea02 0103 	and.w	r1, r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	03ff63ff 	.word	0x03ff63ff

08004430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b20      	cmp	r3, #32
 8004444:	d138      	bne.n	80044b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004450:	2302      	movs	r3, #2
 8004452:	e032      	b.n	80044ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2224      	movs	r2, #36	; 0x24
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	e000      	b.n	80044ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
  }
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d139      	bne.n	8004550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e033      	b.n	8004552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2224      	movs	r2, #36	; 0x24
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	e000      	b.n	8004552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004550:	2302      	movs	r3, #2
  }
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <HAL_PWREx_GetVoltageRange+0x18>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40007000 	.word	0x40007000

0800457c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458a:	d130      	bne.n	80045ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d038      	beq.n	800460c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045aa:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2232      	movs	r2, #50	; 0x32
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0c9b      	lsrs	r3, r3, #18
 80045bc:	3301      	adds	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045c0:	e002      	b.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045c8:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d4:	d102      	bne.n	80045dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f2      	bne.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e8:	d110      	bne.n	800460c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e00f      	b.n	800460e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fa:	d007      	beq.n	800460c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004604:	4a05      	ldr	r2, [pc, #20]	; (800461c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800460a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40007000 	.word	0x40007000
 8004620:	20000000 	.word	0x20000000
 8004624:	431bde83 	.word	0x431bde83

08004628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e3ca      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463a:	4b97      	ldr	r3, [pc, #604]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004644:	4b94      	ldr	r3, [pc, #592]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80e4 	beq.w	8004824 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_RCC_OscConfig+0x4a>
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	2b0c      	cmp	r3, #12
 8004666:	f040 808b 	bne.w	8004780 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b01      	cmp	r3, #1
 800466e:	f040 8087 	bne.w	8004780 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004672:	4b89      	ldr	r3, [pc, #548]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_RCC_OscConfig+0x62>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e3a2      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	4b82      	ldr	r3, [pc, #520]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <HAL_RCC_OscConfig+0x7c>
 800469a:	4b7f      	ldr	r3, [pc, #508]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a2:	e005      	b.n	80046b0 <HAL_RCC_OscConfig+0x88>
 80046a4:	4b7c      	ldr	r3, [pc, #496]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d223      	bcs.n	80046fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fd81 	bl	80051c0 <RCC_SetFlashLatencyFromMSIRange>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e383      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c8:	4b73      	ldr	r3, [pc, #460]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a72      	ldr	r2, [pc, #456]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046ce:	f043 0308 	orr.w	r3, r3, #8
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b70      	ldr	r3, [pc, #448]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	496d      	ldr	r1, [pc, #436]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e6:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	4968      	ldr	r1, [pc, #416]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	604b      	str	r3, [r1, #4]
 80046fa:	e025      	b.n	8004748 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046fc:	4b66      	ldr	r3, [pc, #408]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a65      	ldr	r2, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004702:	f043 0308 	orr.w	r3, r3, #8
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b63      	ldr	r3, [pc, #396]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	4960      	ldr	r1, [pc, #384]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800471a:	4b5f      	ldr	r3, [pc, #380]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	495b      	ldr	r1, [pc, #364]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fd41 	bl	80051c0 <RCC_SetFlashLatencyFromMSIRange>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e343      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004748:	f000 fc4a 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b52      	ldr	r3, [pc, #328]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	4950      	ldr	r1, [pc, #320]	; (800489c <HAL_RCC_OscConfig+0x274>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
 8004764:	4a4e      	ldr	r2, [pc, #312]	; (80048a0 <HAL_RCC_OscConfig+0x278>)
 8004766:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004768:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <HAL_RCC_OscConfig+0x27c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fd f9c9 	bl	8001b04 <HAL_InitTick>
 8004772:	4603      	mov	r3, r0
 8004774:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d052      	beq.n	8004822 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	e327      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d032      	beq.n	80047ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004788:	4b43      	ldr	r3, [pc, #268]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a42      	ldr	r2, [pc, #264]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004794:	f7fd fa06 	bl	8001ba4 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800479c:	f7fd fa02 	bl	8001ba4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e310      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ae:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a36      	ldr	r2, [pc, #216]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047c0:	f043 0308 	orr.w	r3, r3, #8
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	4b34      	ldr	r3, [pc, #208]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	4931      	ldr	r1, [pc, #196]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047d8:	4b2f      	ldr	r3, [pc, #188]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	492c      	ldr	r1, [pc, #176]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	e01a      	b.n	8004824 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047ee:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a29      	ldr	r2, [pc, #164]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047fa:	f7fd f9d3 	bl	8001ba4 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004802:	f7fd f9cf 	bl	8001ba4 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e2dd      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004814:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x1da>
 8004820:	e000      	b.n	8004824 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004822:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d074      	beq.n	800491a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b08      	cmp	r3, #8
 8004834:	d005      	beq.n	8004842 <HAL_RCC_OscConfig+0x21a>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b0c      	cmp	r3, #12
 800483a:	d10e      	bne.n	800485a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d10b      	bne.n	800485a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d064      	beq.n	8004918 <HAL_RCC_OscConfig+0x2f0>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d160      	bne.n	8004918 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e2ba      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x24a>
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0b      	ldr	r2, [pc, #44]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800486a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	e026      	b.n	80048c0 <HAL_RCC_OscConfig+0x298>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800487a:	d115      	bne.n	80048a8 <HAL_RCC_OscConfig+0x280>
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a05      	ldr	r2, [pc, #20]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a02      	ldr	r2, [pc, #8]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800488e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	e014      	b.n	80048c0 <HAL_RCC_OscConfig+0x298>
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	08008134 	.word	0x08008134
 80048a0:	20000000 	.word	0x20000000
 80048a4:	20000004 	.word	0x20000004
 80048a8:	4ba0      	ldr	r3, [pc, #640]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a9f      	ldr	r2, [pc, #636]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80048ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	4b9d      	ldr	r3, [pc, #628]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a9c      	ldr	r2, [pc, #624]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80048ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d013      	beq.n	80048f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fd f96c 	bl	8001ba4 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d0:	f7fd f968 	bl	8001ba4 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b64      	cmp	r3, #100	; 0x64
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e276      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048e2:	4b92      	ldr	r3, [pc, #584]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x2a8>
 80048ee:	e014      	b.n	800491a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fd f958 	bl	8001ba4 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fd f954 	bl	8001ba4 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e262      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800490a:	4b88      	ldr	r3, [pc, #544]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x2d0>
 8004916:	e000      	b.n	800491a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d060      	beq.n	80049e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b04      	cmp	r3, #4
 800492a:	d005      	beq.n	8004938 <HAL_RCC_OscConfig+0x310>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b0c      	cmp	r3, #12
 8004930:	d119      	bne.n	8004966 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d116      	bne.n	8004966 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004938:	4b7c      	ldr	r3, [pc, #496]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_OscConfig+0x328>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e23f      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b76      	ldr	r3, [pc, #472]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	4973      	ldr	r1, [pc, #460]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004964:	e040      	b.n	80049e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d023      	beq.n	80049b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800496e:	4b6f      	ldr	r3, [pc, #444]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6e      	ldr	r2, [pc, #440]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fd f913 	bl	8001ba4 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004982:	f7fd f90f 	bl	8001ba4 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e21d      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004994:	4b65      	ldr	r3, [pc, #404]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	4b62      	ldr	r3, [pc, #392]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	061b      	lsls	r3, r3, #24
 80049ae:	495f      	ldr	r1, [pc, #380]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	604b      	str	r3, [r1, #4]
 80049b4:	e018      	b.n	80049e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b6:	4b5d      	ldr	r3, [pc, #372]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5c      	ldr	r2, [pc, #368]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80049bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fd f8ef 	bl	8001ba4 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ca:	f7fd f8eb 	bl	8001ba4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1f9      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049dc:	4b53      	ldr	r3, [pc, #332]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f0      	bne.n	80049ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d03c      	beq.n	8004a6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01c      	beq.n	8004a36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fc:	4b4b      	ldr	r3, [pc, #300]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	4a4a      	ldr	r2, [pc, #296]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fd f8ca 	bl	8001ba4 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a14:	f7fd f8c6 	bl	8001ba4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e1d4      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a26:	4b41      	ldr	r3, [pc, #260]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ef      	beq.n	8004a14 <HAL_RCC_OscConfig+0x3ec>
 8004a34:	e01b      	b.n	8004a6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a36:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3c:	4a3b      	ldr	r2, [pc, #236]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a46:	f7fd f8ad 	bl	8001ba4 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4e:	f7fd f8a9 	bl	8001ba4 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e1b7      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a60:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ef      	bne.n	8004a4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80a6 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a80:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10d      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	4a26      	ldr	r2, [pc, #152]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a96:	6593      	str	r3, [r2, #88]	; 0x58
 8004a98:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa8:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <HAL_RCC_OscConfig+0x508>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d118      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <HAL_RCC_OscConfig+0x508>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <HAL_RCC_OscConfig+0x508>)
 8004aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac0:	f7fd f870 	bl	8001ba4 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac8:	f7fd f86c 	bl	8001ba4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e17a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <HAL_RCC_OscConfig+0x508>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d108      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4d8>
 8004aee:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004afe:	e029      	b.n	8004b54 <HAL_RCC_OscConfig+0x52c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d115      	bne.n	8004b34 <HAL_RCC_OscConfig+0x50c>
 8004b08:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004b10:	f043 0304 	orr.w	r3, r3, #4
 8004b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	4a03      	ldr	r2, [pc, #12]	; (8004b2c <HAL_RCC_OscConfig+0x504>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b28:	e014      	b.n	8004b54 <HAL_RCC_OscConfig+0x52c>
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40007000 	.word	0x40007000
 8004b34:	4b9c      	ldr	r3, [pc, #624]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	4a9b      	ldr	r2, [pc, #620]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b44:	4b98      	ldr	r3, [pc, #608]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	4a97      	ldr	r2, [pc, #604]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fd f822 	bl	8001ba4 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fd f81e 	bl	8001ba4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e12a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7a:	4b8b      	ldr	r3, [pc, #556]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ed      	beq.n	8004b64 <HAL_RCC_OscConfig+0x53c>
 8004b88:	e015      	b.n	8004bb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fd f80b 	bl	8001ba4 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fd f807 	bl	8001ba4 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e113      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba8:	4b7f      	ldr	r3, [pc, #508]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1ed      	bne.n	8004b92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbc:	4b7a      	ldr	r3, [pc, #488]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	4a79      	ldr	r2, [pc, #484]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80fe 	beq.w	8004dce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	f040 80d0 	bne.w	8004d7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bdc:	4b72      	ldr	r3, [pc, #456]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0203 	and.w	r2, r3, #3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d130      	bne.n	8004c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d127      	bne.n	8004c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d11f      	bne.n	8004c52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c1c:	2a07      	cmp	r2, #7
 8004c1e:	bf14      	ite	ne
 8004c20:	2201      	movne	r2, #1
 8004c22:	2200      	moveq	r2, #0
 8004c24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d113      	bne.n	8004c52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	3b01      	subs	r3, #1
 8004c38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d109      	bne.n	8004c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d06e      	beq.n	8004d30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	d069      	beq.n	8004d2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c58:	4b53      	ldr	r3, [pc, #332]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c64:	4b50      	ldr	r3, [pc, #320]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0ad      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c74:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a4b      	ldr	r2, [pc, #300]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c80:	f7fc ff90 	bl	8001ba4 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fc ff8c 	bl	8001ba4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e09a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c9a:	4b43      	ldr	r3, [pc, #268]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca6:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	4b40      	ldr	r3, [pc, #256]	; (8004dac <HAL_RCC_OscConfig+0x784>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cb6:	3a01      	subs	r2, #1
 8004cb8:	0112      	lsls	r2, r2, #4
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cc0:	0212      	lsls	r2, r2, #8
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cc8:	0852      	lsrs	r2, r2, #1
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	0552      	lsls	r2, r2, #21
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cd4:	0852      	lsrs	r2, r2, #1
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	0652      	lsls	r2, r2, #25
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ce0:	0912      	lsrs	r2, r2, #4
 8004ce2:	0452      	lsls	r2, r2, #17
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	4930      	ldr	r1, [pc, #192]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cec:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf8:	4b2b      	ldr	r3, [pc, #172]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d04:	f7fc ff4e 	bl	8001ba4 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fc ff4a 	bl	8001ba4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e058      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d2a:	e050      	b.n	8004dce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e04f      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d30:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d148      	bne.n	8004dce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a19      	ldr	r2, [pc, #100]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d48:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d54:	f7fc ff26 	bl	8001ba4 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fc ff22 	bl	8001ba4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e030      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0x734>
 8004d7a:	e028      	b.n	8004dce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d023      	beq.n	8004dca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <HAL_RCC_OscConfig+0x780>)
 8004d88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fc ff09 	bl	8001ba4 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d94:	e00c      	b.n	8004db0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d96:	f7fc ff05 	bl	8001ba4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d905      	bls.n	8004db0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e013      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
 8004da8:	40021000 	.word	0x40021000
 8004dac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_OscConfig+0x7b0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ec      	bne.n	8004d96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_RCC_OscConfig+0x7b0>)
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4905      	ldr	r1, [pc, #20]	; (8004dd8 <HAL_RCC_OscConfig+0x7b0>)
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_RCC_OscConfig+0x7b4>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60cb      	str	r3, [r1, #12]
 8004dc8:	e001      	b.n	8004dce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	feeefffc 	.word	0xfeeefffc

08004de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0e7      	b.n	8004fc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df4:	4b75      	ldr	r3, [pc, #468]	; (8004fcc <HAL_RCC_ClockConfig+0x1ec>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d910      	bls.n	8004e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b72      	ldr	r3, [pc, #456]	; (8004fcc <HAL_RCC_ClockConfig+0x1ec>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 0207 	bic.w	r2, r3, #7
 8004e0a:	4970      	ldr	r1, [pc, #448]	; (8004fcc <HAL_RCC_ClockConfig+0x1ec>)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b6e      	ldr	r3, [pc, #440]	; (8004fcc <HAL_RCC_ClockConfig+0x1ec>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0cf      	b.n	8004fc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d908      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e40:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4960      	ldr	r1, [pc, #384]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d04c      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d107      	bne.n	8004e76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e66:	4b5a      	ldr	r3, [pc, #360]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d121      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0a6      	b.n	8004fc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e7e:	4b54      	ldr	r3, [pc, #336]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d115      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e09a      	b.n	8004fc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e96:	4b4e      	ldr	r3, [pc, #312]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e08e      	b.n	8004fc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e086      	b.n	8004fc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eb6:	4b46      	ldr	r3, [pc, #280]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 0203 	bic.w	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4943      	ldr	r1, [pc, #268]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fc fe6c 	bl	8001ba4 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed0:	f7fc fe68 	bl	8001ba4 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e06e      	b.n	8004fc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	4b3a      	ldr	r3, [pc, #232]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 020c 	and.w	r2, r3, #12
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d1eb      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	4b31      	ldr	r3, [pc, #196]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d208      	bcs.n	8004f26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f14:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	492b      	ldr	r1, [pc, #172]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f26:	4b29      	ldr	r3, [pc, #164]	; (8004fcc <HAL_RCC_ClockConfig+0x1ec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d210      	bcs.n	8004f56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f34:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <HAL_RCC_ClockConfig+0x1ec>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 0207 	bic.w	r2, r3, #7
 8004f3c:	4923      	ldr	r1, [pc, #140]	; (8004fcc <HAL_RCC_ClockConfig+0x1ec>)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f44:	4b21      	ldr	r3, [pc, #132]	; (8004fcc <HAL_RCC_ClockConfig+0x1ec>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e036      	b.n	8004fc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	4918      	ldr	r1, [pc, #96]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f80:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4910      	ldr	r1, [pc, #64]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f94:	f000 f824 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <HAL_RCC_ClockConfig+0x1f4>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb0:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <HAL_RCC_ClockConfig+0x1fc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fc fda3 	bl	8001b04 <HAL_InitTick>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40022000 	.word	0x40022000
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	08008134 	.word	0x08008134
 8004fd8:	20000000 	.word	0x20000000
 8004fdc:	20000004 	.word	0x20000004

08004fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b089      	sub	sp, #36	; 0x24
 8004fe4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fee:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
 8004ff6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff8:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x34>
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b0c      	cmp	r3, #12
 800500c:	d121      	bne.n	8005052 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d11e      	bne.n	8005052 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005014:	4b34      	ldr	r3, [pc, #208]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d107      	bne.n	8005030 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005020:	4b31      	ldr	r3, [pc, #196]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	e005      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800503c:	4a2b      	ldr	r2, [pc, #172]	; (80050ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005044:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10d      	bne.n	8005068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005050:	e00a      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d102      	bne.n	800505e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005058:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	e004      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d101      	bne.n	8005068 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005064:	4b23      	ldr	r3, [pc, #140]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005066:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b0c      	cmp	r3, #12
 800506c:	d134      	bne.n	80050d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800506e:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d003      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0xa6>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d003      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0xac>
 8005084:	e005      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005088:	617b      	str	r3, [r7, #20]
      break;
 800508a:	e005      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800508c:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800508e:	617b      	str	r3, [r7, #20]
      break;
 8005090:	e002      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	617b      	str	r3, [r7, #20]
      break;
 8005096:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005098:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	3301      	adds	r3, #1
 80050a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	fb03 f202 	mul.w	r2, r3, r2
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	0e5b      	lsrs	r3, r3, #25
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	3301      	adds	r3, #1
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050d8:	69bb      	ldr	r3, [r7, #24]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3724      	adds	r7, #36	; 0x24
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000
 80050ec:	0800814c 	.word	0x0800814c
 80050f0:	00f42400 	.word	0x00f42400
 80050f4:	007a1200 	.word	0x007a1200

080050f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <HAL_RCC_GetHCLKFreq+0x14>)
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20000000 	.word	0x20000000

08005110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005114:	f7ff fff0 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40021000 	.word	0x40021000
 8005138:	08008144 	.word	0x08008144

0800513c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005140:	f7ff ffda 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	0adb      	lsrs	r3, r3, #11
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4904      	ldr	r1, [pc, #16]	; (8005164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40021000 	.word	0x40021000
 8005164:	08008144 	.word	0x08008144

08005168 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_EnableCSS+0x1c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <HAL_RCC_EnableCSS+0x1c>)
 8005172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005176:	6013      	str	r3, [r2, #0]
}
 8005178:	bf00      	nop
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000

08005188 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800518c:	4b07      	ldr	r3, [pc, #28]	; (80051ac <HAL_RCC_NMI_IRQHandler+0x24>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005198:	d105      	bne.n	80051a6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800519a:	f000 f809 	bl	80051b0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800519e:	4b03      	ldr	r3, [pc, #12]	; (80051ac <HAL_RCC_NMI_IRQHandler+0x24>)
 80051a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051a4:	621a      	str	r2, [r3, #32]
  }
}
 80051a6:	bf00      	nop
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000

080051b0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051cc:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051d8:	f7ff f9c2 	bl	8004560 <HAL_PWREx_GetVoltageRange>
 80051dc:	6178      	str	r0, [r7, #20]
 80051de:	e014      	b.n	800520a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051e0:	4b25      	ldr	r3, [pc, #148]	; (8005278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	4a24      	ldr	r2, [pc, #144]	; (8005278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ea:	6593      	str	r3, [r2, #88]	; 0x58
 80051ec:	4b22      	ldr	r3, [pc, #136]	; (8005278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051f8:	f7ff f9b2 	bl	8004560 <HAL_PWREx_GetVoltageRange>
 80051fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051fe:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005208:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d10b      	bne.n	800522a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b80      	cmp	r3, #128	; 0x80
 8005216:	d919      	bls.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2ba0      	cmp	r3, #160	; 0xa0
 800521c:	d902      	bls.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800521e:	2302      	movs	r3, #2
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	e013      	b.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005224:	2301      	movs	r3, #1
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	e010      	b.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d902      	bls.n	8005236 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005230:	2303      	movs	r3, #3
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	e00a      	b.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d102      	bne.n	8005242 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800523c:	2302      	movs	r3, #2
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	e004      	b.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b70      	cmp	r3, #112	; 0x70
 8005246:	d101      	bne.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005248:	2301      	movs	r3, #1
 800524a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 0207 	bic.w	r2, r3, #7
 8005254:	4909      	ldr	r1, [pc, #36]	; (800527c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d001      	beq.n	800526e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40021000 	.word	0x40021000
 800527c:	40022000 	.word	0x40022000

08005280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005288:	2300      	movs	r3, #0
 800528a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800528c:	2300      	movs	r3, #0
 800528e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005298:	2b00      	cmp	r3, #0
 800529a:	d041      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052a4:	d02a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052aa:	d824      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052b0:	d008      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052b6:	d81e      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c0:	d010      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052c2:	e018      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052c4:	4b86      	ldr	r3, [pc, #536]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a85      	ldr	r2, [pc, #532]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052d0:	e015      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3304      	adds	r3, #4
 80052d6:	2100      	movs	r1, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fabb 	bl	8005854 <RCCEx_PLLSAI1_Config>
 80052de:	4603      	mov	r3, r0
 80052e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052e2:	e00c      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3320      	adds	r3, #32
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fba6 	bl	8005a3c <RCCEx_PLLSAI2_Config>
 80052f0:	4603      	mov	r3, r0
 80052f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052f4:	e003      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	74fb      	strb	r3, [r7, #19]
      break;
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052fe:	7cfb      	ldrb	r3, [r7, #19]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005304:	4b76      	ldr	r3, [pc, #472]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005312:	4973      	ldr	r1, [pc, #460]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800531a:	e001      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d041      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005330:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005334:	d02a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005336:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800533a:	d824      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800533c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005340:	d008      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005342:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005346:	d81e      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800534c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005350:	d010      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005352:	e018      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005354:	4b62      	ldr	r3, [pc, #392]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4a61      	ldr	r2, [pc, #388]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005360:	e015      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	2100      	movs	r1, #0
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fa73 	bl	8005854 <RCCEx_PLLSAI1_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005372:	e00c      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3320      	adds	r3, #32
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fb5e 	bl	8005a3c <RCCEx_PLLSAI2_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005384:	e003      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	74fb      	strb	r3, [r7, #19]
      break;
 800538a:	e000      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800538c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005394:	4b52      	ldr	r3, [pc, #328]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a2:	494f      	ldr	r1, [pc, #316]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053aa:	e001      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80a0 	beq.w	80054fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053be:	2300      	movs	r3, #0
 80053c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053c2:	4b47      	ldr	r3, [pc, #284]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00d      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d8:	4b41      	ldr	r3, [pc, #260]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	4a40      	ldr	r2, [pc, #256]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e2:	6593      	str	r3, [r2, #88]	; 0x58
 80053e4:	4b3e      	ldr	r3, [pc, #248]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053f0:	2301      	movs	r3, #1
 80053f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053f4:	4b3b      	ldr	r3, [pc, #236]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a3a      	ldr	r2, [pc, #232]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005400:	f7fc fbd0 	bl	8001ba4 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005406:	e009      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005408:	f7fc fbcc 	bl	8001ba4 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d902      	bls.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	74fb      	strb	r3, [r7, #19]
        break;
 800541a:	e005      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ef      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d15c      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800542e:	4b2c      	ldr	r3, [pc, #176]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005438:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01f      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	429a      	cmp	r2, r3
 800544a:	d019      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800544c:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005456:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005468:	4b1d      	ldr	r3, [pc, #116]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005478:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fc fb8b 	bl	8001ba4 <HAL_GetTick>
 800548e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005490:	e00b      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005492:	f7fc fb87 	bl	8001ba4 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d902      	bls.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	74fb      	strb	r3, [r7, #19]
            break;
 80054a8:	e006      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054aa:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0ec      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10c      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ce:	4904      	ldr	r1, [pc, #16]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054d6:	e009      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	74bb      	strb	r3, [r7, #18]
 80054dc:	e006      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054de:	bf00      	nop
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ec:	7c7b      	ldrb	r3, [r7, #17]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f2:	4b9e      	ldr	r3, [pc, #632]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f6:	4a9d      	ldr	r2, [pc, #628]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800550a:	4b98      	ldr	r3, [pc, #608]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f023 0203 	bic.w	r2, r3, #3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	4994      	ldr	r1, [pc, #592]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800552c:	4b8f      	ldr	r3, [pc, #572]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f023 020c 	bic.w	r2, r3, #12
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	498c      	ldr	r1, [pc, #560]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800554e:	4b87      	ldr	r3, [pc, #540]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005554:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	4983      	ldr	r1, [pc, #524]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005570:	4b7e      	ldr	r3, [pc, #504]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	497b      	ldr	r1, [pc, #492]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005592:	4b76      	ldr	r3, [pc, #472]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a0:	4972      	ldr	r1, [pc, #456]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055b4:	4b6d      	ldr	r3, [pc, #436]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	496a      	ldr	r1, [pc, #424]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055d6:	4b65      	ldr	r3, [pc, #404]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e4:	4961      	ldr	r1, [pc, #388]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055f8:	4b5c      	ldr	r3, [pc, #368]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005606:	4959      	ldr	r1, [pc, #356]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800561a:	4b54      	ldr	r3, [pc, #336]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005620:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	4950      	ldr	r1, [pc, #320]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800563c:	4b4b      	ldr	r3, [pc, #300]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	4948      	ldr	r1, [pc, #288]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800565e:	4b43      	ldr	r3, [pc, #268]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	493f      	ldr	r1, [pc, #252]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d028      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005680:	4b3a      	ldr	r3, [pc, #232]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568e:	4937      	ldr	r1, [pc, #220]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800569e:	d106      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a0:	4b32      	ldr	r3, [pc, #200]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a31      	ldr	r2, [pc, #196]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056aa:	60d3      	str	r3, [r2, #12]
 80056ac:	e011      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056b6:	d10c      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f8c8 	bl	8005854 <RCCEx_PLLSAI1_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d028      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056de:	4b23      	ldr	r3, [pc, #140]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	491f      	ldr	r1, [pc, #124]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056fc:	d106      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056fe:	4b1b      	ldr	r3, [pc, #108]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	4a1a      	ldr	r2, [pc, #104]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005708:	60d3      	str	r3, [r2, #12]
 800570a:	e011      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005714:	d10c      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	2101      	movs	r1, #1
 800571c:	4618      	mov	r0, r3
 800571e:	f000 f899 	bl	8005854 <RCCEx_PLLSAI1_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005726:	7cfb      	ldrb	r3, [r7, #19]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d02b      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574a:	4908      	ldr	r1, [pc, #32]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575a:	d109      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4a02      	ldr	r2, [pc, #8]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005766:	60d3      	str	r3, [r2, #12]
 8005768:	e014      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005778:	d10c      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3304      	adds	r3, #4
 800577e:	2101      	movs	r1, #1
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f867 	bl	8005854 <RCCEx_PLLSAI1_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005790:	7cfb      	ldrb	r3, [r7, #19]
 8005792:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02f      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ae:	4928      	ldr	r1, [pc, #160]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057be:	d10d      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f844 	bl	8005854 <RCCEx_PLLSAI1_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057d0:	7cfb      	ldrb	r3, [r7, #19]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d014      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	74bb      	strb	r3, [r7, #18]
 80057da:	e011      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3320      	adds	r3, #32
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 f925 	bl	8005a3c <RCCEx_PLLSAI2_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800580c:	4b10      	ldr	r3, [pc, #64]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581a:	490d      	ldr	r1, [pc, #52]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800582e:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800583e:	4904      	ldr	r1, [pc, #16]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005846:	7cbb      	ldrb	r3, [r7, #18]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40021000 	.word	0x40021000

08005854 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005862:	4b75      	ldr	r3, [pc, #468]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d018      	beq.n	80058a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800586e:	4b72      	ldr	r3, [pc, #456]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0203 	and.w	r2, r3, #3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d10d      	bne.n	800589a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
       ||
 8005882:	2b00      	cmp	r3, #0
 8005884:	d009      	beq.n	800589a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005886:	4b6c      	ldr	r3, [pc, #432]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	091b      	lsrs	r3, r3, #4
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
       ||
 8005896:	429a      	cmp	r2, r3
 8005898:	d047      	beq.n	800592a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	73fb      	strb	r3, [r7, #15]
 800589e:	e044      	b.n	800592a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d018      	beq.n	80058da <RCCEx_PLLSAI1_Config+0x86>
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d825      	bhi.n	80058f8 <RCCEx_PLLSAI1_Config+0xa4>
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d002      	beq.n	80058b6 <RCCEx_PLLSAI1_Config+0x62>
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d009      	beq.n	80058c8 <RCCEx_PLLSAI1_Config+0x74>
 80058b4:	e020      	b.n	80058f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058b6:	4b60      	ldr	r3, [pc, #384]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d11d      	bne.n	80058fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c6:	e01a      	b.n	80058fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058c8:	4b5b      	ldr	r3, [pc, #364]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d116      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d8:	e013      	b.n	8005902 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058da:	4b57      	ldr	r3, [pc, #348]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058e6:	4b54      	ldr	r3, [pc, #336]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058f6:	e006      	b.n	8005906 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
      break;
 80058fc:	e004      	b.n	8005908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058fe:	bf00      	nop
 8005900:	e002      	b.n	8005908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005902:	bf00      	nop
 8005904:	e000      	b.n	8005908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005906:	bf00      	nop
    }

    if(status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800590e:	4b4a      	ldr	r3, [pc, #296]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	3b01      	subs	r3, #1
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	430b      	orrs	r3, r1
 8005924:	4944      	ldr	r1, [pc, #272]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d17d      	bne.n	8005a2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005930:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a40      	ldr	r2, [pc, #256]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005936:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800593a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593c:	f7fc f932 	bl	8001ba4 <HAL_GetTick>
 8005940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005942:	e009      	b.n	8005958 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005944:	f7fc f92e 	bl	8001ba4 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d902      	bls.n	8005958 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	73fb      	strb	r3, [r7, #15]
        break;
 8005956:	e005      	b.n	8005964 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005958:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ef      	bne.n	8005944 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d160      	bne.n	8005a2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d111      	bne.n	8005994 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005970:	4b31      	ldr	r3, [pc, #196]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6892      	ldr	r2, [r2, #8]
 8005980:	0211      	lsls	r1, r2, #8
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68d2      	ldr	r2, [r2, #12]
 8005986:	0912      	lsrs	r2, r2, #4
 8005988:	0452      	lsls	r2, r2, #17
 800598a:	430a      	orrs	r2, r1
 800598c:	492a      	ldr	r1, [pc, #168]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 800598e:	4313      	orrs	r3, r2
 8005990:	610b      	str	r3, [r1, #16]
 8005992:	e027      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d112      	bne.n	80059c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800599a:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6892      	ldr	r2, [r2, #8]
 80059aa:	0211      	lsls	r1, r2, #8
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6912      	ldr	r2, [r2, #16]
 80059b0:	0852      	lsrs	r2, r2, #1
 80059b2:	3a01      	subs	r2, #1
 80059b4:	0552      	lsls	r2, r2, #21
 80059b6:	430a      	orrs	r2, r1
 80059b8:	491f      	ldr	r1, [pc, #124]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	610b      	str	r3, [r1, #16]
 80059be:	e011      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6892      	ldr	r2, [r2, #8]
 80059d0:	0211      	lsls	r1, r2, #8
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6952      	ldr	r2, [r2, #20]
 80059d6:	0852      	lsrs	r2, r2, #1
 80059d8:	3a01      	subs	r2, #1
 80059da:	0652      	lsls	r2, r2, #25
 80059dc:	430a      	orrs	r2, r1
 80059de:	4916      	ldr	r1, [pc, #88]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059e4:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f0:	f7fc f8d8 	bl	8001ba4 <HAL_GetTick>
 80059f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059f6:	e009      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059f8:	f7fc f8d4 	bl	8001ba4 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d902      	bls.n	8005a0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	73fb      	strb	r3, [r7, #15]
          break;
 8005a0a:	e005      	b.n	8005a18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0ef      	beq.n	80059f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	4904      	ldr	r1, [pc, #16]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40021000 	.word	0x40021000

08005a3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a4a:	4b6a      	ldr	r3, [pc, #424]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d018      	beq.n	8005a88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a56:	4b67      	ldr	r3, [pc, #412]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0203 	and.w	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d10d      	bne.n	8005a82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
       ||
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a6e:	4b61      	ldr	r3, [pc, #388]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d047      	beq.n	8005b12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
 8005a86:	e044      	b.n	8005b12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d018      	beq.n	8005ac2 <RCCEx_PLLSAI2_Config+0x86>
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d825      	bhi.n	8005ae0 <RCCEx_PLLSAI2_Config+0xa4>
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d002      	beq.n	8005a9e <RCCEx_PLLSAI2_Config+0x62>
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d009      	beq.n	8005ab0 <RCCEx_PLLSAI2_Config+0x74>
 8005a9c:	e020      	b.n	8005ae0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a9e:	4b55      	ldr	r3, [pc, #340]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11d      	bne.n	8005ae6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aae:	e01a      	b.n	8005ae6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ab0:	4b50      	ldr	r3, [pc, #320]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d116      	bne.n	8005aea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac0:	e013      	b.n	8005aea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ac2:	4b4c      	ldr	r3, [pc, #304]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10f      	bne.n	8005aee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ace:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ade:	e006      	b.n	8005aee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae4:	e004      	b.n	8005af0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e002      	b.n	8005af0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aee:	bf00      	nop
    }

    if(status == HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10d      	bne.n	8005b12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005af6:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	4939      	ldr	r1, [pc, #228]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d167      	bne.n	8005be8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b18:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a35      	ldr	r2, [pc, #212]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b24:	f7fc f83e 	bl	8001ba4 <HAL_GetTick>
 8005b28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b2a:	e009      	b.n	8005b40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b2c:	f7fc f83a 	bl	8001ba4 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d902      	bls.n	8005b40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b3e:	e005      	b.n	8005b4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b40:	4b2c      	ldr	r3, [pc, #176]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1ef      	bne.n	8005b2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d14a      	bne.n	8005be8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d111      	bne.n	8005b7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b58:	4b26      	ldr	r3, [pc, #152]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6892      	ldr	r2, [r2, #8]
 8005b68:	0211      	lsls	r1, r2, #8
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68d2      	ldr	r2, [r2, #12]
 8005b6e:	0912      	lsrs	r2, r2, #4
 8005b70:	0452      	lsls	r2, r2, #17
 8005b72:	430a      	orrs	r2, r1
 8005b74:	491f      	ldr	r1, [pc, #124]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	614b      	str	r3, [r1, #20]
 8005b7a:	e011      	b.n	8005ba0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b7c:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6892      	ldr	r2, [r2, #8]
 8005b8c:	0211      	lsls	r1, r2, #8
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6912      	ldr	r2, [r2, #16]
 8005b92:	0852      	lsrs	r2, r2, #1
 8005b94:	3a01      	subs	r2, #1
 8005b96:	0652      	lsls	r2, r2, #25
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	4916      	ldr	r1, [pc, #88]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bac:	f7fb fffa 	bl	8001ba4 <HAL_GetTick>
 8005bb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bb2:	e009      	b.n	8005bc8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bb4:	f7fb fff6 	bl	8001ba4 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d902      	bls.n	8005bc8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	73fb      	strb	r3, [r7, #15]
          break;
 8005bc6:	e005      	b.n	8005bd4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ef      	beq.n	8005bb4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bdc:	695a      	ldr	r2, [r3, #20]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	4904      	ldr	r1, [pc, #16]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000

08005bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e095      	b.n	8005d36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d108      	bne.n	8005c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1a:	d009      	beq.n	8005c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	61da      	str	r2, [r3, #28]
 8005c22:	e005      	b.n	8005c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fb fd2c 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c70:	d902      	bls.n	8005c78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e002      	b.n	8005c7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c86:	d007      	beq.n	8005c98 <HAL_SPI_Init+0xa0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c90:	d002      	beq.n	8005c98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	ea42 0103 	orr.w	r1, r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	0c1b      	lsrs	r3, r3, #16
 8005cf4:	f003 0204 	and.w	r2, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d14:	ea42 0103 	orr.w	r1, r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e049      	b.n	8005de4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fb fce3 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 fe79 	bl	8006a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e049      	b.n	8005e92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fb fcd0 	bl	80017b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f000 fe22 	bl	8006a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x24>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e03c      	b.n	8005f3a <HAL_TIM_PWM_Start+0x9e>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d109      	bne.n	8005eda <HAL_TIM_PWM_Start+0x3e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	bf14      	ite	ne
 8005ed2:	2301      	movne	r3, #1
 8005ed4:	2300      	moveq	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	e02f      	b.n	8005f3a <HAL_TIM_PWM_Start+0x9e>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d109      	bne.n	8005ef4 <HAL_TIM_PWM_Start+0x58>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	bf14      	ite	ne
 8005eec:	2301      	movne	r3, #1
 8005eee:	2300      	moveq	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	e022      	b.n	8005f3a <HAL_TIM_PWM_Start+0x9e>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b0c      	cmp	r3, #12
 8005ef8:	d109      	bne.n	8005f0e <HAL_TIM_PWM_Start+0x72>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	bf14      	ite	ne
 8005f06:	2301      	movne	r3, #1
 8005f08:	2300      	moveq	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	e015      	b.n	8005f3a <HAL_TIM_PWM_Start+0x9e>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d109      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x8c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	e008      	b.n	8005f3a <HAL_TIM_PWM_Start+0x9e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e09c      	b.n	800607c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_PWM_Start+0xb6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f50:	e023      	b.n	8005f9a <HAL_TIM_PWM_Start+0xfe>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_PWM_Start+0xc6>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f60:	e01b      	b.n	8005f9a <HAL_TIM_PWM_Start+0xfe>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d104      	bne.n	8005f72 <HAL_TIM_PWM_Start+0xd6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f70:	e013      	b.n	8005f9a <HAL_TIM_PWM_Start+0xfe>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b0c      	cmp	r3, #12
 8005f76:	d104      	bne.n	8005f82 <HAL_TIM_PWM_Start+0xe6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f80:	e00b      	b.n	8005f9a <HAL_TIM_PWM_Start+0xfe>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d104      	bne.n	8005f92 <HAL_TIM_PWM_Start+0xf6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f90:	e003      	b.n	8005f9a <HAL_TIM_PWM_Start+0xfe>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fb0d 	bl	80075c2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a35      	ldr	r2, [pc, #212]	; (8006084 <HAL_TIM_PWM_Start+0x1e8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d013      	beq.n	8005fda <HAL_TIM_PWM_Start+0x13e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a34      	ldr	r2, [pc, #208]	; (8006088 <HAL_TIM_PWM_Start+0x1ec>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00e      	beq.n	8005fda <HAL_TIM_PWM_Start+0x13e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a32      	ldr	r2, [pc, #200]	; (800608c <HAL_TIM_PWM_Start+0x1f0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d009      	beq.n	8005fda <HAL_TIM_PWM_Start+0x13e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a31      	ldr	r2, [pc, #196]	; (8006090 <HAL_TIM_PWM_Start+0x1f4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d004      	beq.n	8005fda <HAL_TIM_PWM_Start+0x13e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2f      	ldr	r2, [pc, #188]	; (8006094 <HAL_TIM_PWM_Start+0x1f8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d101      	bne.n	8005fde <HAL_TIM_PWM_Start+0x142>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <HAL_TIM_PWM_Start+0x144>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a22      	ldr	r2, [pc, #136]	; (8006084 <HAL_TIM_PWM_Start+0x1e8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01d      	beq.n	800603a <HAL_TIM_PWM_Start+0x19e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006006:	d018      	beq.n	800603a <HAL_TIM_PWM_Start+0x19e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a22      	ldr	r2, [pc, #136]	; (8006098 <HAL_TIM_PWM_Start+0x1fc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_TIM_PWM_Start+0x19e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a21      	ldr	r2, [pc, #132]	; (800609c <HAL_TIM_PWM_Start+0x200>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <HAL_TIM_PWM_Start+0x19e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <HAL_TIM_PWM_Start+0x204>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_TIM_PWM_Start+0x19e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <HAL_TIM_PWM_Start+0x1ec>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_PWM_Start+0x19e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a15      	ldr	r2, [pc, #84]	; (800608c <HAL_TIM_PWM_Start+0x1f0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d115      	bne.n	8006066 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	4b18      	ldr	r3, [pc, #96]	; (80060a4 <HAL_TIM_PWM_Start+0x208>)
 8006042:	4013      	ands	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b06      	cmp	r3, #6
 800604a:	d015      	beq.n	8006078 <HAL_TIM_PWM_Start+0x1dc>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006052:	d011      	beq.n	8006078 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	e008      	b.n	8006078 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e000      	b.n	800607a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40014800 	.word	0x40014800
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	00010007 	.word	0x00010007

080060a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e049      	b.n	800614e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f841 	bl	8006156 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f000 fcc4 	bl	8006a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
	...

0800616c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <HAL_TIM_IC_Start+0x1a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e023      	b.n	80061ce <HAL_TIM_IC_Start+0x62>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b04      	cmp	r3, #4
 800618a:	d104      	bne.n	8006196 <HAL_TIM_IC_Start+0x2a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006192:	b2db      	uxtb	r3, r3
 8006194:	e01b      	b.n	80061ce <HAL_TIM_IC_Start+0x62>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d104      	bne.n	80061a6 <HAL_TIM_IC_Start+0x3a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e013      	b.n	80061ce <HAL_TIM_IC_Start+0x62>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b0c      	cmp	r3, #12
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_IC_Start+0x4a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	e00b      	b.n	80061ce <HAL_TIM_IC_Start+0x62>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_IC_Start+0x5a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	e003      	b.n	80061ce <HAL_TIM_IC_Start+0x62>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <HAL_TIM_IC_Start+0x74>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e013      	b.n	8006208 <HAL_TIM_IC_Start+0x9c>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d104      	bne.n	80061f0 <HAL_TIM_IC_Start+0x84>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e00b      	b.n	8006208 <HAL_TIM_IC_Start+0x9c>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d104      	bne.n	8006200 <HAL_TIM_IC_Start+0x94>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	e003      	b.n	8006208 <HAL_TIM_IC_Start+0x9c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006206:	b2db      	uxtb	r3, r3
 8006208:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d102      	bne.n	8006216 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d001      	beq.n	800621a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e092      	b.n	8006340 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <HAL_TIM_IC_Start+0xbe>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006228:	e023      	b.n	8006272 <HAL_TIM_IC_Start+0x106>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b04      	cmp	r3, #4
 800622e:	d104      	bne.n	800623a <HAL_TIM_IC_Start+0xce>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006238:	e01b      	b.n	8006272 <HAL_TIM_IC_Start+0x106>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d104      	bne.n	800624a <HAL_TIM_IC_Start+0xde>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006248:	e013      	b.n	8006272 <HAL_TIM_IC_Start+0x106>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b0c      	cmp	r3, #12
 800624e:	d104      	bne.n	800625a <HAL_TIM_IC_Start+0xee>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006258:	e00b      	b.n	8006272 <HAL_TIM_IC_Start+0x106>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b10      	cmp	r3, #16
 800625e:	d104      	bne.n	800626a <HAL_TIM_IC_Start+0xfe>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006268:	e003      	b.n	8006272 <HAL_TIM_IC_Start+0x106>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <HAL_TIM_IC_Start+0x116>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006280:	e013      	b.n	80062aa <HAL_TIM_IC_Start+0x13e>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d104      	bne.n	8006292 <HAL_TIM_IC_Start+0x126>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006290:	e00b      	b.n	80062aa <HAL_TIM_IC_Start+0x13e>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_IC_Start+0x136>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062a0:	e003      	b.n	80062aa <HAL_TIM_IC_Start+0x13e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f985 	bl	80075c2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a22      	ldr	r2, [pc, #136]	; (8006348 <HAL_TIM_IC_Start+0x1dc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01d      	beq.n	80062fe <HAL_TIM_IC_Start+0x192>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ca:	d018      	beq.n	80062fe <HAL_TIM_IC_Start+0x192>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1e      	ldr	r2, [pc, #120]	; (800634c <HAL_TIM_IC_Start+0x1e0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_TIM_IC_Start+0x192>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1d      	ldr	r2, [pc, #116]	; (8006350 <HAL_TIM_IC_Start+0x1e4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_TIM_IC_Start+0x192>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <HAL_TIM_IC_Start+0x1e8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_TIM_IC_Start+0x192>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1a      	ldr	r2, [pc, #104]	; (8006358 <HAL_TIM_IC_Start+0x1ec>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_TIM_IC_Start+0x192>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a18      	ldr	r2, [pc, #96]	; (800635c <HAL_TIM_IC_Start+0x1f0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d115      	bne.n	800632a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	4b16      	ldr	r3, [pc, #88]	; (8006360 <HAL_TIM_IC_Start+0x1f4>)
 8006306:	4013      	ands	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b06      	cmp	r3, #6
 800630e:	d015      	beq.n	800633c <HAL_TIM_IC_Start+0x1d0>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006316:	d011      	beq.n	800633c <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006328:	e008      	b.n	800633c <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e000      	b.n	800633e <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40000c00 	.word	0x40000c00
 8006358:	40013400 	.word	0x40013400
 800635c:	40014000 	.word	0x40014000
 8006360:	00010007 	.word	0x00010007

08006364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0202 	mvn.w	r2, #2
 8006390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fb46 	bl	8006a38 <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fb38 	bl	8006a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fb49 	bl	8006a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0204 	mvn.w	r2, #4
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fb1c 	bl	8006a38 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fb0e 	bl	8006a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fb1f 	bl	8006a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b08      	cmp	r3, #8
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b08      	cmp	r3, #8
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0208 	mvn.w	r2, #8
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 faf2 	bl	8006a38 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fae4 	bl	8006a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 faf5 	bl	8006a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b10      	cmp	r3, #16
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b10      	cmp	r3, #16
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0210 	mvn.w	r2, #16
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2208      	movs	r2, #8
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fac8 	bl	8006a38 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 faba 	bl	8006a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 facb 	bl	8006a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10e      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0201 	mvn.w	r2, #1
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa94 	bl	8006a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d10e      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d107      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 f90e 	bl	8007730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006522:	d10e      	bne.n	8006542 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b80      	cmp	r3, #128	; 0x80
 8006530:	d107      	bne.n	8006542 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800653a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 f901 	bl	8007744 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d10e      	bne.n	800656e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d107      	bne.n	800656e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fa79 	bl	8006a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b20      	cmp	r3, #32
 800657a:	d10e      	bne.n	800659a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b20      	cmp	r3, #32
 8006588:	d107      	bne.n	800659a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f06f 0220 	mvn.w	r2, #32
 8006592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f8c1 	bl	800771c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800659a:	bf00      	nop
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b086      	sub	sp, #24
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80065bc:	2302      	movs	r3, #2
 80065be:	e088      	b.n	80066d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d11b      	bne.n	8006606 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f000 fe4d 	bl	800727c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 020c 	bic.w	r2, r2, #12
 80065f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6999      	ldr	r1, [r3, #24]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	619a      	str	r2, [r3, #24]
 8006604:	e060      	b.n	80066c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d11c      	bne.n	8006646 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f000 fecb 	bl	80073b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699a      	ldr	r2, [r3, #24]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800662e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6999      	ldr	r1, [r3, #24]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	021a      	lsls	r2, r3, #8
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	619a      	str	r2, [r3, #24]
 8006644:	e040      	b.n	80066c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d11b      	bne.n	8006684 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f000 ff18 	bl	8007490 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69da      	ldr	r2, [r3, #28]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 020c 	bic.w	r2, r2, #12
 800666e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69d9      	ldr	r1, [r3, #28]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	61da      	str	r2, [r3, #28]
 8006682:	e021      	b.n	80066c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b0c      	cmp	r3, #12
 8006688:	d11c      	bne.n	80066c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6819      	ldr	r1, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f000 ff35 	bl	8007508 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69d9      	ldr	r1, [r3, #28]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	021a      	lsls	r2, r3, #8
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	61da      	str	r2, [r3, #28]
 80066c2:	e001      	b.n	80066c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e0ff      	b.n	80068fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b14      	cmp	r3, #20
 8006706:	f200 80f0 	bhi.w	80068ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800670a:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006765 	.word	0x08006765
 8006714:	080068eb 	.word	0x080068eb
 8006718:	080068eb 	.word	0x080068eb
 800671c:	080068eb 	.word	0x080068eb
 8006720:	080067a5 	.word	0x080067a5
 8006724:	080068eb 	.word	0x080068eb
 8006728:	080068eb 	.word	0x080068eb
 800672c:	080068eb 	.word	0x080068eb
 8006730:	080067e7 	.word	0x080067e7
 8006734:	080068eb 	.word	0x080068eb
 8006738:	080068eb 	.word	0x080068eb
 800673c:	080068eb 	.word	0x080068eb
 8006740:	08006827 	.word	0x08006827
 8006744:	080068eb 	.word	0x080068eb
 8006748:	080068eb 	.word	0x080068eb
 800674c:	080068eb 	.word	0x080068eb
 8006750:	08006869 	.word	0x08006869
 8006754:	080068eb 	.word	0x080068eb
 8006758:	080068eb 	.word	0x080068eb
 800675c:	080068eb 	.word	0x080068eb
 8006760:	080068a9 	.word	0x080068a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fa1c 	bl	8006ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0208 	orr.w	r2, r2, #8
 800677e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0204 	bic.w	r2, r2, #4
 800678e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6999      	ldr	r1, [r3, #24]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	619a      	str	r2, [r3, #24]
      break;
 80067a2:	e0a5      	b.n	80068f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fa8c 	bl	8006cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6999      	ldr	r1, [r3, #24]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	021a      	lsls	r2, r3, #8
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	619a      	str	r2, [r3, #24]
      break;
 80067e4:	e084      	b.n	80068f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 faf5 	bl	8006ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0208 	orr.w	r2, r2, #8
 8006800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0204 	bic.w	r2, r2, #4
 8006810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69d9      	ldr	r1, [r3, #28]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	61da      	str	r2, [r3, #28]
      break;
 8006824:	e064      	b.n	80068f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fb5d 	bl	8006eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69d9      	ldr	r1, [r3, #28]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	021a      	lsls	r2, r3, #8
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	61da      	str	r2, [r3, #28]
      break;
 8006866:	e043      	b.n	80068f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fba6 	bl	8006fc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0208 	orr.w	r2, r2, #8
 8006882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0204 	bic.w	r2, r2, #4
 8006892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068a6:	e023      	b.n	80068f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fbea 	bl	8007088 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	021a      	lsls	r2, r3, #8
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068e8:	e002      	b.n	80068f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	75fb      	strb	r3, [r7, #23]
      break;
 80068ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop

08006904 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006918:	2302      	movs	r3, #2
 800691a:	e031      	b.n	8006980 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fc10 	bl	8007154 <TIM_SlaveTimer_SetConfig>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e018      	b.n	8006980 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800696c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b0c      	cmp	r3, #12
 800699a:	d831      	bhi.n	8006a00 <HAL_TIM_ReadCapturedValue+0x78>
 800699c:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	08006a01 	.word	0x08006a01
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	08006a01 	.word	0x08006a01
 80069b4:	080069e3 	.word	0x080069e3
 80069b8:	08006a01 	.word	0x08006a01
 80069bc:	08006a01 	.word	0x08006a01
 80069c0:	08006a01 	.word	0x08006a01
 80069c4:	080069ed 	.word	0x080069ed
 80069c8:	08006a01 	.word	0x08006a01
 80069cc:	08006a01 	.word	0x08006a01
 80069d0:	08006a01 	.word	0x08006a01
 80069d4:	080069f7 	.word	0x080069f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069de:	60fb      	str	r3, [r7, #12]

      break;
 80069e0:	e00f      	b.n	8006a02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	60fb      	str	r3, [r7, #12]

      break;
 80069ea:	e00a      	b.n	8006a02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	60fb      	str	r3, [r7, #12]

      break;
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	60fb      	str	r3, [r7, #12]

      break;
 80069fe:	e000      	b.n	8006a02 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a00:	bf00      	nop
  }

  return tmpreg;
 8006a02:	68fb      	ldr	r3, [r7, #12]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a40      	ldr	r2, [pc, #256]	; (8006b88 <TIM_Base_SetConfig+0x114>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a92:	d00f      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a3d      	ldr	r2, [pc, #244]	; (8006b8c <TIM_Base_SetConfig+0x118>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a3c      	ldr	r2, [pc, #240]	; (8006b90 <TIM_Base_SetConfig+0x11c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a3b      	ldr	r2, [pc, #236]	; (8006b94 <TIM_Base_SetConfig+0x120>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a3a      	ldr	r2, [pc, #232]	; (8006b98 <TIM_Base_SetConfig+0x124>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d108      	bne.n	8006ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2f      	ldr	r2, [pc, #188]	; (8006b88 <TIM_Base_SetConfig+0x114>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01f      	beq.n	8006b0e <TIM_Base_SetConfig+0x9a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad4:	d01b      	beq.n	8006b0e <TIM_Base_SetConfig+0x9a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2c      	ldr	r2, [pc, #176]	; (8006b8c <TIM_Base_SetConfig+0x118>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d017      	beq.n	8006b0e <TIM_Base_SetConfig+0x9a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2b      	ldr	r2, [pc, #172]	; (8006b90 <TIM_Base_SetConfig+0x11c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <TIM_Base_SetConfig+0x9a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2a      	ldr	r2, [pc, #168]	; (8006b94 <TIM_Base_SetConfig+0x120>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00f      	beq.n	8006b0e <TIM_Base_SetConfig+0x9a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a29      	ldr	r2, [pc, #164]	; (8006b98 <TIM_Base_SetConfig+0x124>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00b      	beq.n	8006b0e <TIM_Base_SetConfig+0x9a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <TIM_Base_SetConfig+0x128>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d007      	beq.n	8006b0e <TIM_Base_SetConfig+0x9a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a27      	ldr	r2, [pc, #156]	; (8006ba0 <TIM_Base_SetConfig+0x12c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <TIM_Base_SetConfig+0x9a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a26      	ldr	r2, [pc, #152]	; (8006ba4 <TIM_Base_SetConfig+0x130>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d108      	bne.n	8006b20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a10      	ldr	r2, [pc, #64]	; (8006b88 <TIM_Base_SetConfig+0x114>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00f      	beq.n	8006b6c <TIM_Base_SetConfig+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a12      	ldr	r2, [pc, #72]	; (8006b98 <TIM_Base_SetConfig+0x124>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00b      	beq.n	8006b6c <TIM_Base_SetConfig+0xf8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a11      	ldr	r2, [pc, #68]	; (8006b9c <TIM_Base_SetConfig+0x128>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d007      	beq.n	8006b6c <TIM_Base_SetConfig+0xf8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a10      	ldr	r2, [pc, #64]	; (8006ba0 <TIM_Base_SetConfig+0x12c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d003      	beq.n	8006b6c <TIM_Base_SetConfig+0xf8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a0f      	ldr	r2, [pc, #60]	; (8006ba4 <TIM_Base_SetConfig+0x130>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d103      	bne.n	8006b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	615a      	str	r2, [r3, #20]
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40012c00 	.word	0x40012c00
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800
 8006b94:	40000c00 	.word	0x40000c00
 8006b98:	40013400 	.word	0x40013400
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800

08006ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0201 	bic.w	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0303 	bic.w	r3, r3, #3
 8006be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f023 0302 	bic.w	r3, r3, #2
 8006bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a2c      	ldr	r2, [pc, #176]	; (8006cb4 <TIM_OC1_SetConfig+0x10c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00f      	beq.n	8006c28 <TIM_OC1_SetConfig+0x80>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a2b      	ldr	r2, [pc, #172]	; (8006cb8 <TIM_OC1_SetConfig+0x110>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00b      	beq.n	8006c28 <TIM_OC1_SetConfig+0x80>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a2a      	ldr	r2, [pc, #168]	; (8006cbc <TIM_OC1_SetConfig+0x114>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d007      	beq.n	8006c28 <TIM_OC1_SetConfig+0x80>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a29      	ldr	r2, [pc, #164]	; (8006cc0 <TIM_OC1_SetConfig+0x118>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_OC1_SetConfig+0x80>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a28      	ldr	r2, [pc, #160]	; (8006cc4 <TIM_OC1_SetConfig+0x11c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d10c      	bne.n	8006c42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f023 0308 	bic.w	r3, r3, #8
 8006c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f023 0304 	bic.w	r3, r3, #4
 8006c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <TIM_OC1_SetConfig+0x10c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00f      	beq.n	8006c6a <TIM_OC1_SetConfig+0xc2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	; (8006cb8 <TIM_OC1_SetConfig+0x110>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00b      	beq.n	8006c6a <TIM_OC1_SetConfig+0xc2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a19      	ldr	r2, [pc, #100]	; (8006cbc <TIM_OC1_SetConfig+0x114>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d007      	beq.n	8006c6a <TIM_OC1_SetConfig+0xc2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a18      	ldr	r2, [pc, #96]	; (8006cc0 <TIM_OC1_SetConfig+0x118>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_OC1_SetConfig+0xc2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a17      	ldr	r2, [pc, #92]	; (8006cc4 <TIM_OC1_SetConfig+0x11c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d111      	bne.n	8006c8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	621a      	str	r2, [r3, #32]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40013400 	.word	0x40013400
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40014400 	.word	0x40014400
 8006cc4:	40014800 	.word	0x40014800

08006cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0210 	bic.w	r2, r3, #16
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f023 0320 	bic.w	r3, r3, #32
 8006d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a28      	ldr	r2, [pc, #160]	; (8006dc8 <TIM_OC2_SetConfig+0x100>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_OC2_SetConfig+0x6c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a27      	ldr	r2, [pc, #156]	; (8006dcc <TIM_OC2_SetConfig+0x104>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d10d      	bne.n	8006d50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a1d      	ldr	r2, [pc, #116]	; (8006dc8 <TIM_OC2_SetConfig+0x100>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00f      	beq.n	8006d78 <TIM_OC2_SetConfig+0xb0>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <TIM_OC2_SetConfig+0x104>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <TIM_OC2_SetConfig+0xb0>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <TIM_OC2_SetConfig+0x108>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d007      	beq.n	8006d78 <TIM_OC2_SetConfig+0xb0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1a      	ldr	r2, [pc, #104]	; (8006dd4 <TIM_OC2_SetConfig+0x10c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC2_SetConfig+0xb0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <TIM_OC2_SetConfig+0x110>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d113      	bne.n	8006da0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40012c00 	.word	0x40012c00
 8006dcc:	40013400 	.word	0x40013400
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40014400 	.word	0x40014400
 8006dd8:	40014800 	.word	0x40014800

08006ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0303 	bic.w	r3, r3, #3
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a27      	ldr	r2, [pc, #156]	; (8006ed8 <TIM_OC3_SetConfig+0xfc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_OC3_SetConfig+0x6a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a26      	ldr	r2, [pc, #152]	; (8006edc <TIM_OC3_SetConfig+0x100>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d10d      	bne.n	8006e62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <TIM_OC3_SetConfig+0xfc>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_OC3_SetConfig+0xae>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <TIM_OC3_SetConfig+0x100>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_OC3_SetConfig+0xae>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1a      	ldr	r2, [pc, #104]	; (8006ee0 <TIM_OC3_SetConfig+0x104>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_OC3_SetConfig+0xae>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a19      	ldr	r2, [pc, #100]	; (8006ee4 <TIM_OC3_SetConfig+0x108>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC3_SetConfig+0xae>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <TIM_OC3_SetConfig+0x10c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d113      	bne.n	8006eb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	40012c00 	.word	0x40012c00
 8006edc:	40013400 	.word	0x40013400
 8006ee0:	40014000 	.word	0x40014000
 8006ee4:	40014400 	.word	0x40014400
 8006ee8:	40014800 	.word	0x40014800

08006eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	031b      	lsls	r3, r3, #12
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a18      	ldr	r2, [pc, #96]	; (8006fac <TIM_OC4_SetConfig+0xc0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_OC4_SetConfig+0x84>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a17      	ldr	r2, [pc, #92]	; (8006fb0 <TIM_OC4_SetConfig+0xc4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_OC4_SetConfig+0x84>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <TIM_OC4_SetConfig+0xc8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_OC4_SetConfig+0x84>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <TIM_OC4_SetConfig+0xcc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC4_SetConfig+0x84>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <TIM_OC4_SetConfig+0xd0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d109      	bne.n	8006f84 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	019b      	lsls	r3, r3, #6
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40013400 	.word	0x40013400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800

08006fc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007004:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a17      	ldr	r2, [pc, #92]	; (8007074 <TIM_OC5_SetConfig+0xb4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00f      	beq.n	800703a <TIM_OC5_SetConfig+0x7a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a16      	ldr	r2, [pc, #88]	; (8007078 <TIM_OC5_SetConfig+0xb8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00b      	beq.n	800703a <TIM_OC5_SetConfig+0x7a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a15      	ldr	r2, [pc, #84]	; (800707c <TIM_OC5_SetConfig+0xbc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d007      	beq.n	800703a <TIM_OC5_SetConfig+0x7a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a14      	ldr	r2, [pc, #80]	; (8007080 <TIM_OC5_SetConfig+0xc0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d003      	beq.n	800703a <TIM_OC5_SetConfig+0x7a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a13      	ldr	r2, [pc, #76]	; (8007084 <TIM_OC5_SetConfig+0xc4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d109      	bne.n	800704e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007040:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	621a      	str	r2, [r3, #32]
}
 8007068:	bf00      	nop
 800706a:	371c      	adds	r7, #28
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40013400 	.word	0x40013400
 800707c:	40014000 	.word	0x40014000
 8007080:	40014400 	.word	0x40014400
 8007084:	40014800 	.word	0x40014800

08007088 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	051b      	lsls	r3, r3, #20
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a18      	ldr	r2, [pc, #96]	; (8007140 <TIM_OC6_SetConfig+0xb8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00f      	beq.n	8007104 <TIM_OC6_SetConfig+0x7c>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a17      	ldr	r2, [pc, #92]	; (8007144 <TIM_OC6_SetConfig+0xbc>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00b      	beq.n	8007104 <TIM_OC6_SetConfig+0x7c>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a16      	ldr	r2, [pc, #88]	; (8007148 <TIM_OC6_SetConfig+0xc0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d007      	beq.n	8007104 <TIM_OC6_SetConfig+0x7c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a15      	ldr	r2, [pc, #84]	; (800714c <TIM_OC6_SetConfig+0xc4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_OC6_SetConfig+0x7c>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a14      	ldr	r2, [pc, #80]	; (8007150 <TIM_OC6_SetConfig+0xc8>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d109      	bne.n	8007118 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800710a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	029b      	lsls	r3, r3, #10
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40013400 	.word	0x40013400
 8007148:	40014000 	.word	0x40014000
 800714c:	40014400 	.word	0x40014400
 8007150:	40014800 	.word	0x40014800

08007154 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007170:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007182:	f023 0307 	bic.w	r3, r3, #7
 8007186:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b70      	cmp	r3, #112	; 0x70
 80071a0:	d01a      	beq.n	80071d8 <TIM_SlaveTimer_SetConfig+0x84>
 80071a2:	2b70      	cmp	r3, #112	; 0x70
 80071a4:	d860      	bhi.n	8007268 <TIM_SlaveTimer_SetConfig+0x114>
 80071a6:	2b60      	cmp	r3, #96	; 0x60
 80071a8:	d054      	beq.n	8007254 <TIM_SlaveTimer_SetConfig+0x100>
 80071aa:	2b60      	cmp	r3, #96	; 0x60
 80071ac:	d85c      	bhi.n	8007268 <TIM_SlaveTimer_SetConfig+0x114>
 80071ae:	2b50      	cmp	r3, #80	; 0x50
 80071b0:	d046      	beq.n	8007240 <TIM_SlaveTimer_SetConfig+0xec>
 80071b2:	2b50      	cmp	r3, #80	; 0x50
 80071b4:	d858      	bhi.n	8007268 <TIM_SlaveTimer_SetConfig+0x114>
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d019      	beq.n	80071ee <TIM_SlaveTimer_SetConfig+0x9a>
 80071ba:	2b40      	cmp	r3, #64	; 0x40
 80071bc:	d854      	bhi.n	8007268 <TIM_SlaveTimer_SetConfig+0x114>
 80071be:	2b30      	cmp	r3, #48	; 0x30
 80071c0:	d055      	beq.n	800726e <TIM_SlaveTimer_SetConfig+0x11a>
 80071c2:	2b30      	cmp	r3, #48	; 0x30
 80071c4:	d850      	bhi.n	8007268 <TIM_SlaveTimer_SetConfig+0x114>
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d051      	beq.n	800726e <TIM_SlaveTimer_SetConfig+0x11a>
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d84c      	bhi.n	8007268 <TIM_SlaveTimer_SetConfig+0x114>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d04d      	beq.n	800726e <TIM_SlaveTimer_SetConfig+0x11a>
 80071d2:	2b10      	cmp	r3, #16
 80071d4:	d04b      	beq.n	800726e <TIM_SlaveTimer_SetConfig+0x11a>
 80071d6:	e047      	b.n	8007268 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68d9      	ldr	r1, [r3, #12]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f000 f9cb 	bl	8007582 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80071ec:	e040      	b.n	8007270 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b05      	cmp	r3, #5
 80071f4:	d101      	bne.n	80071fa <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e03b      	b.n	8007272 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6a1a      	ldr	r2, [r3, #32]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0201 	bic.w	r2, r2, #1
 8007210:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007220:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	4313      	orrs	r3, r2
 800722c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	621a      	str	r2, [r3, #32]
      break;
 800723e:	e017      	b.n	8007270 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	6899      	ldr	r1, [r3, #8]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	461a      	mov	r2, r3
 800724e:	f000 f883 	bl	8007358 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007252:	e00d      	b.n	8007270 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	6899      	ldr	r1, [r3, #8]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	461a      	mov	r2, r3
 8007262:	f000 f8e5 	bl	8007430 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007266:	e003      	b.n	8007270 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
      break;
 800726c:	e000      	b.n	8007270 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800726e:	bf00      	nop
  }

  return status;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0201 	bic.w	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4a26      	ldr	r2, [pc, #152]	; (8007340 <TIM_TI1_SetConfig+0xc4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d017      	beq.n	80072da <TIM_TI1_SetConfig+0x5e>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b0:	d013      	beq.n	80072da <TIM_TI1_SetConfig+0x5e>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a23      	ldr	r2, [pc, #140]	; (8007344 <TIM_TI1_SetConfig+0xc8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00f      	beq.n	80072da <TIM_TI1_SetConfig+0x5e>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4a22      	ldr	r2, [pc, #136]	; (8007348 <TIM_TI1_SetConfig+0xcc>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00b      	beq.n	80072da <TIM_TI1_SetConfig+0x5e>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a21      	ldr	r2, [pc, #132]	; (800734c <TIM_TI1_SetConfig+0xd0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d007      	beq.n	80072da <TIM_TI1_SetConfig+0x5e>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4a20      	ldr	r2, [pc, #128]	; (8007350 <TIM_TI1_SetConfig+0xd4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_TI1_SetConfig+0x5e>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a1f      	ldr	r2, [pc, #124]	; (8007354 <TIM_TI1_SetConfig+0xd8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d101      	bne.n	80072de <TIM_TI1_SetConfig+0x62>
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <TIM_TI1_SetConfig+0x64>
 80072de:	2300      	movs	r3, #0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e003      	b.n	80072fe <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	b2db      	uxtb	r3, r3
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f023 030a 	bic.w	r3, r3, #10
 8007318:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f003 030a 	and.w	r3, r3, #10
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40012c00 	.word	0x40012c00
 8007344:	40000400 	.word	0x40000400
 8007348:	40000800 	.word	0x40000800
 800734c:	40000c00 	.word	0x40000c00
 8007350:	40013400 	.word	0x40013400
 8007354:	40014000 	.word	0x40014000

08007358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0201 	bic.w	r2, r3, #1
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f023 030a 	bic.w	r3, r3, #10
 8007394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b087      	sub	sp, #28
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f023 0210 	bic.w	r2, r3, #16
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	031b      	lsls	r3, r3, #12
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007408:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	621a      	str	r2, [r3, #32]
}
 8007424:	bf00      	nop
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	f023 0210 	bic.w	r2, r3, #16
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800745a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	031b      	lsls	r3, r3, #12
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800746c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	621a      	str	r2, [r3, #32]
}
 8007484:	bf00      	nop
 8007486:	371c      	adds	r7, #28
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f023 0303 	bic.w	r3, r3, #3
 80074bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80074e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	621a      	str	r2, [r3, #32]
}
 80074fc:	bf00      	nop
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007546:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	031b      	lsls	r3, r3, #12
 800754c:	b29b      	uxth	r3, r3
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800755a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	031b      	lsls	r3, r3, #12
 8007560:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	621a      	str	r2, [r3, #32]
}
 8007576:	bf00      	nop
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
 800758e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	021a      	lsls	r2, r3, #8
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	609a      	str	r2, [r3, #8]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b087      	sub	sp, #28
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	2201      	movs	r2, #1
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a1a      	ldr	r2, [r3, #32]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	43db      	mvns	r3, r3
 80075e4:	401a      	ands	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	fa01 f303 	lsl.w	r3, r1, r3
 80075fa:	431a      	orrs	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	621a      	str	r2, [r3, #32]
}
 8007600:	bf00      	nop
 8007602:	371c      	adds	r7, #28
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007620:	2302      	movs	r3, #2
 8007622:	e068      	b.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a2e      	ldr	r2, [pc, #184]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d004      	beq.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a2d      	ldr	r2, [pc, #180]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d108      	bne.n	800766a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800765e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1e      	ldr	r2, [pc, #120]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01d      	beq.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007696:	d018      	beq.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a1a      	ldr	r2, [pc, #104]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00e      	beq.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a18      	ldr	r2, [pc, #96]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d009      	beq.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a13      	ldr	r2, [pc, #76]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a14      	ldr	r2, [pc, #80]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d10c      	bne.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40013400 	.word	0x40013400
 800770c:	40000400 	.word	0x40000400
 8007710:	40000800 	.word	0x40000800
 8007714:	40000c00 	.word	0x40000c00
 8007718:	40014000 	.word	0x40014000

0800771c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e040      	b.n	80077ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fa f87a 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2224      	movs	r2, #36	; 0x24
 8007784:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f82c 	bl	80077f4 <UART_SetConfig>
 800779c:	4603      	mov	r3, r0
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e022      	b.n	80077ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fad8 	bl	8007d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fb5f 	bl	8007ea8 <UART_CheckIdleState>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077f8:	b08a      	sub	sp, #40	; 0x28
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	431a      	orrs	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	431a      	orrs	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	4313      	orrs	r3, r2
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4ba4      	ldr	r3, [pc, #656]	; (8007ab4 <UART_SetConfig+0x2c0>)
 8007824:	4013      	ands	r3, r2
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	6812      	ldr	r2, [r2, #0]
 800782a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800782c:	430b      	orrs	r3, r1
 800782e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a99      	ldr	r2, [pc, #612]	; (8007ab8 <UART_SetConfig+0x2c4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d004      	beq.n	8007860 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785c:	4313      	orrs	r3, r2
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007870:	430a      	orrs	r2, r1
 8007872:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a90      	ldr	r2, [pc, #576]	; (8007abc <UART_SetConfig+0x2c8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d126      	bne.n	80078cc <UART_SetConfig+0xd8>
 800787e:	4b90      	ldr	r3, [pc, #576]	; (8007ac0 <UART_SetConfig+0x2cc>)
 8007880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	2b03      	cmp	r3, #3
 800788a:	d81b      	bhi.n	80078c4 <UART_SetConfig+0xd0>
 800788c:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <UART_SetConfig+0xa0>)
 800788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007892:	bf00      	nop
 8007894:	080078a5 	.word	0x080078a5
 8007898:	080078b5 	.word	0x080078b5
 800789c:	080078ad 	.word	0x080078ad
 80078a0:	080078bd 	.word	0x080078bd
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078aa:	e116      	b.n	8007ada <UART_SetConfig+0x2e6>
 80078ac:	2302      	movs	r3, #2
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b2:	e112      	b.n	8007ada <UART_SetConfig+0x2e6>
 80078b4:	2304      	movs	r3, #4
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ba:	e10e      	b.n	8007ada <UART_SetConfig+0x2e6>
 80078bc:	2308      	movs	r3, #8
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c2:	e10a      	b.n	8007ada <UART_SetConfig+0x2e6>
 80078c4:	2310      	movs	r3, #16
 80078c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ca:	e106      	b.n	8007ada <UART_SetConfig+0x2e6>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a7c      	ldr	r2, [pc, #496]	; (8007ac4 <UART_SetConfig+0x2d0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d138      	bne.n	8007948 <UART_SetConfig+0x154>
 80078d6:	4b7a      	ldr	r3, [pc, #488]	; (8007ac0 <UART_SetConfig+0x2cc>)
 80078d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078dc:	f003 030c 	and.w	r3, r3, #12
 80078e0:	2b0c      	cmp	r3, #12
 80078e2:	d82d      	bhi.n	8007940 <UART_SetConfig+0x14c>
 80078e4:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <UART_SetConfig+0xf8>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	08007921 	.word	0x08007921
 80078f0:	08007941 	.word	0x08007941
 80078f4:	08007941 	.word	0x08007941
 80078f8:	08007941 	.word	0x08007941
 80078fc:	08007931 	.word	0x08007931
 8007900:	08007941 	.word	0x08007941
 8007904:	08007941 	.word	0x08007941
 8007908:	08007941 	.word	0x08007941
 800790c:	08007929 	.word	0x08007929
 8007910:	08007941 	.word	0x08007941
 8007914:	08007941 	.word	0x08007941
 8007918:	08007941 	.word	0x08007941
 800791c:	08007939 	.word	0x08007939
 8007920:	2300      	movs	r3, #0
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007926:	e0d8      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800792e:	e0d4      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007936:	e0d0      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800793e:	e0cc      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007946:	e0c8      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a5e      	ldr	r2, [pc, #376]	; (8007ac8 <UART_SetConfig+0x2d4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d125      	bne.n	800799e <UART_SetConfig+0x1aa>
 8007952:	4b5b      	ldr	r3, [pc, #364]	; (8007ac0 <UART_SetConfig+0x2cc>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007958:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800795c:	2b30      	cmp	r3, #48	; 0x30
 800795e:	d016      	beq.n	800798e <UART_SetConfig+0x19a>
 8007960:	2b30      	cmp	r3, #48	; 0x30
 8007962:	d818      	bhi.n	8007996 <UART_SetConfig+0x1a2>
 8007964:	2b20      	cmp	r3, #32
 8007966:	d00a      	beq.n	800797e <UART_SetConfig+0x18a>
 8007968:	2b20      	cmp	r3, #32
 800796a:	d814      	bhi.n	8007996 <UART_SetConfig+0x1a2>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <UART_SetConfig+0x182>
 8007970:	2b10      	cmp	r3, #16
 8007972:	d008      	beq.n	8007986 <UART_SetConfig+0x192>
 8007974:	e00f      	b.n	8007996 <UART_SetConfig+0x1a2>
 8007976:	2300      	movs	r3, #0
 8007978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797c:	e0ad      	b.n	8007ada <UART_SetConfig+0x2e6>
 800797e:	2302      	movs	r3, #2
 8007980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007984:	e0a9      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007986:	2304      	movs	r3, #4
 8007988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798c:	e0a5      	b.n	8007ada <UART_SetConfig+0x2e6>
 800798e:	2308      	movs	r3, #8
 8007990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007994:	e0a1      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007996:	2310      	movs	r3, #16
 8007998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800799c:	e09d      	b.n	8007ada <UART_SetConfig+0x2e6>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a4a      	ldr	r2, [pc, #296]	; (8007acc <UART_SetConfig+0x2d8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d125      	bne.n	80079f4 <UART_SetConfig+0x200>
 80079a8:	4b45      	ldr	r3, [pc, #276]	; (8007ac0 <UART_SetConfig+0x2cc>)
 80079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079b2:	2bc0      	cmp	r3, #192	; 0xc0
 80079b4:	d016      	beq.n	80079e4 <UART_SetConfig+0x1f0>
 80079b6:	2bc0      	cmp	r3, #192	; 0xc0
 80079b8:	d818      	bhi.n	80079ec <UART_SetConfig+0x1f8>
 80079ba:	2b80      	cmp	r3, #128	; 0x80
 80079bc:	d00a      	beq.n	80079d4 <UART_SetConfig+0x1e0>
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d814      	bhi.n	80079ec <UART_SetConfig+0x1f8>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <UART_SetConfig+0x1d8>
 80079c6:	2b40      	cmp	r3, #64	; 0x40
 80079c8:	d008      	beq.n	80079dc <UART_SetConfig+0x1e8>
 80079ca:	e00f      	b.n	80079ec <UART_SetConfig+0x1f8>
 80079cc:	2300      	movs	r3, #0
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079d2:	e082      	b.n	8007ada <UART_SetConfig+0x2e6>
 80079d4:	2302      	movs	r3, #2
 80079d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079da:	e07e      	b.n	8007ada <UART_SetConfig+0x2e6>
 80079dc:	2304      	movs	r3, #4
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079e2:	e07a      	b.n	8007ada <UART_SetConfig+0x2e6>
 80079e4:	2308      	movs	r3, #8
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ea:	e076      	b.n	8007ada <UART_SetConfig+0x2e6>
 80079ec:	2310      	movs	r3, #16
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079f2:	e072      	b.n	8007ada <UART_SetConfig+0x2e6>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a35      	ldr	r2, [pc, #212]	; (8007ad0 <UART_SetConfig+0x2dc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d12a      	bne.n	8007a54 <UART_SetConfig+0x260>
 80079fe:	4b30      	ldr	r3, [pc, #192]	; (8007ac0 <UART_SetConfig+0x2cc>)
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a0c:	d01a      	beq.n	8007a44 <UART_SetConfig+0x250>
 8007a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a12:	d81b      	bhi.n	8007a4c <UART_SetConfig+0x258>
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	d00c      	beq.n	8007a34 <UART_SetConfig+0x240>
 8007a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a1e:	d815      	bhi.n	8007a4c <UART_SetConfig+0x258>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <UART_SetConfig+0x238>
 8007a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a28:	d008      	beq.n	8007a3c <UART_SetConfig+0x248>
 8007a2a:	e00f      	b.n	8007a4c <UART_SetConfig+0x258>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a32:	e052      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007a34:	2302      	movs	r3, #2
 8007a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a3a:	e04e      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a42:	e04a      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007a44:	2308      	movs	r3, #8
 8007a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a4a:	e046      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a52:	e042      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a17      	ldr	r2, [pc, #92]	; (8007ab8 <UART_SetConfig+0x2c4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d13a      	bne.n	8007ad4 <UART_SetConfig+0x2e0>
 8007a5e:	4b18      	ldr	r3, [pc, #96]	; (8007ac0 <UART_SetConfig+0x2cc>)
 8007a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a6c:	d01a      	beq.n	8007aa4 <UART_SetConfig+0x2b0>
 8007a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a72:	d81b      	bhi.n	8007aac <UART_SetConfig+0x2b8>
 8007a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a78:	d00c      	beq.n	8007a94 <UART_SetConfig+0x2a0>
 8007a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a7e:	d815      	bhi.n	8007aac <UART_SetConfig+0x2b8>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <UART_SetConfig+0x298>
 8007a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a88:	d008      	beq.n	8007a9c <UART_SetConfig+0x2a8>
 8007a8a:	e00f      	b.n	8007aac <UART_SetConfig+0x2b8>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a92:	e022      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007a94:	2302      	movs	r3, #2
 8007a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a9a:	e01e      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aa2:	e01a      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aaa:	e016      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007aac:	2310      	movs	r3, #16
 8007aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab2:	e012      	b.n	8007ada <UART_SetConfig+0x2e6>
 8007ab4:	efff69f3 	.word	0xefff69f3
 8007ab8:	40008000 	.word	0x40008000
 8007abc:	40013800 	.word	0x40013800
 8007ac0:	40021000 	.word	0x40021000
 8007ac4:	40004400 	.word	0x40004400
 8007ac8:	40004800 	.word	0x40004800
 8007acc:	40004c00 	.word	0x40004c00
 8007ad0:	40005000 	.word	0x40005000
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a9f      	ldr	r2, [pc, #636]	; (8007d5c <UART_SetConfig+0x568>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d17a      	bne.n	8007bda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d824      	bhi.n	8007b36 <UART_SetConfig+0x342>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <UART_SetConfig+0x300>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b19 	.word	0x08007b19
 8007af8:	08007b37 	.word	0x08007b37
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b37 	.word	0x08007b37
 8007b04:	08007b27 	.word	0x08007b27
 8007b08:	08007b37 	.word	0x08007b37
 8007b0c:	08007b37 	.word	0x08007b37
 8007b10:	08007b37 	.word	0x08007b37
 8007b14:	08007b2f 	.word	0x08007b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b18:	f7fd fafa 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 8007b1c:	61f8      	str	r0, [r7, #28]
        break;
 8007b1e:	e010      	b.n	8007b42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b20:	4b8f      	ldr	r3, [pc, #572]	; (8007d60 <UART_SetConfig+0x56c>)
 8007b22:	61fb      	str	r3, [r7, #28]
        break;
 8007b24:	e00d      	b.n	8007b42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b26:	f7fd fa5b 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8007b2a:	61f8      	str	r0, [r7, #28]
        break;
 8007b2c:	e009      	b.n	8007b42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b32:	61fb      	str	r3, [r7, #28]
        break;
 8007b34:	e005      	b.n	8007b42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80fb 	beq.w	8007d40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	4413      	add	r3, r2
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d305      	bcc.n	8007b66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d903      	bls.n	8007b6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b6c:	e0e8      	b.n	8007d40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	2200      	movs	r2, #0
 8007b72:	461c      	mov	r4, r3
 8007b74:	4615      	mov	r5, r2
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	022b      	lsls	r3, r5, #8
 8007b80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007b84:	0222      	lsls	r2, r4, #8
 8007b86:	68f9      	ldr	r1, [r7, #12]
 8007b88:	6849      	ldr	r1, [r1, #4]
 8007b8a:	0849      	lsrs	r1, r1, #1
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	4688      	mov	r8, r1
 8007b90:	4681      	mov	r9, r0
 8007b92:	eb12 0a08 	adds.w	sl, r2, r8
 8007b96:	eb43 0b09 	adc.w	fp, r3, r9
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba8:	4650      	mov	r0, sl
 8007baa:	4659      	mov	r1, fp
 8007bac:	f7f8 fb0c 	bl	80001c8 <__aeabi_uldivmod>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bbe:	d308      	bcc.n	8007bd2 <UART_SetConfig+0x3de>
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc6:	d204      	bcs.n	8007bd2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	60da      	str	r2, [r3, #12]
 8007bd0:	e0b6      	b.n	8007d40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007bd8:	e0b2      	b.n	8007d40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be2:	d15e      	bne.n	8007ca2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d828      	bhi.n	8007c3e <UART_SetConfig+0x44a>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0x400>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c21 	.word	0x08007c21
 8007bfc:	08007c29 	.word	0x08007c29
 8007c00:	08007c3f 	.word	0x08007c3f
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c3f 	.word	0x08007c3f
 8007c0c:	08007c3f 	.word	0x08007c3f
 8007c10:	08007c3f 	.word	0x08007c3f
 8007c14:	08007c37 	.word	0x08007c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c18:	f7fd fa7a 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 8007c1c:	61f8      	str	r0, [r7, #28]
        break;
 8007c1e:	e014      	b.n	8007c4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c20:	f7fd fa8c 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 8007c24:	61f8      	str	r0, [r7, #28]
        break;
 8007c26:	e010      	b.n	8007c4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c28:	4b4d      	ldr	r3, [pc, #308]	; (8007d60 <UART_SetConfig+0x56c>)
 8007c2a:	61fb      	str	r3, [r7, #28]
        break;
 8007c2c:	e00d      	b.n	8007c4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2e:	f7fd f9d7 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8007c32:	61f8      	str	r0, [r7, #28]
        break;
 8007c34:	e009      	b.n	8007c4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3a:	61fb      	str	r3, [r7, #28]
        break;
 8007c3c:	e005      	b.n	8007c4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d077      	beq.n	8007d40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	005a      	lsls	r2, r3, #1
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	441a      	add	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b0f      	cmp	r3, #15
 8007c6a:	d916      	bls.n	8007c9a <UART_SetConfig+0x4a6>
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c72:	d212      	bcs.n	8007c9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f023 030f 	bic.w	r3, r3, #15
 8007c7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	8afb      	ldrh	r3, [r7, #22]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	8afa      	ldrh	r2, [r7, #22]
 8007c96:	60da      	str	r2, [r3, #12]
 8007c98:	e052      	b.n	8007d40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ca0:	e04e      	b.n	8007d40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d827      	bhi.n	8007cfa <UART_SetConfig+0x506>
 8007caa:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <UART_SetConfig+0x4bc>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007cdd 	.word	0x08007cdd
 8007cb8:	08007ce5 	.word	0x08007ce5
 8007cbc:	08007cfb 	.word	0x08007cfb
 8007cc0:	08007ceb 	.word	0x08007ceb
 8007cc4:	08007cfb 	.word	0x08007cfb
 8007cc8:	08007cfb 	.word	0x08007cfb
 8007ccc:	08007cfb 	.word	0x08007cfb
 8007cd0:	08007cf3 	.word	0x08007cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd4:	f7fd fa1c 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 8007cd8:	61f8      	str	r0, [r7, #28]
        break;
 8007cda:	e014      	b.n	8007d06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cdc:	f7fd fa2e 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 8007ce0:	61f8      	str	r0, [r7, #28]
        break;
 8007ce2:	e010      	b.n	8007d06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce4:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <UART_SetConfig+0x56c>)
 8007ce6:	61fb      	str	r3, [r7, #28]
        break;
 8007ce8:	e00d      	b.n	8007d06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cea:	f7fd f979 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8007cee:	61f8      	str	r0, [r7, #28]
        break;
 8007cf0:	e009      	b.n	8007d06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cf6:	61fb      	str	r3, [r7, #28]
        break;
 8007cf8:	e005      	b.n	8007d06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d04:	bf00      	nop
    }

    if (pclk != 0U)
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d019      	beq.n	8007d40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	085a      	lsrs	r2, r3, #1
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	441a      	add	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	2b0f      	cmp	r3, #15
 8007d24:	d909      	bls.n	8007d3a <UART_SetConfig+0x546>
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d2c:	d205      	bcs.n	8007d3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60da      	str	r2, [r3, #12]
 8007d38:	e002      	b.n	8007d40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3728      	adds	r7, #40	; 0x28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40008000 	.word	0x40008000
 8007d60:	00f42400 	.word	0x00f42400

08007d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01a      	beq.n	8007e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e62:	d10a      	bne.n	8007e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eb8:	f7f9 fe74 	bl	8001ba4 <HAL_GetTick>
 8007ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d10e      	bne.n	8007eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f82d 	bl	8007f3a <UART_WaitOnFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e023      	b.n	8007f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d10e      	bne.n	8007f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f817 	bl	8007f3a <UART_WaitOnFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e00d      	b.n	8007f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b09c      	sub	sp, #112	; 0x70
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	4613      	mov	r3, r2
 8007f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f4a:	e0a5      	b.n	8008098 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	f000 80a1 	beq.w	8008098 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f56:	f7f9 fe25 	bl	8001ba4 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d302      	bcc.n	8007f6c <UART_WaitOnFlagUntilTimeout+0x32>
 8007f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d13e      	bne.n	8007fea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f80:	667b      	str	r3, [r7, #100]	; 0x64
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e6      	bne.n	8007f6c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	663b      	str	r3, [r7, #96]	; 0x60
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e5      	bne.n	8007f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e067      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d04f      	beq.n	8008098 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008006:	d147      	bne.n	8008098 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008010:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008026:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
 8008032:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e6      	bne.n	8008012 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	613b      	str	r3, [r7, #16]
   return(result);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f023 0301 	bic.w	r3, r3, #1
 800805a:	66bb      	str	r3, [r7, #104]	; 0x68
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3308      	adds	r3, #8
 8008062:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008064:	623a      	str	r2, [r7, #32]
 8008066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	69f9      	ldr	r1, [r7, #28]
 800806a:	6a3a      	ldr	r2, [r7, #32]
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	61bb      	str	r3, [r7, #24]
   return(result);
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e5      	bne.n	8008044 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2220      	movs	r2, #32
 800807c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2220      	movs	r2, #32
 8008082:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2220      	movs	r2, #32
 8008088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e010      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69da      	ldr	r2, [r3, #28]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	4013      	ands	r3, r2
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	f43f af4a 	beq.w	8007f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3770      	adds	r7, #112	; 0x70
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <__libc_init_array>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	4d0d      	ldr	r5, [pc, #52]	; (80080fc <__libc_init_array+0x38>)
 80080c8:	4c0d      	ldr	r4, [pc, #52]	; (8008100 <__libc_init_array+0x3c>)
 80080ca:	1b64      	subs	r4, r4, r5
 80080cc:	10a4      	asrs	r4, r4, #2
 80080ce:	2600      	movs	r6, #0
 80080d0:	42a6      	cmp	r6, r4
 80080d2:	d109      	bne.n	80080e8 <__libc_init_array+0x24>
 80080d4:	4d0b      	ldr	r5, [pc, #44]	; (8008104 <__libc_init_array+0x40>)
 80080d6:	4c0c      	ldr	r4, [pc, #48]	; (8008108 <__libc_init_array+0x44>)
 80080d8:	f000 f820 	bl	800811c <_init>
 80080dc:	1b64      	subs	r4, r4, r5
 80080de:	10a4      	asrs	r4, r4, #2
 80080e0:	2600      	movs	r6, #0
 80080e2:	42a6      	cmp	r6, r4
 80080e4:	d105      	bne.n	80080f2 <__libc_init_array+0x2e>
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ec:	4798      	blx	r3
 80080ee:	3601      	adds	r6, #1
 80080f0:	e7ee      	b.n	80080d0 <__libc_init_array+0xc>
 80080f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f6:	4798      	blx	r3
 80080f8:	3601      	adds	r6, #1
 80080fa:	e7f2      	b.n	80080e2 <__libc_init_array+0x1e>
 80080fc:	08008184 	.word	0x08008184
 8008100:	08008184 	.word	0x08008184
 8008104:	08008184 	.word	0x08008184
 8008108:	08008188 	.word	0x08008188

0800810c <memset>:
 800810c:	4402      	add	r2, r0
 800810e:	4603      	mov	r3, r0
 8008110:	4293      	cmp	r3, r2
 8008112:	d100      	bne.n	8008116 <memset+0xa>
 8008114:	4770      	bx	lr
 8008116:	f803 1b01 	strb.w	r1, [r3], #1
 800811a:	e7f9      	b.n	8008110 <memset+0x4>

0800811c <_init>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	bf00      	nop
 8008120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008122:	bc08      	pop	{r3}
 8008124:	469e      	mov	lr, r3
 8008126:	4770      	bx	lr

08008128 <_fini>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	bf00      	nop
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr
